{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ESP32 STUDY","text":"<p>This project is for ESP32 study and practice.</p> <p></p>"},{"location":"#espressif-systems-espressif-iot-development-framework-esp-idf","title":"ESPRESSIF SYSTEMS &amp; ESPRESSIF IOT DEVELOPMENT FRAMEWORK (ESP-IDF)","text":"<p>Info</p> <p>Espressif Systems is a semiconductor company based in China, known for developing low-power wireless solutions, including Wi-Fi and Bluetooth modules and SoCs (System on Chips). Their products, such as the ESP8266 and ESP32 series, have gained popularity in IoT, embedded systems, and wireless communication due to their low cost, power efficiency, and ease of use. Espressif provides a range of development tools and software support, making their products widely adopted by developers and engineers in various industries.</p> <p>Info</p> <p>ESP-IDF (Espressif IoT Development Framework) is the official development framework for the ESP32 series chips from Espressif. It provides a comprehensive set of tools and libraries to help developers create robust applications for ESP32-based devices. ESP-IDF supports FreeRTOS, Wi-Fi, Bluetooth, and a wide range of peripherals. It is compatible with the GCC toolchain and supports multiple languages like C and C++. The framework includes components for networking, security, power management, and driver development, making it suitable for a wide range of IoT applications.</p> <p>Note</p> <p>There are two ways to use ESP-IDF: ESP-IDF Command Prompt and GUI-based IDEs like Visual Studio Code. The latter is the most popular way to use ESP-IDF.</p>"},{"location":"#dev-toolchain","title":"DEV TOOLCHAIN","text":"TOOLCHAIN DESCRIPTION PROS CONS ESP_IDF\u2705 Espressif IoT Development Framework Rich in features, good documentation Steep learning curve MICROPYTHON Python for microcontrollers Easy to learn, rapid development Limited resources ARDUINO Open-source electronics platform Easy to use, large community Limited resources <p>Note</p> <p>For rapid prototyping, we use MICROPYTHON; for high-performance applications, we use ESP_IDF.</p>"},{"location":"#setup","title":"SETUP","text":"<p>Note</p> <p>In terms of interfacing manner, there are three ways to use ESP-IDF:</p> <ul> <li> <p>ESP-IDF Command Prompt: This is the default way to use ESP-IDF. It is a command-line interface that provides access to the tools and utilities required for ESP-IDF development.</p> </li> <li> <p>ESP-IDF IDE: This is an integrated development environment that provides a graphical interface for ESP-IDF development. It includes tools like the ESP-IDF Command Prompt, a text editor, and a project manager.</p> </li> <li> <p>IDE Plugins: These are plugins that integrate ESP-IDF with popular IDEs like Visual Studio Code and Eclipse. They provide features like code completion, syntax highlighting, and debugging support. This is the most popular way to use ESP-IDF.</p> </li> </ul> <ul> <li> <p> How to Install the ESP-IDF Toolchain on Windows \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  Portal </p> </li> <li> <p> How to Install the ESP-IDF Toolchain on Ubuntu \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  Portal </p> </li> </ul>"},{"location":"#official-guide","title":"OFFICIAL GUIDE","text":""},{"location":"#online-documentation","title":"Online Documentation","text":"<ul> <li> <p> ESP-IDF Programming Guide \ud83c\udfaf\ud83c\udfc6</p> <p>  Portal </p> </li> </ul>"},{"location":"#video-tutorials","title":"Video Tutorials","text":"<ul> <li> <p> DURUOFU ESP32-GUIDE \ud83c\udfaf\ud83c\udfc6</p> <p>  New Version </p> <p>  Old Version </p> </li> <li> <p> CHENXIN IOT \ud83c\udfaf\ud83c\udfc6</p> <p>  New Version </p> <p>  Old Version </p> </li> <li> <p> Lonely Binary ESP-IDF Tutorial \ud83c\udfaf\ud83c\udfc6</p> <p>  Portal </p> </li> <li> <p> MCU AI</p> <p>  Portal </p> </li> </ul>"},{"location":"#freertos","title":"FreeRTOS","text":"<p>Since ESP-IDF is based on FreeRTOS, learning FreeRTOS is essential for understanding ESP-IDF.</p> <ul> <li> <p> ESP32 FreeRTOS Tutorial \ud83c\udfaf\ud83c\udfc6</p> <p>  Link </p> </li> <li> <p> Binary Lone Wolf FreeRTOS Tutorial</p> <p>Based on Arduino IDE</p> <p>  Link </p> </li> </ul>"},{"location":"CHEATING_SHEET/cheating_sheet/","title":"CHEATING SHEET FOR ESP-IDF PROGRAMMING","text":"<p>Note</p> <p>This module serves as a quick reference for commonly used modules, functions, and features in ESP-IDF programming.</p>"},{"location":"CHEATING_SHEET/COMMAND/command/","title":"COMMON COMMAND","text":""},{"location":"CHEATING_SHEET/COMMAND/command/#toc","title":"TOC","text":"Use Command Create Project <code>idf.py create_project &lt;project_name&gt;</code> Set Target <code>idf.py set_target &lt;target&gt;</code> Configure <code>idf.py menuconfig</code> Create Component <code>idf.py create_component &lt;component_name&gt;</code> Add Component from ESP Component Register <code>idf.py add-dependency &lt;component_name&gt;</code> Build <code>idf.py build</code> Flash <code>idf.py -p &lt;port&gt; flash</code> Monitor <code>idf.py -p &lt;port&gt; monitor</code> Build &amp; Flash &amp; Monitor <code>idf.py build flash monitor</code>"},{"location":"CHEATING_SHEET/COMMAND/command/#create-project","title":"CREATE PROJECT","text":"<p>Command Prototype</p> <pre><code>idf.py create_project &lt;project_name&gt;\n</code></pre> <p>Example</p> <pre><code>idf.py create_project my_project\n</code></pre>"},{"location":"CHEATING_SHEET/COMMAND/command/#set-target","title":"SET TARGET","text":"<p>Command Prototype</p> <pre><code>idf.py set_target &lt;target&gt;\n</code></pre> <p>Example</p> <pre><code>idf.py set_target esp32s3\n</code></pre>"},{"location":"CHEATING_SHEET/COMMAND/command/#configure","title":"CONFIGURE","text":"<p>Command Prototype</p> <pre><code>idf.py menuconfig\n</code></pre> <p>Example</p> <pre><code>idf.py menuconfig\n</code></pre> <p>Note</p> <p>In ESP32 projects, we usually configure the project using the <code>menuconfig</code> command. The <code>menuconfig</code> command opens a configuration interface where you can configure various options of the project. This configuration interface is generated by the <code>Kconfig</code> file in the project. The values of these configuration options are saved in the <code>sdkconfig</code> file in the project. </p> <p>In short, the logical relationship of the configuration system is: <code>Kconfig</code> -&gt; <code>menuconfig</code> -&gt; <code>sdkconfig</code>. We define configuration options in the <code>Kconfig</code> file, configure these options using the <code>menuconfig</code> command, and then save the values of these configuration options in the <code>sdkconfig</code> file.</p>"},{"location":"CHEATING_SHEET/COMMAND/command/#create-component","title":"CREATE COMPONENT","text":"<p>Command Prototype</p> <pre><code>idf.py -C &lt;project_path&gt; create_component &lt;component_name&gt;\n</code></pre> <p>Note</p> <p>The <code>-C</code> option is used to specify the path of the project.</p> <p><code>&lt;project_path&gt;</code> is the path of the project.</p> <p><code>&lt;component_name&gt;</code> is the name of the component.</p> <p>Example</p> <pre><code>idf.py -C /path/to/project create_component my_component\n</code></pre>"},{"location":"CHEATING_SHEET/COMMAND/command/#add-component-from-esp-component-register","title":"ADD COMPONENT FROM ESP COMPONENT REGISTER","text":"<p>Command Prototype</p> <pre><code>idf.py add-dependency &lt;component_name&gt;\n</code></pre> <p>Example</p> <pre><code>idf.py add-dependency \"joltwallet/littlefs^1.16.4\"\n</code></pre>"},{"location":"CHEATING_SHEET/COMMAND/command/#build","title":"BUILD","text":"<p>Command Prototype</p> <pre><code>idf.py build\n</code></pre> <p>Example</p> <pre><code>idf.py build\n</code></pre>"},{"location":"CHEATING_SHEET/COMMAND/command/#flash","title":"FLASH","text":"<p>Command Prototype</p> <pre><code>idf.py -p &lt;port&gt; flash\n</code></pre> <p>Example</p> <pre><code>idf.py -p /dev/ttyACM0 flash\n</code></pre> <p>Tip</p> <p>For short, most of time, you can use <code>idf.py flash</code> and the computer will automatically detect the port.</p>"},{"location":"CHEATING_SHEET/COMMAND/command/#monitor","title":"MONITOR","text":"<p>Command Prototype</p> <pre><code>idf.py -p &lt;port&gt; monitor\n</code></pre> <p>Example</p> <pre><code>idf.py -p /dev/ttyACM0 monitor\n</code></pre> <p>Tip</p> <p>For short, most of time, you can use <code>idf.py monitor</code> and the computer will automatically detect the port.</p>"},{"location":"CHEATING_SHEET/COMMAND/command/#build-flash-monitor","title":"BUILD &amp; FLASH &amp; MONITOR","text":"<p>This is a combination of the above commands.</p> <p>Command Prototype</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>Example</p> <pre><code>idf.py build flash monitor\n</code></pre>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/","title":"FREERTOS","text":""},{"location":"CHEATING_SHEET/FREERTOS/freertos/#task-creation","title":"TASK CREATION","text":""},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xtaskcreatepinnedtocore","title":"xTaskCreatePinnedToCore","text":"<p>Function prototype</p> <pre><code>BaseType_t xTaskCreatePinnedToCore(TaskFunction_t pxTaskCode, // Task function pointer\nconst char * const pcName, // Task name\nconst uint32_t usStackDepth, // Task stack size\nvoid * const pvParameters, // Task parameters\nUBaseType_t uxPriority, // Task priority\nTaskHandle_t * const pxCreatedTask, // Task handle\nconst BaseType_t xCoreID); // Core ID\n</code></pre> <p>Function introduction</p> <p>In ESP-IDF (ESP32 Development Framework), <code>xTaskCreatePinnedToCore</code> is a function used to create a task and pin it to a specified CPU core. ESP32 is a dual-core microcontroller (ESP32-S series is single-core) with two processing cores: Core 0 and Core 1. This function helps developers pin tasks to specific cores for better CPU load management and real-time performance management.</p> <p>Parameters</p> <ul> <li><code>pxTaskCode</code>: Task function pointer. It points to the function to be executed in the new task, which is usually defined in the format of <code>void function_name(void *pvParameters)</code>, where <code>pvParameters</code> are the parameters passed to the task.</li> <li><code>pcName</code>: The name string of the task, usually used for debugging and monitoring. You can use a string name that is easy to identify.</li> <li><code>usStackDepth</code>: The size of the task stack in words (4 bytes). The stack size should be set according to the stack space required in the task.</li> <li><code>pvParameters</code>: The parameter pointer passed to the task function. If the task function does not require parameters, it can be set to <code>NULL</code>.</li> <li><code>uxPriority</code>: The priority of the task. The larger the value, the higher the priority. The range of priority that can be set in ESP-IDF is 0 to 24.</li> <li><code>pxCreatedTask</code>: The pointer to the task handle, used to receive the handle of the created task. If a task handle is not needed, it can be set to <code>NULL</code>.</li> <li><code>xCoreID</code>: <code>0</code>: bound to core 0 (primary core). <code>1</code>: bound to core 1. <code>tskNO_AFFINITY</code>: not bound to a specific core, allowing FreeRTOS to schedule the task on any core.</li> </ul> <p>Return Value</p> <ul> <li><code>pdPASS</code>: Task creation was successful.</li> <li><code>pdFAIL</code>: Task creation failed.</li> </ul> <p>Example</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// Define task function\nvoid myTask(void *pvParameters)\n{\nwhile(1)\n{\nprintf(\"Hello from myTask on Core 0\\n\");\nvTaskDelay(pdMS_TO_TICKS(1000)); // Delay 1 second\n}\n}\n\nvoid app_main(void)\n{\n// Create a task and pin it to core 0\nxTaskCreatePinnedToCore(\nmyTask, // Task function\n\"MyTask\", // Task name\n2048, // Task stack size\nNULL, // Task parameters\n5, // Task priority\nNULL, // Task handle\n0 // Core ID (0 means bound to core 0)\n);\n}\n</code></pre>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xtaskcreatestaticpinnedtocore","title":"xTaskCreateStaticPinnedToCore","text":"<p>Function prototype</p> <pre><code>TaskHandle_t xTaskCreateStaticPinnedToCore(TaskFunction_t pxTaskCode, // Task function pointer\nconst char * const pcName, // Task name\nconst uint32_t ulStackDepth, // Task stack size\nvoid * const pvParameters, // Task parameters\nUBaseType_t uxPriority, // Task priority\nStackType_t * const puxStackBuffer, // Points to the available memory area of \u200b\u200bthe stack space\nStaticTask_t * const pxTaskBuffer, // Points to the available memory area of \u200b\u200bthe task description\nconst BaseType_t xCoreID); // Core ID\n</code></pre> <p>Function introduction</p> <p><code>xTaskCreateStaticPinnedToCore</code> is a function used to create a task and pin the task to a specified CPU core. Unlike <code>xTaskCreatePinnedToCore</code>, <code>xTaskCreateStaticPinnedToCore</code> allows the user to provide the task's stack space and the memory area of \u200b\u200bthe task descriptor. This allows for better control over the memory allocation and management of the task.</p> <p>Parameters</p> <ul> <li><code>pxTaskCode</code>: Task function pointer. It points to the function to be executed in the new task, which is usually defined in the format of <code>void function_name(void *pvParameters)</code>, where <code>pvParameters</code> are the parameters passed to the task.</li> <li><code>pcName</code>: The name string of the task, usually used for debugging and monitoring. You can use a string name that is easy to identify.</li> <li><code>ulStackDepth</code>: The size of the task stack, in words (4 bytes). The stack size should be set according to the stack space required in the task.</li> <li><code>pvParameters</code>: The parameter pointer passed to the task function. If the task function does not require parameters, it can be set to <code>NULL</code>.</li> <li><code>uxPriority</code>: The priority of the task. The larger the value, the higher the priority. The priority in ESP-IDF can be set in the range of 0 to 24.</li> <li><code>puxStackBuffer</code>: Pointer to the statically allocated task stack. The stack memory needs to be allocated in advance and passed to the function. The task will use this memory instead of dynamically allocated stack space.</li> <li><code>pxTaskBuffer</code>: Pointer to the static task control block. The control block is used by FreeRTOS to manage task information (such as status, priority, stack pointer, etc.). This control block also needs to be allocated in advance.</li> <li><code>xCoreID</code>: <code>0</code>: Bound to core 0 (primary core). <code>1</code>: Bound to core 1. <code>tskNO_AFFINITY</code>: Not bound to a specific core, allowing FreeRTOS to schedule tasks on any core.</li> </ul> <p>Return value</p> <ul> <li><code>pdPASS</code>: Task creation is successful.</li> <li><code>pdFAIL</code>: Task creation failed.</li> </ul> <p>Example</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// Define static memory for task stack and task control block\nstatic StackType_t myTaskStack[2048]; // Task stack size is 2048 bytes\nstatic StaticTask_t myTaskBuffer; // Task control block\n\n// Define task function\nvoid myTask(void *pvParameters)\n{\nwhile(1)\n{\nprintf(\"Running myTask on Core 1\\n\");\nvTaskDelay(pdMS_TO_TICKS(1000)); // Delay 1 second\n}\n}\n\nvoid app_main(void)\n{\n// Create a task using static memory and bind it to core 0\nxTaskCreateStaticPinnedToCore(\nmyTask, // Task function\n\"MyStaticTask\", // Task name\n2048, // Task stack size\nNULL, // Task parameters\n5, // Task priority\nmyTaskStack, // Static stack memory\n&amp;myTaskBuffer, // Static task control block\n0 // Core ID (0 means bound to core 0)\n);\n}\n</code></pre>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#delay-and-blocking","title":"DELAY AND BLOCKING","text":""},{"location":"CHEATING_SHEET/FREERTOS/freertos/#vtaskdelay","title":"vTaskDelay","text":"<p>Function prototype</p> <pre><code>void vTaskDelay(const TickType_t xTicksToDelay);\n</code></pre> <p>Function introduction</p> <p><code>vTaskDelay</code> is a function used to delay task execution. After calling the <code>vTaskDelay</code> function in a task, the task will pause for the specified time and then continue to execute.</p> <p>Parameters</p> <ul> <li><code>xTicksToDelay</code>: Delay time, in FreeRTOS clock ticks. The frequency of the clock tick is defined by the <code>configTICK_RATE_HZ</code> macro in <code>FreeRTOSConfig.h</code>.</li> </ul> <p>Example</p> <pre><code>void myTask(void *pvParameters)\n{\nwhile(1)\n{\nprintf(\"Hello from myTask\\n\");\nvTaskDelay(pdMS_TO_TICKS(1000)); // Delay 1 second\n}\n}\n</code></pre> <p>Summary <code>vTaskDelay</code></p> <ul> <li>Function: <code>vTaskDelay</code> delays a task for a specified time, starting from the current time. This means that each time <code>vTaskDelay</code> is called, the starting point of the delay is the current time.</li> <li>Applicable scenarios: Suitable for tasks that need to be delayed for a fixed time based on the last call time (regardless of when it was called).</li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#vtaskdelayuntil","title":"vTaskDelayUntil","text":"<p>Function prototype</p> <pre><code>void vTaskDelayUntil(TickType_t *pxPreviousWakeTime, const TickType_t xTimeIncrement);\n</code></pre> <p>Function introduction</p> <p><code>vTaskDelayUntil</code> is a function for periodic task execution. After calling the <code>vTaskDelayUntil</code> function in a task, the task will be executed periodically at the specified time interval.</p> <p>Parameters</p> <ul> <li><code>pxPreviousWakeTime</code>: Pointer to the last wake-up time. When called for the first time, a pointer to 0 should be passed in.</li> <li><code>xTimeIncrement</code>: time interval in FreeRTOS ticks. The tick frequency is defined in <code>FreeRTOSConfig.h</code> by the <code>configTICK_RATE_HZ</code> macro.</li> </ul> <p>Example</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"esp_log.h\"\n\nvoid taskA(void *param)\n{\n    TickType_t xLastWakeTime;\n    const TickType_t xFrequency = pdMS_TO_TICKS(500); // 500 ms\n    // Initialize last wakeup time\n    xLastWakeTime = xTaskGetTickCount();\n\n    while(1)\n    {\n        ESP_LOGI(\"main\",\"Hello world from CSW!\");\n\n        // Wait for next cycle\n        vTaskDelayUntil(&amp;xLastWakeTime, xFrequency);\n    }\n}\n\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    xTaskCreatePinnedToCore(taskA, \"helloworld\", 2048, NULL, 3, NULL, tskNO_AFFINITY);\n}\n</code></pre> <p>Summary <code>vTaskDelay</code></p> <ul> <li>Function: <code>vTaskDelayUntil</code> uses an \"absolute time\" concept for delay, which allows tasks to precisely control the execution period. The delay starts from a fixed reference point, which ensures that the task is executed at a fixed interval, even if there are other computational overheads in the task.</li> <li>Applicable scenarios: Suitable for periodic tasks, ensuring that the task is executed accurately at fixed intervals to avoid delay accumulation caused by other tasks or code.</li> </ul> <p>Tip</p> <p>In FreeRTOS, the frequency of the clock tick is defined by the <code>configTICK_RATE_HZ</code> macro. And the input time in the delay function is actually the system tick, not the physical world time, so for ease of use, FreeRTOS provides the <code>pdMS_TO_TICKS</code> macro to convert milliseconds to ticks.</p>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#inter-task-synchronization","title":"Inter-task synchronization","text":"<p>Note</p> <p>Synchronization in RTOS refers to the collaborative working method between different tasks or between tasks and external events to ensure that multiple concurrently executed tasks are executed in the expected order or timing. \"It involves the communication and coordination mechanism between threads or tasks, the purpose is to avoid data competition, solve race conditions, and ensure the correct behavior of the system.</p> <p>Note</p> <p>Mutual exclusion means that a resource is only allowed to be accessed by one visitor at a time, which is unique and exclusive.</p> <p>Note</p> <p>A queue is a data structure used to transfer data between tasks. A queue is a first-in-first-out (FIFO) data structure. Tasks can put data into the queue and take data out of the queue.</p>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#queue","title":"Queue","text":""},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xqueuecreate","title":"xQueueCreate","text":"<p>Function prototype</p> <pre><code>QueueHandle_t xQueueCreate(const UBaseType_t uxQueueLength, // Queue length\nconst UBaseType_t uxItemSize); // Size of each element in the queue\n</code></pre> <p>Function introduction</p> <p><code>xQueueCreate</code> is a function used to create a queue. A queue is a first-in-first-out (FIFO) data structure used to pass data between tasks.</p> <p>Parameters</p> <ul> <li> <p><code>uxQueueLength</code>: The length of the queue, that is, the number of elements that can be stored in the queue.</p> </li> <li> <p><code>uxItemSize</code>: The size of each element in the queue, in bytes.</p> </li> </ul> <p>Return value</p> <ul> <li> <p>Queue handle: The queue was created successfully.</p> </li> <li> <p><code>NULL</code>: The queue was not created successfully.</p> </li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xqueuesend","title":"xQueueSend","text":"<p>Function prototype</p> <pre><code>BaseType_t xQueueSend(QueueHandle_t xQueue, // Queue handle\nconst void *pvItemToQueue, // Data pointer to be sent to the queue, copied to the queue\nTickType_t xTicksToWait); // Waiting time\n</code></pre> <p>Function introduction</p> <p><code>xQueueSend</code> is a function used to send data to a queue. After calling the <code>xQueueSend</code> function, the data will be sent to the queue.</p> <p>Parameters</p> <ul> <li><code>xQueue</code>: Queue handle.</li> <li><code>pvItemToQueue</code>: Data pointer to be sent to the queue.</li> <li><code>xTicksToWait</code>: Waiting time, that is, the waiting time when the queue is full. If the queue is full, the task will wait for space to be available in the queue within the waiting time. If the waiting time is 0, the task will return immediately.</li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xqueuesendtoback","title":"xQueueSendToBack","text":"<p>Function prototype</p> <pre><code>BaseType_t xQueueSendToBack(QueueHandle_t xQueue, // Queue handle\nconst void *pvItemToQueue, // Data pointer to be sent to the queue, copied to the queue\nTickType_t xTicksToWait); // Waiting time\n</code></pre> <p>Function introduction</p> <p><code>xQueueSendToBack</code> is a function used to send data to a queue. After calling the <code>xQueueSendToBack</code> function, the data will be sent to the queue at the end of the queue. Suitable for situations where it is clear that the data needs to be sent to the end of the queue.</p> <p>Parameters</p> <ul> <li><code>xQueue</code>: Queue handle.</li> <li><code>pvItemToQueue</code>: Data pointer to be sent to the queue.</li> <li><code>xTicksToWait</code>: Waiting time, that is, the waiting time when the queue is full. If the queue is full, the task will wait for space to be available in the queue during the waiting time. If the wait time is 0, the task will return immediately.</li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xqueuereceive","title":"xQueueReceive","text":"<p>Function prototype</p> <pre><code>BaseType_t xQueueReceive(QueueHandle_t xQueue, // Queue handle\nvoid *pvBuffer, // Buffer pointer for receiving data\nTickType_t xTicksToWait); // Waiting time\n</code></pre> <p>Function introduction</p> <p><code>xQueueReceive</code> is a function for receiving data from a queue. After calling the <code>xQueueReceive</code> function, data will be received from the queue.</p> <p>Parameters</p> <ul> <li><code>xQueue</code>: Queue handle.</li> <li><code>pvBuffer</code>: Buffer pointer for receiving data.</li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xqueuesendfromisr","title":"xQueueSendFromISR","text":"<p>Function prototype</p> <pre><code>BaseType_t xQueueSendFromISR(QueueHandle_t xQueue, // Queue handle\nconst void *pvItemToQueue, // Data pointer to be sent to the queue\nBaseType_t *pxHigherPriorityTaskWoken); // High priority task wake-up flag\n</code></pre> <p>Function introduction</p> <p><code>xQueueSendFromISR</code> is a function used to send data to a queue from an interrupt service routine (ISR). After calling the <code>xQueueSendFromISR</code> function, the data will be sent to the queue.</p> <p>Parameters</p> <ul> <li><code>xQueue</code>: Queue handle.</li> <li><code>pvItemToQueue</code>: Data pointer to be sent to the queue.</li> <li><code>pxHigherPriorityTaskWoken</code>: High priority task wake-up flag. If a high priority task is woken up when sending data, this parameter is set to <code>pdTRUE</code>.</li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#semaphore","title":"Semaphore","text":""},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xsemaphorecreatebinary","title":"xSemaphoreCreateBinary","text":"<p>Function prototype</p> <pre><code>SemaphoreHandle_t xSemaphoreCreateBinary(void);\n</code></pre> <p>Function introduction</p> <p><code>xSemaphoreCreateBinary</code> is a function used to create a binary semaphore. A binary semaphore is a semaphore with only two states, available and unavailable.</p> <p>Return value</p> <ul> <li> <p>Semaphore handle: semaphore creation is successful.</p> </li> <li> <p><code>NULL</code>: semaphore creation failed.</p> </li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xsemaphorecreatecounting","title":"xSemaphoreCreateCounting","text":"<p>Function prototype</p> <pre><code>SemaphoreHandle_t xSemaphoreCreateCounting(const UBaseType_t uxMaxCount, // Maximum count value\nconst UBaseType_t uxInitialCount); // Initial count value\n</code></pre> <p>Function introduction</p> <p><code>xSemaphoreCreateCounting</code> is a function used to create a counting semaphore. A counting semaphore is a semaphore that can store multiple count values.</p> <p>Parameters</p> <ul> <li> <p><code>uxMaxCount</code>: maximum count value.</p> </li> <li> <p><code>uxInitialCount</code>: initial count value.</p> </li> </ul> <p>Return value</p> <ul> <li> <p>Semaphore handle: semaphore creation is successful.</p> </li> <li> <p><code>NULL</code>: semaphore creation fails.</p> </li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xsemaphorecreatemutex","title":"xSemaphoreCreateMutex","text":"<p>Function prototype</p> <pre><code>SemaphoreHandle_t xSemaphoreCreateMutex(void);\n</code></pre> <p>Function introduction</p> <p><code>xSemaphoreCreateMutex</code> is a function used to create a mutex semaphore. A mutex semaphore is a semaphore used to implement mutually exclusive access and is used to protect shared resources.</p> <p>Return value</p> <ul> <li> <p>Semaphore handle: semaphore creation is successful.</p> </li> <li> <p><code>NULL</code>: semaphore creation fails.</p> </li> </ul> <p>Mutex</p> <p>A mutex is a synchronization mechanism used to implement mutually exclusive access. In FreeRTOS, mutexes are implemented by mutex semaphores. Mutexes ensure that only one task can access a shared resource at any time. Unlike binary semaphores, mutexes implement priority inheritance and priority inversion mechanisms to ensure that tasks can access shared resources in order of priority.</p> <p>Priority Flip</p> <p>Priority flip refers to the temporary occupation of resources by low-priority tasks, which causes high-priority tasks to be blocked or even further delayed by medium-priority tasks. Ultimately, the execution of high-priority tasks is indirectly delayed by low-priority tasks, a phenomenon known as priority flip.</p> <p>A typical priority flip scenario is as follows: Suppose there are three tasks, with priorities from high to low: Task A, Task B, and Task C, and they share a resource (such as a mutex). Step 1: Low-priority Task C acquires the resource (lock) and is using it. Step 2: Before Task C releases the resource, high-priority Task A starts running and tries to access the same resource. But because the resource is already occupied by Task C, Task A is blocked, waiting for Task C to release the resource. Step 3: At this time, Task B, which has a priority between the two, starts running, and because its priority is higher than Task C, Task B will preempt the execution of Task C. Result: Due to the execution of Task B, the progress of Task C is delayed, causing Task A to be delayed as well. Even though Task A has the highest priority, it cannot be executed immediately because the medium-priority Task B indirectly blocks its execution. This situation is called priority flipping, because the execution of the low-priority task Task C blocks the execution of the high-priority task Task A, and the intervention of Task B makes the flipping effect more serious.</p> <p>Priority flipping can cause high-priority tasks of real-time systems to fail to complete on time, resulting in system performance degradation or instability. In real-time applications (such as control systems or communication systems), priority flipping can have serious consequences.</p> <p>FreeRTOS and many other RTOS use priority inheritance to solve the priority flipping problem. The principle of priority inheritance mechanism is as follows: When a low-priority task holds a resource and blocks a high-priority task, the low-priority task inherits the priority of the high-priority task until the resource is released. In the above example, after Task C blocks the high-priority Task A, it is temporarily promoted to the priority of Task A. In this way, Task C can continue to run before Task B and release resources as soon as possible, so that Task A can obtain resources and execute in time. Once Task C releases resources, its priority will be restored to the original level.</p>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xsemaphoretake","title":"xSemaphoreTake","text":"<p>Function prototype</p> <pre><code>BaseType_t xSemaphoreTake(SemaphoreHandle_t xSemaphore, // semaphore handle\nTickType_t xTicksToWait); // waiting time\n</code></pre> <p>Function introduction</p> <p><code>xSemaphoreTake</code> is a function used to obtain a semaphore. After calling the <code>xSemaphoreTake</code> function, the task will try to acquire the semaphore.</p> <p>Parameters</p> <ul> <li> <p><code>xSemaphore</code>: semaphore handle.</p> </li> <li> <p><code>xTicksToWait</code>: waiting time, that is, the waiting time when the semaphore is not available. If the semaphore is not available, the task will wait for the semaphore to be available within the waiting time. If the waiting time is 0, the task will return immediately.</p> </li> </ul> <p>Return value</p> <ul> <li> <p><code>pdPASS</code>: Successfully acquired the semaphore.</p> </li> <li> <p><code>pdFAIL</code>: Failed to acquire the semaphore.</p> </li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xsemaphoregive","title":"xSemaphoreGive","text":"<p>Function prototype</p> <pre><code>BaseType_t xSemaphoreGive(SemaphoreHandle_t xSemaphore); // Semaphore handle\n</code></pre> <p>Function introduction</p> <p><code>xSemaphoreGive</code> is a function used to release a semaphore. After calling the <code>xSemaphoreGive</code> function, the semaphore will be released.</p> <p>Parameters</p> <ul> <li><code>xSemaphore</code>: semaphore handle.</li> </ul> <p>Return value</p> <ul> <li> <p><code>pdPASS</code>: Release semaphore successfully.</p> </li> <li> <p><code>pdFAIL</code>: Release semaphore failed.</p> </li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xsemaphoredelete","title":"xSemaphoreDelete","text":"<p>Function prototype</p> <pre><code>void vSemaphoreDelete(SemaphoreHandle_t xSemaphore); // semaphore handle\n</code></pre> <p>Function introduction</p> <p><code>vSemaphoreDelete</code> is a function used to delete a semaphore. After calling the <code>vSemaphoreDelete</code> function, the semaphore will be deleted.</p> <p>Parameters</p> <ul> <li><code>xSemaphore</code>: semaphore handle.</li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#event-groups-and-direct-task-notifications","title":"Event Groups and Direct Task Notifications","text":"<p>Event Groups</p> <p>Event groups are a mechanism for managing event notifications between tasks. Event groups allow tasks to wait for a combination of multiple events so that they can be woken up when any event occurs. Event groups are often used for synchronization and communication between tasks so that tasks can decide what to do next based on the state of the event.</p> <p>Tip</p> <p>Event groups can replace semaphores in many cases.</p> <p>Event Bits</p> <p>Events in an event group are represented in bits, with each event bit corresponding to one event. The value of an event bit can be 0 or 1, indicating that the event has not occurred or has occurred. The size of an event group depends on the number of event bits, which is usually 8, 16, or 32 bits.</p> <p>Direct Task Notifications</p> <p>Direct task notifications are a mechanism for sending notifications to tasks. Unlike event groups, direct task notifications are one-to-one notification mechanisms, i.e., one notification can only wake up one task. Direct task notifications are often used for synchronization and communication between tasks so that tasks can decide what to do next based on the state of the notification.</p>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xeventgroupcreate","title":"xEventGroupCreate","text":"<p>Function prototype</p> <pre><code>EventGroupHandle_t xEventGroupCreate(void);\n</code></pre> <p>Function introduction</p> <p><code>xEventGroupCreate</code> is a function used to create an event group. An event group is a mechanism for managing event notifications between tasks.</p> <p>Return value</p> <ul> <li>Event group handle: Event group creation is successful.</li> <li><code>NULL</code>: Event group creation fails.</li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xeventgroupwaitbits","title":"xEventGroupWaitBits","text":"<p>Function prototype</p> <pre><code>EventBits_t xEventGroupWaitBits(EventGroupHandle_t xEventGroup, // Event group handle\nconst EventBits_t uxBitsToWaitFor, // Event bits to wait for\nconst BaseType_t xClearOnExit, // Whether to clear event bits when exiting\nconst BaseType_t xWaitForAllBits, // Whether to wait for all event bits\nTickType_t xTicksToWait); // Waiting time\n</code></pre> <p>Function introduction</p> <p><code>xEventGroupWaitBits</code> is a function used to wait for event bits in an event group. After calling the <code>xEventGroupWaitBits</code> function, the task will wait for the event bits in the event group.</p> <p>Parameters</p> <ul> <li><code>xEventGroup</code>: Event group handle.</li> <li><code>uxBitsToWaitFor</code>: Event bits to wait for.</li> <li><code>xClearOnExit</code>: whether to clear the event bit on exit. If set to <code>pdTRUE</code>, the event bit is cleared on exit; if set to <code>pdFALSE</code>, the event bit is not cleared.</li> <li><code>xWaitForAllBits</code>: whether to wait for all event bits. If set to <code>pdTRUE</code>, wait for all event bits; if set to <code>pdFALSE</code>, wait for only any event bit.</li> <li><code>xTicksToWait</code>: Wait time, that is, the time to wait when the event bit does not occur. If the event bit does not occur, the task will wait for the event bit to occur within the wait time. If the wait time is 0, the task will return immediately.</li> </ul> <p>Return value</p> <ul> <li>The state of the event group after waiting.</li> <li><code>NULL</code>: The event group wait failed.</li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xeventgroupsetbits","title":"xEventGroupSetBits","text":"<p>Function prototype</p> <pre><code>EventBits_t xEventGroupSetBits(EventGroupHandle_t xEventGroup, // Event group handle\nconst EventBits_t uxBitsToSet); // Event bits to set\n</code></pre> <p>Function introduction</p> <p><code>xEventGroupSetBits</code> is a function used to set event bits in an event group. After calling the <code>xEventGroupSetBits</code> function, the event bits in the event group will be set.</p> <p>Parameters</p> <ul> <li><code>xEventGroup</code>: event group handle.</li> <li><code>uxBitsToSet</code>: event bits to be set.</li> </ul> <p>Return value</p> <ul> <li>The state of the event group after setting.</li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xeventgroupclearbits","title":"xEventGroupClearBits","text":"<p>Function prototype</p> <pre><code>EventBits_t xEventGroupClearBits(EventGroupHandle_t xEventGroup, // event group handle\nconst EventBits_t uxBitsToClear); // event bits to be cleared\n</code></pre> <p>Function introduction</p> <p><code>xEventGroupClearBits</code> is a function used to clear event bits in an event group. After calling the <code>xEventGroupClearBits</code> function, the event bits in the event group will be cleared.</p> <p>Parameters</p> <ul> <li><code>xEventGroup</code>: event group handle.</li> <li><code>uxBitsToClear</code>: event bits to be cleared.</li> </ul> <p>Return value</p> <ul> <li>The state of the event group after clearing.</li> <li><code>NULL</code>: event group clearing failed.</li> </ul> <p>Direct Task Notifications</p> <p>Each RTOS task has an array of task notifications. Each task notification has a notification state of \"pending\" or \"not pending\", and a 32-bit notification value. Direct task notifications are events sent directly to the task, rather than indirectly to the task through an intermediate object (such as a queue, event group, or semaphore). Sending a \"direct task notification\" to a task sets the target task notification to the \"suspended\" state (this suspension is not a suspended task).</p>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xtasknotify","title":"xTaskNotify","text":"<p>Function prototype</p> <pre><code>BaseType_t xTaskNotify(TaskHandle_t xTaskToNotify, // Task handle to be notified\nconst uint32_t ulValue, // Notification value\neNotifyAction eAction); // Notification action\n</code></pre> <p>Function introduction</p> <p><code>xTaskNotify</code> is a function used to send notifications to a task. After calling the <code>xTaskNotify</code> function, the notification will be sent to the task.</p> <p>Parameters</p> <ul> <li><code>xTaskToNotify</code>: Task handle to be notified.</li> <li><code>ulValue</code>: Notification value.</li> <li><code>eAction</code>: Notification action. Notification action can be one of the following values:</li> <li><code>eNoAction</code>: Do nothing.</li> <li><code>eSetBits</code>: Set the task notification value.</li> <li><code>eIncrement</code>: Increment the task notification value.</li> <li><code>eSetValueWithOverwrite</code>: Set the task notification value. If the task already has a notification value, overwrite it.</li> <li><code>eSetValueWithoutOverwrite</code>: Set the task notification value. If the task already has a notification value, do not overwrite it.</li> </ul> <p>Return value</p> <ul> <li><code>pdPASS</code>: Notification sent successfully.</li> <li><code>pdFAIL</code>: Notification sent failed.</li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xtasknotifywait","title":"xTaskNotifyWait","text":"<p>Function prototype</p> <pre><code>BaseType_t xTaskNotifyWait(uint32_t ulBitsToClearOnEntry, // Bits to be cleared on entry\nuint32_t ulBitsToClearOnExit, // Bits to be cleared on exit\nuint32_t *pulNotificationValue, // Notification value\nTickType_t xTicksToWait); // Waiting time\n</code></pre> <p>Function introduction</p> <p><code>xTaskNotifyWait</code> is a function used to wait for task notification. After calling the <code>xTaskNotifyWait</code> function, the task will wait for the notification to arrive.</p> <p>Parameters</p> <ul> <li><code>ulBitsToClearOnEntry</code>: The bit to be cleared on entry.</li> <li><code>ulBitsToClearOnExit</code>: The bit to be cleared on exit.</li> <li><code>pulNotificationValue</code>: Notification value.</li> <li><code>xTicksToWait</code>: Waiting time, that is, the waiting time when the notification has not arrived. If the notification has not arrived, the task will wait for the notification to arrive within the waiting time. If the waiting time is 0, the task will return immediately.</li> </ul> <p>Return value</p> <ul> <li><code>pdPASS</code>: Waiting for notification is successful.</li> <li><code>pdFAIL</code>: Waiting for notification failed.</li> </ul>"},{"location":"CHEATING_SHEET/LOGS/logs/","title":"LOG","text":"<p>ESP_LOG()</p> <p>Usage:</p> <pre><code>static const char* TAG = \"main\"; // define a tag\nESP_LOGI(TAG,\"Hello world!\"); // print information\n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/","title":"COMMON MODULES","text":""},{"location":"CHEATING_SHEET/MODULES/modules/#standard-library-modules","title":"STANDARD LIBRARY MODULES","text":""},{"location":"CHEATING_SHEET/MODULES/modules/#stdio","title":"stdio","text":"<p>Introduction</p> <p>The standard input and output library is a standard library of the C language, which provides a series of input and output functions, such as printf, scanf, etc. The header file of the standard input and output library is stdio.h. After introducing this header file, you can use the functions of the standard input and output library.</p> <p>Usage:</p> <pre><code>#include &lt;stdio.h&gt;\n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/#string","title":"string","text":"<p>Introduction</p> <p>The string library is a standard library of the C language, which provides a series of string processing functions, such as strcpy, strcat, etc. The header file of the string library is string.h. After introducing this header file, you can use the functions of the string library. </p> <p>Usage:</p> <pre><code>#include &lt;string.h&gt;\n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/#log-modules","title":"LOG MODULES","text":""},{"location":"CHEATING_SHEET/MODULES/modules/#esp_log","title":"esp_log","text":"<p>Introduction</p> <p>ESP_LOG is the log module of ESP-IDF, which provides some log output functions, such as ESP_LOGI, ESP_LOGE, etc. esp_log.h represents the header file of the log module. After introducing this header file, you can use the functions of the log module.</p> <p>Usage:</p> <pre><code>#include \"esp_log.h\"\n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/#timer-modules","title":"TIMER MODULES","text":""},{"location":"CHEATING_SHEET/MODULES/modules/#esp_timer","title":"esp_timer","text":"<p>Introduction</p> <p>ESP_TIMER is the timer module of ESP-IDF, which provides some timer functions, such as esp_timer_create, esp_timer_start_once, etc. esp_timer.h represents the header file of the timer module. After introducing this header file, you can use the functions of the timer module.</p> <p>Usage:</p> <pre><code>#include \"esp_timer.h\"\n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/#random-modules","title":"RANDOM MODULES","text":""},{"location":"CHEATING_SHEET/MODULES/modules/#esp_random","title":"esp_random","text":"<p>Introduction</p> <p>ESP_RANDOM is the random number module of ESP-IDF, which provides some random number functions, such as esp_random, esp_random_uniform, etc. esp_random.h represents the header file of the random number module. After introducing this header file, you can use the functions of the random number module.</p> <p>Usage:</p> <pre><code>#include \"esp_random.h\"\n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/#rtos-freertos-modules","title":"RTOS-FREERTOS MODULES","text":""},{"location":"CHEATING_SHEET/MODULES/modules/#freertosfreertos","title":"freertos/FreeRTOS","text":"<p>Introduction</p> <p>FreeRTOS is a small real-time operating system kernel for embedded systems. FreeRTOS is an open-source project that provides some basic real-time operating system functions, such as task management, time management, memory management, etc. FreeRTOS.h represents the header file of its core library. After introducing this header file, you can use the functions of FreeRTOS.</p> <p>Usage:</p> <pre><code>#include \"freertos/FreeRTOS.h\"  \n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/#freertosfreertos_1","title":"freertos/FreeRTOS","text":"<p>Introduction</p> <p>The FreeRTOS task management library is a module of FreeRTOS, which provides some task management functions, such as task creation, task deletion, task suspension, task resumption, etc. task.h represents the header file of the task management library. After introducing this header file, you can use the functions of the task management library.</p> <p>Usage:</p> <pre><code>#include \"freertos/task.h\"   \n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/#freertosqueue","title":"freertos/queue","text":"<p>Introduction</p> <p>The FreeRTOS queue management library is a module of FreeRTOS, which provides some queue management functions, such as queue creation, queue deletion, queue sending, queue receiving, etc. queue.h represents the header file of the queue management library. After introducing this header file, you can use the functions of the queue management library.</p> <p>Usage:</p> <pre><code>#include \"freertos/queue.h\"   \n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/#freertosevent_groups","title":"freertos/event_groups","text":"<p>Introduction</p> <p>The FreeRTOS event group management library is a module of FreeRTOS, which provides some event group management functions, such as event group creation, event group deletion, event group setting, event group clearing, etc. event_groups.h represents the header file of the event group management library. After introducing this header file, you can use the functions of the event group management library.</p> <p>Usage:</p> <pre><code>#include \"freertos/event_groups.h\"   \n</code></pre>"},{"location":"COMMUNICATION/communication/","title":"COMMUNICATION","text":""},{"location":"COMMUNICATION/communication/#overview","title":"OVERVIEW","text":"RANGE TYPE DESCRIPTION STATUS LOCAL BLUETOOTH Bluetooth communication \ud83d\udcc6 INTERNET WIFI Wi-Fi communication \ud83c\udfd7\ufe0f"},{"location":"COMMUNICATION/MQTT/mqtt/","title":"MQTT PROTOCOL","text":""},{"location":"COMMUNICATION/MQTT/mqtt/#1-introduction","title":"1. Introduction","text":"<p>Like HTTP, MQTT runs on top of the Transmission Control Protocol/Internet Protocol (TCP/IP) stack.</p>"},{"location":"COMMUNICATION/MQTT/mqtt/#11-introduction-to-mqtt","title":"1.1 Introduction to MQTT","text":"<p>MQTT Official Website Getting Started with MQTT Protocol</p> <p>MQTT (Message Queuing Telemetry Transport) is a lightweight communication protocol based on the publish-subscribe model, primarily used for communication between devices in the Internet of Things (IoT).</p> <p></p> <p>The MQTT protocol uses a simple binary encoding format, making it suitable for environments with limited bandwidth, high latency, or unstable networks. Additionally, MQTT provides a Quality of Service (QoS) mechanism with three different QoS levels:</p> <ul> <li>QoS 0: At most once delivery; no reliability guarantee.</li> <li>QoS 1: At least once delivery; ensures the message reaches the receiver, but duplicates may occur.</li> <li>QoS 2: Exactly once delivery; ensures the message reaches the receiver only once.</li> </ul> <p>Key features of MQTT include excellent scalability, low overhead, ease of implementation, open-source nature, and support for multiple programming languages. In MQTT, there are two main participants: the publisher and the subscriber. The publisher sends messages to one or more topics, and subscribers can subscribe to topics of interest to receive those messages. Topics serve as a classification standard for specific types of messages.</p> <p>MQTT is used in various scenarios including, but not limited to, smart homes, smart lighting, smart security, agricultural IoT, and industrial IoT.</p>"},{"location":"COMMUNICATION/MQTT/mqtt/#advantages","title":"Advantages","text":"<ol> <li>Lightweight and Efficient: MQTT clients are very small and require minimal resources, making them suitable for use on small microcontrollers. The MQTT message header is also very small, which helps optimize network bandwidth.</li> <li>Bidirectional Communication: MQTT allows messages to be transmitted from device to cloud and vice versa, making it easy to broadcast messages to groups of devices.</li> <li>Scalable to Millions of Devices: MQTT can scale to connect millions of IoT devices.</li> <li>Reliable Message Delivery: Reliable message delivery is critical for many IoT use cases. That is why MQTT defines three Quality of Service (QoS) levels: 0 - at most once, 1 - at least once, and 2 - exactly once.</li> <li>Supports Unreliable Networks: Many IoT devices connect over unreliable cellular networks. MQTT's support for persistent sessions reduces the time required to reconnect a client to the broker.</li> <li>Built-in Security: MQTT makes it easy to encrypt messages using TLS and to authenticate clients using modern authentication protocols, such as OAuth.</li> </ol>"},{"location":"COMMUNICATION/MQTT/mqtt/#12-mqtt-packet-structure","title":"1.2 MQTT Packet Structure","text":"<ul> <li>Fixed Header: Present in all MQTT packets, indicating the packet type and associated flags.</li> <li>Variable Header: Present in some MQTT packets; the packet type determines whether a variable header exists and what its specific contents are.</li> <li>Payload: Present in some MQTT packets, representing the actual content delivered to the client.</li> </ul>"},{"location":"COMMUNICATION/MQTT/mqtt/#13-other-mqtt-concepts","title":"1.3 Other MQTT Concepts","text":"<p>1. Subscription</p> <p>A subscription consists of a Topic Filter and a maximum Quality of Service (QoS). Subscriptions are associated with a session, and a session can contain multiple subscriptions. Each subscription within a session has a distinct Topic Filter.</p> <p>2. Session</p> <p>Once a client connects to the server, a session is established, allowing stateful interactions between the client and the server. A session exists within one network and may span multiple consecutive network connections between the client and the server.</p> <p>3. Topic Name</p> <p>A label attached to an application message that matches the subscriptions on the server. The server will send the message to each client whose subscription matches the topic label.</p> <p>4. Topic Filter</p> <p>A wildcard filter for topic names, used in subscription expressions, representing multiple topics that match the subscription criteria.</p> <p>5. Payload</p> <p>The actual content received by the message subscriber.</p> <p>For more details, refer to the MQTT protocol documentation: MQTT Version 5.0</p>"},{"location":"COMMUNICATION/MQTT/mqtt/#14-mqtt-support-on-esp32","title":"1.4 MQTT Support on ESP32","text":"<p>https://docs.espressif.com/projects/esp-idf/zh_CN/v5.1.3/esp32/api-reference/protocols/mqtt.html</p> <ul> <li>Supports MQTT over TCP, MQTT over SSL based on Mbed TLS, MQTT over WebSocket, and MQTT over Secure WebSocket.</li> <li>Simplifies configuration through the use of URIs.</li> <li>Supports multiple instances (i.e., multiple clients within a single application).</li> <li>Provides support for subscription, publishing, authentication, last will messages, keep-alive heartbeats, and three Quality of Service (QoS) levels, making it a fully-featured client.</li> </ul>"},{"location":"COMMUNICATION/MQTT/mqtt/#2-usage","title":"2. Usage","text":"<p>Example code reference: https://github.com/espressif/esp-idf/tree/master/examples/protocols/mqtt/tcp</p>"},{"location":"COMMUNICATION/MQTT/mqtt/#21-creating-a-simple-mqtt-client","title":"2.1 Creating a Simple MQTT Client","text":"<pre><code>// MQTT Client Application Start Function\nstatic void mqtt_app_start(void)\n{\n    esp_mqtt_client_config_t mqtt_cfg = {\n        .broker.address.uri = CONFIG_BROKER_URL,\n    };\n\n    esp_mqtt_client_handle_t client = esp_mqtt_client_init(&amp;mqtt_cfg);\n    /* The last argument can be used to pass data to the event handler, in this example mqtt_event_handler */\n    // Register the event handler\n    esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, mqtt_event_handler, NULL);\n    // Start the MQTT client\n    esp_mqtt_client_start(client);\n}\n</code></pre> <p>The code above is very straightforward, so we will not elaborate on it further.</p>"},{"location":"COMMUNICATION/MQTT/mqtt/#22-event-handling","title":"2.2 Event Handling","text":"<p>Event handling is the key part of the MQTT client implementation. Below is the code:</p> <p><pre><code>// MQTT Client Event Handler\n/*\n * @brief Event handler registered to receive MQTT events.\n *\n * This function is called by the MQTT client event loop.\n *\n * @param handler_args User data registered to the event.\n * @param base Event base for the handler (always MQTT Base in this example).\n * @param event_id The ID for the received event.\n * @param event_data The data for the event, of type esp_mqtt_event_handle_t.\n */\nstatic void mqtt_event_handler(void *handler_args, esp_event_base_t base, int32_t event_id, void *event_data)\n{\n    ESP_LOGD(TAG, \"Event dispatched from event loop base=%s, event_id=%\" PRIi32 \"\", base, event_id);\n    esp_mqtt_event_handle_t event = event_data;\n    esp_mqtt_client_handle_t client = event-&gt;client;\n    int msg_id;\n    switch ((esp_mqtt_event_id_t)event_id)\n    {\n        // MQTT connected successfully\n        case MQTT_EVENT_CONNECTED:\n            ESP_LOGI(TAG, \"MQTT_EVENT_CONNECTED\");\n            // Publish a message\n            msg_id = esp_mqtt_client_publish(client, \"/topic/qos1\", \"data_3\", 0, 1, 0);\n            ESP_LOGI(TAG, \"Sent publish successfully, msg_id=%d\", msg_id);\n            // Subscribe to topics\n            msg_id = esp_mqtt_client_subscribe(client, \"/topic/qos0\", 0);\n            ESP_LOGI(TAG, \"Sent subscribe successfully, msg_id=%d\", msg_id);\n            msg_id = esp_mqtt_client_subscribe(client, \"/topic/qos1\", 1);\n            ESP_LOGI(TAG, \"Sent subscribe successfully, msg_id=%d\", msg_id);\n            // Unsubscribe from a topic\n            msg_id = esp_mqtt_client_unsubscribe(client, \"/topic/qos1\");\n            ESP_LOGI(TAG, \"Sent unsubscribe successfully, msg_id=%d\", msg_id);\n            break;\n        // MQTT disconnected\n        case MQTT_EVENT_DISCONNECTED:\n            ESP_LOGI(TAG, \"MQTT_EVENT_DISCONNECTED\");\n            break;\n        // MQTT subscription successful\n        case MQTT_EVENT_SUBSCRIBED:\n            ESP_LOGI(TAG, \"MQTT_EVENT_SUBSCRIBED, msg_id=%d\", event-&gt;msg_id);\n            // Publish a message\n            msg_id = esp_mqtt_client_publish(client, \"/topic/qos0\", \"data\", 0, 0, 0);\n            ESP_LOGI(TAG, \"Sent publish successfully, msg_id=%d\", msg_id);\n            break;\n        // MQTT unsubscription successful\n        case MQTT_EVENT_UNSUBSCRIBED:\n            ESP_LOGI(TAG, \"MQTT_EVENT_UNSUBSCRIBED, msg_id=%d\", event-&gt;msg_id);\n            break;\n        // MQTT published successfully\n        case MQTT_EVENT_PUBLISHED:\n            ESP_LOGI(TAG, \"MQTT_EVENT_PUBLISHED, msg_id=%d\", event-&gt;msg_id);\n            break;\n        // MQTT data received\n        case MQTT_EVENT_DATA:\n            ESP_LOGI(TAG, \"MQTT_EVENT_DATA\");\n            printf(\"TOPIC=%.*s\\r\\n\", event-&gt;topic_len, event-&gt;topic);\n            printf(\"DATA=%.*s\\r\\n\", event-&gt;data_len, event-&gt;data);\n            break;\n        // MQTT error occurred\n        case MQTT_EVENT_ERROR:\n            ESP_LOGI(TAG, \"MQTT_EVENT_ERROR\");\n            if (event-&gt;error_handle-&gt;error_type == MQTT_ERROR_TYPE_TCP_TRANSPORT)\n            {\n                log_error_if_nonzero(\"reported from esp-tls\", event-&gt;error_handle-&gt;esp_tls_last_esp_err);\n                log_error_if_nonzero(\"reported from tls stack\", event-&gt;error_handle-&gt;esp_tls_stack_err);\n                log_error_if_nonzero(\"captured as transport's socket errno\", event-&gt;error_handle-&gt;esp_transport_sock_errno);\n                ESP_LOGI(TAG, \"Last errno string (%s)\", strerror(event-&gt;error_handle-&gt;esp_transport_sock_errno));\n            }\n            break;\n        default:\n            ESP_LOGI(TAG, \"Other event id:%d\", event-&gt;event_id);\n            break;\n    }\n}\n</code></pre> - <code>MQTT_EVENT_CONNECTED</code>: Handles the event when the MQTT client successfully connects to the broker. In this case, it demonstrates how to publish, subscribe to, and unsubscribe from MQTT topics. - <code>MQTT_EVENT_DISCONNECTED</code>: Handles the event when the MQTT client disconnects from the broker. - <code>MQTT_EVENT_SUBSCRIBED</code>: Handles the event when the MQTT client successfully subscribes to a topic. - <code>MQTT_EVENT_UNSUBSCRIBED</code>: Handles the event when the MQTT client successfully unsubscribes from a topic. - <code>MQTT_EVENT_PUBLISHED</code>: Handles the event when the MQTT client successfully publishes a message. - <code>MQTT_EVENT_DATA</code>: Handles the event when data is received from the broker. In this case, it prints the topic and data. - <code>MQTT_EVENT_ERROR</code>: Handles the event when the MQTT client encounters an error.</p>"},{"location":"COMMUNICATION/MQTT/mqtt/#3-instance","title":"3. Instance","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stddef.h&gt;\n#include &lt;string.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/event_groups.h\"\n#include \"esp_wifi.h\"\n#include \"esp_log.h\"\n#include \"esp_event.h\"\n#include \"nvs_flash.h\"\n#include \"esp_mac.h\"\n#include \"esp_netif.h\"\n#include &lt;sys/socket.h&gt;\n#include \"esp_eth.h\"\n#include \"lwip/sockets.h\"\n#include \"lwip/dns.h\"\n#include \"lwip/netdb.h\"\n#include \"mqtt_client.h\"\n\n// WiFi network to connect to\n#define ESP_WIFI_STA_SSID \"duruofu_win10\"\n#define ESP_WIFI_STA_PASSWD \"1234567890\"\n\nstatic const char *TAG = \"main\";\n\n// WiFi event callback\nvoid WIFI_CallBack(void *event_handler_arg, esp_event_base_t event_base, int32_t event_id, void *event_data)\n{\n    static uint8_t connect_count = 0;\n    // WiFi started successfully\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_START\");\n        ESP_ERROR_CHECK(esp_wifi_connect());\n    }\n    // WiFi disconnected (connection failed)\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_DISCONNECTED\");\n        connect_count++;\n        if (connect_count &lt; 6)\n        {\n            vTaskDelay(1000 / portTICK_PERIOD_MS);\n            ESP_ERROR_CHECK(esp_wifi_connect());\n        }\n        else\n        {\n            ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_DISCONNECTED 10 times\");\n        }\n    }\n    // WiFi connected and IP obtained\n    if (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_GOT_IP\");\n        ip_event_got_ip_t *info = (ip_event_got_ip_t *)event_data;\n        ESP_LOGI(\"WIFI_EVENT\", \"got ip:\" IPSTR \"\", IP2STR(&amp;info-&gt;ip_info.ip));\n    }\n}\n\n// WiFi initialization in station mode\nstatic void wifi_sta_init(void)\n{\n    ESP_ERROR_CHECK(esp_netif_init());\n\n    // Register event: WiFi started\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, NULL, NULL));\n    // Register event: WiFi disconnected\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, NULL, NULL));\n    // Register event: IP obtained\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, NULL, NULL));\n\n    // Create default WiFi station interface\n    esp_netif_create_default_wifi_sta();\n\n    /* Initialize WiFi */\n    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n    // WIFI_INIT_CONFIG_DEFAULT is a macro for default configuration\n\n    ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));\n\n    //---------------- Configuration Phase -------------------\n    // Set WiFi mode to station\n    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));\n\n    // Station configuration\n    wifi_config_t sta_config = {\n        .sta = {\n            .ssid = ESP_WIFI_STA_SSID,\n            .password = ESP_WIFI_STA_PASSWD,\n            .bssid_set = false,\n        },\n    };\n    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));\n\n    //---------------- Startup Phase -------------------\n    ESP_ERROR_CHECK(esp_wifi_start());\n\n    //---------------- Configure Power Saving Mode -------------------\n    // No power saving (for faster data transmission)\n    ESP_ERROR_CHECK(esp_wifi_set_ps(WIFI_PS_NONE));\n}\n\nstatic void log_error_if_nonzero(const char *message, int error_code)\n{\n    if (error_code != 0)\n    {\n        ESP_LOGE(TAG, \"Last error %s: 0x%x\", message, error_code);\n    }\n}\n\n// MQTT client event handler\n/*\n * @brief Event handler registered to receive MQTT events.\n *\n * This function is called by the MQTT client event loop.\n *\n * @param handler_args User data registered to the event.\n * @param base Event base for the handler (always MQTT Base in this example).\n * @param event_id The ID for the received event.\n * @param event_data The data for the event, of type esp_mqtt_event_handle_t.\n */\nstatic void mqtt_event_handler(void *handler_args, esp_event_base_t base, int32_t event_id, void *event_data)\n{\n    ESP_LOGD(TAG, \"Event dispatched from event loop base=%s, event_id=%\" PRIi32 \"\", base, event_id);\n    esp_mqtt_event_handle_t event = event_data;\n    esp_mqtt_client_handle_t client = event-&gt;client;\n    int msg_id;\n    switch ((esp_mqtt_event_id_t)event_id)\n    {\n        // MQTT connected successfully\n        case MQTT_EVENT_CONNECTED:\n            ESP_LOGI(TAG, \"MQTT_EVENT_CONNECTED\");\n            // Publish a message\n            msg_id = esp_mqtt_client_publish(client, \"/topic/qos1\", \"data_3\", 0, 1, 0);\n            ESP_LOGI(TAG, \"Sent publish successfully, msg_id=%d\", msg_id);\n            // Subscribe to topics\n            msg_id = esp_mqtt_client_subscribe(client, \"/topic/qos0\", 0);\n            ESP_LOGI(TAG, \"Sent subscribe successfully, msg_id=%d\", msg_id);\n            msg_id = esp_mqtt_client_subscribe(client, \"/topic/qos1\", 1);\n            ESP_LOGI(TAG, \"Sent subscribe successfully, msg_id=%d\", msg_id);\n            // Unsubscribe from a topic\n            msg_id = esp_mqtt_client_unsubscribe(client, \"/topic/qos1\");\n            ESP_LOGI(TAG, \"Sent unsubscribe successfully, msg_id=%d\", msg_id);\n            break;\n        // MQTT disconnected\n        case MQTT_EVENT_DISCONNECTED:\n            ESP_LOGI(TAG, \"MQTT_EVENT_DISCONNECTED\");\n            break;\n        // MQTT subscribed successfully\n        case MQTT_EVENT_SUBSCRIBED:\n            ESP_LOGI(TAG, \"MQTT_EVENT_SUBSCRIBED, msg_id=%d\", event-&gt;msg_id);\n            // Publish a message\n            msg_id = esp_mqtt_client_publish(client, \"/topic/qos0\", \"data\", 0, 0, 0);\n            ESP_LOGI(TAG, \"Sent publish successfully, msg_id=%d\", msg_id);\n            break;\n        // MQTT unsubscribed successfully\n        case MQTT_EVENT_UNSUBSCRIBED:\n            ESP_LOGI(TAG, \"MQTT_EVENT_UNSUBSCRIBED, msg_id=%d\", event-&gt;msg_id);\n            break;\n        // MQTT published successfully\n        case MQTT_EVENT_PUBLISHED:\n            ESP_LOGI(TAG, \"MQTT_EVENT_PUBLISHED, msg_id=%d\", event-&gt;msg_id);\n            break;\n        // MQTT data received\n        case MQTT_EVENT_DATA:\n            ESP_LOGI(TAG, \"MQTT_EVENT_DATA\");\n            printf(\"TOPIC=%.*s\\r\\n\", event-&gt;topic_len, event-&gt;topic);\n            printf(\"DATA=%.*s\\r\\n\", event-&gt;data_len, event-&gt;data);\n            break;\n        // MQTT error occurred\n        case MQTT_EVENT_ERROR:\n            ESP_LOGI(TAG, \"MQTT_EVENT_ERROR\");\n            if (event-&gt;error_handle-&gt;error_type == MQTT_ERROR_TYPE_TCP_TRANSPORT)\n            {\n                log_error_if_nonzero(\"reported from esp-tls\", event-&gt;error_handle-&gt;esp_tls_last_esp_err);\n                log_error_if_nonzero(\"reported from tls stack\", event-&gt;error_handle-&gt;esp_tls_stack_err);\n                log_error_if_nonzero(\"captured as transport's socket errno\", event-&gt;error_handle-&gt;esp_transport_sock_errno);\n                ESP_LOGI(TAG, \"Last errno string (%s)\", strerror(event-&gt;error_handle-&gt;esp_transport_sock_errno));\n            }\n            break;\n        default:\n            ESP_LOGI(TAG, \"Other event id:%d\", event-&gt;event_id);\n            break;\n    }\n}\n\n// MQTT client start function\nstatic void mqtt_app_start(void)\n{\n    esp_mqtt_client_config_t mqtt_cfg = {\n        .broker.address.uri = \"mqtt://www.duruofu.top:1883\",\n    };\n\n    esp_mqtt_client_handle_t client = esp_mqtt_client_init(&amp;mqtt_cfg);\n    /* The last argument can be used to pass data to the event handler, in this example mqtt_event_handler */\n    // Register the event handler\n    esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, mqtt_event_handler, NULL);\n    // Start the MQTT client\n    esp_mqtt_client_start(client);\n}\n\nvoid app_main(void)\n{\n    // Initialize NVS\n    esp_err_t ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n    ESP_ERROR_CHECK(ret);\n\n    // Create the default event loop\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n\n    // Initialize and start WiFi\n    wifi_sta_init();\n\n    // Wait for WiFi connection (temporary solution)\n    vTaskDelay(5000 / portTICK_PERIOD_MS);\n\n    // Start the MQTT client\n    mqtt_app_start();\n}\n</code></pre>"},{"location":"COMMUNICATION/WIFI/wifi/","title":"WIFI BASICS","text":"<p>References</p> <p>This document is based on the DURUOFU's ESP32-GUIDE. For more information, please refer to the original version: DURUOFU ESP32-GUIDE.</p> <p>This chapter will introduce how to use wifi on ESP32, including WIFI AP mode and WIFI STA mode.</p>"},{"location":"COMMUNICATION/WIFI/wifi/#1-introduction","title":"1. Introduction","text":"<p>Before using Wi-Fi, we need to master some basic concepts and prerequisites:</p> <p>The most fundamental point: Wi-Fi pertains to the physical and data link layers. It replaces Ethernet cables and switch ports by transmitting and receiving information through radio waves. In other words, the Wi-Fi discussed here does not yet involve network layer protocols.</p>"},{"location":"COMMUNICATION/WIFI/wifi/#11-esp32-event-mechanism","title":"1.1 ESP32 Event Mechanism","text":"<p>If you have no knowledge of FreeRTOS multithreading, please familiarize yourself with it first. You can refer to: What is a Thread?</p> <p>For a general understanding of the event loop, please refer to the following links:</p> <ol> <li>ESP32 Event Loop</li> <li>Event Loop Explained in Plain Language</li> </ol>"},{"location":"COMMUNICATION/WIFI/wifi/#12-esp32-wifis-sta-and-ap-modes","title":"1.2 ESP32 WIFI's STA and AP Modes","text":""},{"location":"COMMUNICATION/WIFI/wifi/#121-ap","title":"1.2.1 AP","text":"<p>An AP (Access Point) is a wireless access point, the creator of a wireless network and its central node. Typically, a wireless router used in a home or office is an AP.</p> <p></p>"},{"location":"COMMUNICATION/WIFI/wifi/#122-sta","title":"1.2.2 STA","text":"<p>A STA (Station) refers to any terminal that connects to a wireless network, such as a laptop, PDA, or any other network-capable device.</p> <p></p>"},{"location":"COMMUNICATION/WIFI/wifi/#2-usage","title":"2. Usage","text":"<p>Reference: ESP-IDF: Wi-Fi Driver</p> <p>The ESP-IDF WiFi library provides the following features:</p> <ul> <li>Supports station-only mode, AP-only mode, and station/AP coexistence mode</li> <li>Supports IEEE 802.11b, IEEE 802.11g, IEEE 802.11n, and protocol modes configured via API</li> <li>Supports WPA/WPA2/WPA3/WPA2-Enterprise/WPA3-Enterprise/WAPI/WPS and DPP</li> <li>Supports AMSDU, AMPDU, HT40, QoS, and other key features</li> <li>Supports Espressif proprietary protocol, enabling data communication over 1 km</li> <li>Achieves over-the-air data transmission with a maximum TCP throughput of 20 MBit/s and UDP throughput of 30 MBit/s</li> <li>Supports fast scanning and full-channel scanning</li> <li>Supports obtaining channel status information</li> </ul> <p>Campus Wi-Fi</p> <p>Note: Many institutions or schools have campus networks similar to home Wi-Fi. For example, at Nanyang Technological University, the campus network uses WPA2-Enterprise mode, so you need to use WPA2-Enterprise when connecting to the campus network.</p>"},{"location":"COMMUNICATION/WIFI/wifi/#21-wifi-ap-mode","title":"2.1 WIFI AP Mode","text":"<p>The official example program is located at: <code>Espressif\\frameworks\\esp-idf-v4.4.3\\examples\\wifi\\getting_started\\softAP</code></p> <p>The configuration process is as follows:</p> <ul> <li><code>nvs_flash_init</code>: Initialize the default NVS partition.</li> <li><code>esp_netif_init</code>: Initialize the underlying TCP/IP stack (create a LwIP core task and initialize LwIP related operations).</li> <li><code>esp_event_loop_create_default</code>: Create the default event loop.</li> <li><code>esp_netif_create_default_wifi_ap</code>: Create an esp_netif object using the default WiFi AP configuration, connect the netif to WiFi, and register the default WiFi handler.</li> <li><code>esp_wifi_init</code>: Initialize WiFi by allocating resources for the WiFi driver, such as the WiFi control structure, RX/TX buffers, WiFi NVS structure, etc. This also starts the WiFi task. You must call this API before calling any other WiFi APIs.</li> <li><code>esp_event_handler_instance_register</code>: Listen for any WiFi events (WIFI_EVENT); upon triggering, the callback function is executed.</li> <li><code>esp_wifi_set_mode</code>: Set the WiFi operating mode to station, soft-AP, or station + soft-AP. The default mode is soft-AP. This program sets it to AP.</li> <li><code>esp_wifi_set_config</code>: Set the configuration for the ESP32 STA or AP.</li> <li><code>esp_wifi_start</code>: Start WiFi based on the configuration.</li> </ul> <p>The working process is illustrated in the diagram below: (If you don't understand it, you can ignore it, as you'll gradually learn by using it. You can also refer to Michael_ee's tutorial: WIFI Hotspot Working Process)</p> <p></p> <p>The main process is divided into the following parts (diagram from the official tutorial):</p> <p></p>"},{"location":"COMMUNICATION/WIFI/wifi/#211-wi-fi-preparation-phase-not-shown-in-the-diagram","title":"2.1.1 Wi-Fi Preparation Phase (Not shown in the diagram)","text":"<p>In this phase, we need to initialize the NVS since the WiFi library relies on it. For more details about NVS, please refer to this blog: ESP32 Storage - 3. VFS Virtual File System</p> <p>Below is the code snippet:</p> <pre><code>// Initialize NVS\nesp_err_t ret = nvs_flash_init();\nif (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {\n    ESP_ERROR_CHECK(nvs_flash_erase());\n    ret = nvs_flash_init();\n}\nESP_ERROR_CHECK( ret );\n</code></pre>"},{"location":"COMMUNICATION/WIFI/wifi/#212-wi-fi-initialization-phase","title":"2.1.2 Wi-Fi Initialization Phase","text":"<p>This phase mainly consists of the following steps:</p> <ul> <li>The main task calls the function <code>esp_netif_init()</code> to create a LwIP core task and initialize LwIP-related operations.</li> <li>The main task calls the function <code>esp_event_loop_create()</code> to create a system event task and initialize the application's event callback function. In this case, the only action of the callback is to relay the event to the application task.</li> <li>The main task calls the function <code>esp_netif_create_default_wifi_ap()</code> or <code>esp_netif_create_default_wifi_sta()</code> to create a default network interface instance with a TCP/IP stack, binding to either a station or an AP.</li> <li>The main task calls the function <code>esp_wifi_init()</code> to create the Wi-Fi driver task and initialize the Wi-Fi driver.</li> <li>The main task creates the application task by calling the OS API.</li> </ul> <p>Code:</p> <pre><code>ESP_ERROR_CHECK(esp_netif_init());\n\nESP_ERROR_CHECK(esp_event_loop_create_default());\n\n// *esp_netif_ap can be used to modify AP settings\nesp_netif_t *esp_netif_ap = esp_netif_create_default_wifi_ap();\n\n/* Initialize WiFi */ \nwifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n// WIFI_INIT_CONFIG_DEFAULT is a macro for the default configuration\n\nESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));\n</code></pre> <p>This completes the Wi-Fi initialization.</p>"},{"location":"COMMUNICATION/WIFI/wifi/#213-wi-fi-configuration-phase","title":"2.1.3 Wi-Fi Configuration Phase","text":"<p>After the Wi-Fi driver is successfully initialized, we can proceed to the configuration phase.</p> <p>Use the function <code>esp_wifi_set_mode</code> to set the WiFi operation mode to station, soft-AP, or station+soft-AP.</p> <p>Use the function <code>esp_wifi_set_config</code> to set the specific configuration for the ESP32 STA or AP (there are many parameters available; please refer to the official documentation for details. Below, only a few basic parameters are configured).</p> <pre><code>// Set to AP mode\nESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_AP));\n\n// Detailed AP configuration\nwifi_config_t wifi_ap_config = {\n    .ap = {\n        .ssid = ESP_WIFI_AP_SSID,              // Wi-Fi name\n        .ssid_len = strlen(ESP_WIFI_AP_SSID),    // Name length\n        .channel = 1,                          // Wi-Fi channel\n        .password = ESP_WIFI_AP_PASSWD,          // Wi-Fi password\n        .max_connection = 5,                   // Maximum number of connections (default is 10)\n        .authmode = WIFI_AUTH_WPA2_PSK,          // Wi-Fi authentication mode\n    },\n};\nESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_AP, &amp;wifi_ap_config));\n</code></pre> <p>Only the basic parameters are configured here.</p>"},{"location":"COMMUNICATION/WIFI/wifi/#214-wi-fi-startup-phase","title":"2.1.4 Wi-Fi Startup Phase","text":"<p>Use <code>esp_wifi_start</code> to start the Wi-Fi based on the configuration.</p> <pre><code>/* Start WiFi */\nESP_ERROR_CHECK(esp_wifi_start());\n</code></pre> <p>This completes a basic Wi-Fi AP.</p> <p>However, this is just the most basic program. How do we know within the program when an external STA device connects or disconnects? For that, we need to use the default event loop created earlier.</p>"},{"location":"COMMUNICATION/WIFI/wifi/#215-event-loop","title":"2.1.5 Event Loop","text":"<p>Call <code>esp_event_handler_instance_register</code> to register an event handler with the default event loop. It functions the same as the <code>esp_event_handler_instance_register_with</code> function, with the only difference being that it registers the handler to the default event loop.</p> <pre><code>esp_err_t esp_event_handler_instance_register(esp_event_base_t event_base,\n                                             int32_t event_id,\n                                             esp_event_handler_t event_handler,\n                                             void *event_handler_arg,\n                                             esp_event_handler_instance_t *instance);\n</code></pre> <p>The parameters are as follows:</p> <ul> <li>event_base: The base ID of the event for which the handler is being registered.</li> <li>event_id: The ID of the event for which the handler is registered.</li> <li>event_handler: The handler function that is called when the event is dispatched.</li> <li>event_handler_arg: Additional data (other than the event data) passed to the handler function.</li> <li>instance: The event handler instance object associated with the registered event handler and its data.</li> </ul> <p>The related event descriptions can be found in the esp-idf files:</p> <p></p> <p>After creating the default event loop, we can add event handling as follows:</p> <pre><code>void WIFI_CallBack(void *event_handler_arg, esp_event_base_t event_base, int32_t event_id, void *event_data)\n{\n    // Connection event\n    if (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_AP_STAIPASSIGNED)\n    {\n        // Parse data\n        ip_event_ap_staipassigned_t* event_info = (ip_event_ap_staipassigned_t *)event_data;\n        ESP_LOGW(\"WIFI_AP\", \"Device connected, MAC:\" MACSTR \"\", MAC2STR(event_info-&gt;mac));\n    }\n\n    // Disconnection event\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_AP_STADISCONNECTED)\n    {\n        wifi_event_ap_stadisconnected_t* event_info = (wifi_event_ap_stadisconnected_t*)event_data;\n        ESP_LOGW(\"WIFI_AP\", \"Device disconnected, MAC:\" MACSTR \"\", MAC2STR(event_info-&gt;mac));\n    }\n}\n\nvoid app_main(void)\n{\n    // ......\n\n    // Initialize the default event loop\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n    // Register the device connection event callback\n    esp_event_handler_instance_register(IP_EVENT, IP_EVENT_AP_STAIPASSIGNED, WIFI_CallBack, NULL, NULL);\n    // Register the device disconnection event callback\n    esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_AP_STADISCONNECTED, WIFI_CallBack, NULL, NULL);\n\n    // ......\n}\n</code></pre> <p>We registered the IP_EVENT_AP_STAIPASSIGNED event here. When a STA device connects or disconnects, the WIFI_CallBack callback function is invoked to print the MAC address information of the connected device.</p>"},{"location":"COMMUNICATION/WIFI/wifi/#22-wifi-sta","title":"2.2 WIFI STA","text":"<p>The official sample code is located at (similar to the hotspot process, but with some differences in details): <code>Espressif\\frameworks\\esp-idf-v4.4.3\\examples\\wifi\\getting_started\\station</code></p> <p>The configuration steps in the initial part are basically the same.</p> <p>Below is the high-level flow of the official program:</p> <p></p>"},{"location":"COMMUNICATION/WIFI/wifi/#221-wi-fi-preparation-phase-same-as-in-ap","title":"2.2.1 Wi-Fi Preparation Phase (Same as in AP)","text":"<p>Initialize NVS:</p> <pre><code>// Initialize NVS\nesp_err_t ret = nvs_flash_init();\nif (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {\n    ESP_ERROR_CHECK(nvs_flash_erase());\n    ret = nvs_flash_init();\n}\nESP_ERROR_CHECK( ret );\n</code></pre>"},{"location":"COMMUNICATION/WIFI/wifi/#222-wi-fi-initialization-phase","title":"2.2.2 Wi-Fi Initialization Phase","text":"<p>This configuration differs from the AP setup, as we need to set the device to STA mode.</p> <p>The only difference is replacing <code>esp_netif_create_default_wifi_ap()</code> with <code>esp_netif_create_default_wifi_sta()</code> to configure STA mode.</p> <pre><code>ESP_ERROR_CHECK(esp_netif_init());\n\nESP_ERROR_CHECK(esp_event_loop_create_default());\n\n// *esp_netif_sta can be used to modify STA settings\nesp_netif_t *esp_netif_sta = esp_netif_create_default_wifi_sta();\n\n/* Initialize WiFi */ \nwifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT;\n// WIFI_INIT_CONFIG_DEFAULT is a macro for the default configuration\n\nESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));\n</code></pre>"},{"location":"COMMUNICATION/WIFI/wifi/#223-wi-fi-configuration-phase","title":"2.2.3 Wi-Fi Configuration Phase","text":"<p>This is similar to the AP mode, but the contents of the configuration structure differ.</p> <pre><code>...............\n#define ESP_WIFI_STA_SSID \"duruofu_win10\"\n#define ESP_WIFI_STA_PASSWD \"1234567890\"\n...............\n\n// Set to STA mode\nESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));\n\n// Detailed STA configuration\nwifi_config_t sta_config = {\n    .sta = {\n        .ssid = ESP_WIFI_STA_SSID,\n        .password = ESP_WIFI_STA_PASSWD,\n        .bssid_set = false,\n    },\n};\nESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));\n</code></pre> <p>The configuration information here, as the name implies, is simply the Wi-Fi name and password to connect to (of course, there are more parameters available; please refer to the ESP-IDF parameter documentation for details).</p>"},{"location":"COMMUNICATION/WIFI/wifi/#224-wi-fi-startup-phase","title":"2.2.4 Wi-Fi Startup Phase","text":"<p>Unlike in AP mode, here an additional <code>esp_wifi_connect()</code> is used to connect to the Wi-Fi.</p> <pre><code>//---------------- Startup Phase -------------------\nESP_ERROR_CHECK(esp_wifi_start());\nESP_ERROR_CHECK(esp_wifi_connect());\n</code></pre>"},{"location":"COMMUNICATION/WIFI/wifi/#225-event-loop","title":"2.2.5 Event Loop","text":"<p>Similarly, we can add event callback functions as before. Here, we listen for startup events, connection failure events, and connection success events. The code is straightforward and will not be elaborated on further.</p> <pre><code>void WIFI_CallBack(void *event_handler_arg, esp_event_base_t event_base, int32_t event_id, void *event_data)\n{\n    static uint8_t connect_count = 0;\n    // WIFI startup successful\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_START\");\n        ESP_ERROR_CHECK(esp_wifi_connect());\n    }\n    // WIFI connection failed\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_DISCONNECTED\");\n        connect_count++;\n        if (connect_count &lt; 6)\n        {\n            ESP_ERROR_CHECK(esp_wifi_connect());\n        }\n        else {\n            ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_DISCONNECTED 10 times\");\n        }\n    }\n    // WIFI connection successful (IP acquired)\n    if (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_GOT_IP\");\n        ip_event_got_ip_t *info = (ip_event_got_ip_t *)event_data;\n        ESP_LOGI(\"WIFI_EVENT\", \"got ip:\" IPSTR \"\", IP2STR(&amp;info-&gt;ip_info.ip));\n    }\n}\n\nvoid app_main(void)\n{\n    // ......\n\n    // Initialize the default event loop\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n    // Register event (WIFI startup successful)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, NULL, NULL));\n    // Register event (WIFI connection failed)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, NULL, NULL));\n    // Register event (WIFI connection successful - IP acquired)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, NULL, NULL));\n\n    // ......\n}\n</code></pre>"},{"location":"COMMUNICATION/WIFI/wifi/#23-supplement","title":"2.3 Supplement","text":""},{"location":"COMMUNICATION/WIFI/wifi/#231-wi-fi-power-saving-mode","title":"2.3.1 Wi-Fi Power Saving Mode","text":"<p>You can use the <code>esp_wifi_set_ps()</code> function to configure the power saving mode of Wi-Fi.</p> <p>This function offers three optional parameters: <pre><code>typedef enum {\n    WIFI_PS_NONE,        /**&lt; No power save */\n    WIFI_PS_MIN_MODEM,   /**&lt; Minimum modem power saving. In this mode, the station wakes up to receive a beacon every DTIM period */\n    WIFI_PS_MAX_MODEM,   /**&lt; Maximum modem power saving. In this mode, the interval for receiving beacons is determined by the listen_interval parameter in wifi_sta_config_t */\n} wifi_ps_type_t;\n</code></pre></p> <p>Regarding the power saving mode, you can refer to: How to Choose a Low Power Mode for Wi-Fi Scenarios</p>"},{"location":"COMMUNICATION/WIFI/wifi/#232-static-ip-configuration","title":"2.3.2 Static IP Configuration","text":"<p>After the DHCP client is created by <code>esp_netif_create_default_wifi_sta()</code>, use the function <code>esp_err_t esp_netif_dhcpc_stop(esp_netif_t *esp_netif)</code> to stop the DHCP client.</p> <p>Then, use <code>esp_netif_set_ip_info()</code> to configure the desired static IP as shown below:</p> <pre><code>// Initialize STA device\nesp_netif_t *esp_netif = esp_netif_create_default_wifi_sta();\n\n// \u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\n// *************** Configure Static IP ******************\nesp_netif_dhcpc_stop(esp_netif);\nesp_netif_ip_info_t ipInfo;\nipInfo.ip.addr = inet_addr(\"192.168.138.2\");\nipInfo.netmask = inet_addr(\"255.255.255.0\");\nipInfo.gw = inet_addr(\"192.168.138.2\");\n\nesp_netif_set_ip_info(esp_netif, &amp;ipInfo);\nesp_netif_dhcpc_start(esp_netif);\n// *************** Configure Static IP ******************\n// \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\n</code></pre>"},{"location":"COMMUNICATION/WIFI/wifi/#233-wifi-scan","title":"2.3.3 WIFI Scan","text":"<p>After calling <code>esp_wifi_start</code>, Wi-Fi will be started according to the configuration. If you do not immediately connect to the specified Wi-Fi hotspot, you can also use Wi-Fi Scan to search for connectable devices.</p> <ul> <li><code>esp_wifi_scan_start</code>: Scans all available APs.</li> <li><code>esp_wifi_scan_get_ap_records</code>: Retrieves the list of APs found in the last scan.</li> <li><code>esp_wifi_scan_get_ap_num</code>: Retrieves the number of APs found in the last scan.</li> </ul> <p>There is nothing complicated here; it is recommended to refer directly to the official ESP-IDF documentation: ESP32 Wi-Fi Scan</p>"},{"location":"COMMUNICATION/WIFI/wifi/#3-examples","title":"3. Examples","text":""},{"location":"COMMUNICATION/WIFI/wifi/#31-wifi-ap-mode","title":"3.1 WIFI AP Mode","text":"<p>Below is an implementation of WIFI AP mode based on the tutorial in Section 2. Code link:</p> <p>https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_ap</p> <pre><code>#include &lt;string.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/event_groups.h\"\n#include \"esp_wifi.h\"\n#include \"esp_log.h\"\n#include \"esp_event.h\"\n#include \"nvs_flash.h\"\n#include \"esp_mac.h\"\n\n#define ESP_WIFI_AP_SSID \"CSW@CEE\"\n#define ESP_WIFI_AP_PASSWD \"88888888\"\n\nvoid WIFI_CallBack(void *event_handler_arg, esp_event_base_t event_base, int32_t event_id, void *event_data)\n{\n    // Connection event\n    if (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_AP_STAIPASSIGNED)\n    {\n        // Parse data\n        ip_event_ap_staipassigned_t* event_info = (ip_event_ap_staipassigned_t *)event_data;\n        ESP_LOGW(\"WIFI_AP\", \"Device connected, MAC:\" MACSTR \"\", MAC2STR(event_info-&gt;mac));\n    }\n\n    // Disconnection event\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_AP_STADISCONNECTED)\n    {\n        wifi_event_ap_stadisconnected_t* event_info = (wifi_event_ap_stadisconnected_t*)event_data;\n        ESP_LOGW(\"WIFI_AP\", \"Device disconnected, MAC:\" MACSTR \"\", MAC2STR(event_info-&gt;mac));\n    }\n}\n\nvoid app_main(void)\n{\n    //---------------- Preparation Phase -------------------\n    // Initialize NVS\n    esp_err_t ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n    ESP_ERROR_CHECK(ret);\n\n    //--------------- Initialization Phase ------------------\n\n    ESP_ERROR_CHECK(esp_netif_init());\n\n    // Initialize default event loop\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n    // Register event callback for device connection\n    esp_event_handler_instance_register(IP_EVENT, IP_EVENT_AP_STAIPASSIGNED, WIFI_CallBack, NULL, NULL);\n    // Register event callback for device disconnection\n    esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_AP_STADISCONNECTED, WIFI_CallBack, NULL, NULL);\n\n    // *esp_netif_ap can be used to modify AP settings\n    esp_netif_t *esp_netif_ap = esp_netif_create_default_wifi_ap();\n\n    /* Initialize WiFi */\n    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n    // WIFI_INIT_CONFIG_DEFAULT is a macro for the default configuration\n    ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));\n\n    //--------------- Configuration Phase --------------------\n    // Set to AP mode\n    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_AP));\n\n    // Detailed AP configuration\n    wifi_config_t wifi_ap_config = {\n        .ap = {\n            .ssid = ESP_WIFI_AP_SSID,             // WiFi name\n            .ssid_len = strlen(ESP_WIFI_AP_SSID),   // Length of the name\n            .channel = 1,                           // WiFi channel\n            .password = ESP_WIFI_AP_PASSWD,         // WiFi password\n            .max_connection = 5,                    // Maximum connections (default is 10)\n            .authmode = WIFI_AUTH_WPA2_PSK,         // WiFi authentication mode\n        },\n    };\n    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_AP, &amp;wifi_ap_config));\n\n    //--------------- Startup Phase --------------------\n    /* Start WiFi */\n    ESP_ERROR_CHECK(esp_wifi_start());\n}\n</code></pre> <p>Demonstration:</p> <p></p> <p>When a device connects to the WiFi, the connection information of the device will be printed.</p>"},{"location":"COMMUNICATION/WIFI/wifi/#32-wifi-sta-mode","title":"3.2 WIFI STA Mode","text":"<p>Below is an implementation of WIFI STA mode based on the tutorial in Section 2. Code link:</p> <p>https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_sta</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/event_groups.h\"\n#include \"esp_wifi.h\"\n#include \"esp_log.h\"\n#include \"esp_event.h\"\n#include \"nvs_flash.h\"\n#include \"esp_mac.h\"\n\n#define ESP_WIFI_STA_SSID \"CSW@CEE\"\n#define ESP_WIFI_STA_PASSWD \"88888888\"\n\nvoid WIFI_CallBack(void *event_handler_arg, esp_event_base_t event_base, int32_t event_id, void *event_data)\n{\n    static uint8_t connect_count = 0;\n    // WIFI startup successful\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_START\");\n        ESP_ERROR_CHECK(esp_wifi_connect());\n    }\n    // WIFI connection failed\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_DISCONNECTED\");\n        connect_count++;\n        if (connect_count &lt; 6)\n        {\n            ESP_ERROR_CHECK(esp_wifi_connect());\n        }\n        else {\n            ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_DISCONNECTED 10 times\");\n        }\n    }\n    // WIFI connection successful (IP acquired)\n    if (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_GOT_IP\");\n        ip_event_got_ip_t *info = (ip_event_got_ip_t *)event_data;\n        ESP_LOGI(\"WIFI_EVENT\", \"got ip:\" IPSTR \"\", IP2STR(&amp;info-&gt;ip_info.ip));\n    }\n}\n\nvoid app_main(void)\n{\n    //---------------- Preparation Phase -------------------\n    // Initialize NVS\n    esp_err_t ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n    ESP_ERROR_CHECK(ret);\n\n    //---------------- Initialization Phase -------------------\n    ESP_ERROR_CHECK(esp_netif_init());\n\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n    // Register event (WIFI startup successful)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, NULL, NULL));\n    // Register event (WIFI connection failed)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, NULL, NULL));\n    // Register event (WIFI connection successful - IP acquired)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, NULL, NULL));\n\n    // Initialize STA device\n    esp_netif_create_default_wifi_sta();\n\n    /* Initialize WiFi */\n    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n    // WIFI_INIT_CONFIG_DEFAULT is a macro for the default configuration\n\n    ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));\n\n    //---------------- Configuration Phase -------------------\n    // Set to STA mode\n    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));\n\n    // Detailed STA configuration\n    wifi_config_t sta_config = {\n        .sta = {\n            .ssid = ESP_WIFI_STA_SSID,\n            .password = ESP_WIFI_STA_PASSWD,\n            .bssid_set = false,\n        },\n    };\n    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));\n\n    //---------------- Startup Phase -------------------\n    ESP_ERROR_CHECK(esp_wifi_start());\n}\n</code></pre> <p>Effect as shown:</p> <p></p>"},{"location":"COMMUNICATION/WIFI/wifi/#33-wifi-sta-mode-for-campus-networks","title":"3.3 WIFI STA Mode for Campus Networks","text":"<p>Connecting to Campus Wi-Fi via WPA2-ENTERPRISE Mode</p> <p>The above code is suitable for ordinary home routers. If you want to connect to a campus Wi-Fi network, which is a bit more complex, please refer to the official documentation and the official code. Below is the code that I have personally modified and successfully tested.</p> <p><pre><code>/* WiFi Connection Example using WPA2 Enterprise\n *\n * Original Copyright (C) 2006-2016, ARM Limited, All Rights Reserved, Apache 2.0 License.\n * Additions Copyright (C) Copyright 2015-2016 Espressif Systems (Shanghai) PTE LTD, Apache 2.0 License.\n *\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/event_groups.h\"\n#include \"esp_wifi.h\"\n#include \"esp_wpa2.h\"\n#include \"esp_event.h\"\n#include \"esp_log.h\"\n#include \"esp_system.h\"\n#include \"nvs_flash.h\"\n#include \"esp_netif.h\"\n\n#define CONFIG_EXAMPLE_EAP_METHOD_PEAP 1\n\n/* The examples use simple WiFi configuration that you can set via\n   project configuration menu.\n\n   If you'd rather not, just change the below entries to strings with\n   the config you want - ie #define EXAMPLE_WIFI_SSID \"mywifissid\"\n\n   You can choose EAP method via project configuration according to the\n   configuration of AP.\n*/\n#define EXAMPLE_WIFI_SSID \"your_ssid\" //SSID of WiFi\n#define EXAMPLE_EAP_METHOD CONFIG_EXAMPLE_EAP_METHOD  //This can be set in Configuration Menu\n\n// #define EXAMPLE_EAP_ID \"Your_UPI/UserID\"\n#define EXAMPLE_EAP_USERNAME \"your_username\"\n#define EXAMPLE_EAP_PASSWORD \"your_password\"\n\n/* FreeRTOS event group to signal when we are connected &amp; ready to make a request */\nstatic EventGroupHandle_t wifi_event_group;\n\n/* esp netif object representing the WIFI station */\nstatic esp_netif_t *sta_netif = NULL;\n\n/* The event group allows multiple bits for each event,\n   but we only care about one event - are we connected\n   to the AP with an IP? */\nconst int CONNECTED_BIT = BIT0;\n\nstatic const char *TAG = \"CSW-WIFI\";\n\n/* CA cert, taken from wpa2_ca.pem\n   Client cert, taken from wpa2_client.crt\n   Client key, taken from wpa2_client.key\n\n   The PEM, CRT and KEY file were provided by the person or organization\n   who configured the AP with wpa2 enterprise.\n\n   To embed it in the app binary, the PEM, CRT and KEY file is named\n   in the component.mk COMPONENT_EMBED_TXTFILES variable.\n*/\n#ifdef CONFIG_EXAMPLE_VALIDATE_SERVER_CERT\nextern uint8_t ca_pem_start[] asm(\"_binary_wpa2_ca_pem_start\");\nextern uint8_t ca_pem_end[]   asm(\"_binary_wpa2_ca_pem_end\");\n#endif /* CONFIG_EXAMPLE_VALIDATE_SERVER_CERT */\n\n#ifdef CONFIG_EXAMPLE_EAP_METHOD_TLS\nextern uint8_t client_crt_start[] asm(\"_binary_wpa2_client_crt_start\");\nextern uint8_t client_crt_end[]   asm(\"_binary_wpa2_client_crt_end\");\nextern uint8_t client_key_start[] asm(\"_binary_wpa2_client_key_start\");\nextern uint8_t client_key_end[]   asm(\"_binary_wpa2_client_key_end\");\n#endif /* CONFIG_EXAMPLE_EAP_METHOD_TLS */\n\nstatic void event_handler(void* arg, esp_event_base_t event_base, \n                                int32_t event_id, void* event_data)\n{\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START) {\n        esp_wifi_connect();\n    } else if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED) {\n        esp_wifi_connect();\n        xEventGroupClearBits(wifi_event_group, CONNECTED_BIT);\n    } else if (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP) {\n        xEventGroupSetBits(wifi_event_group, CONNECTED_BIT);\n    }\n}\n\nstatic void initialise_wifi(void)\n{\n#ifdef CONFIG_EXAMPLE_VALIDATE_SERVER_CERT\n    unsigned int ca_pem_bytes = ca_pem_end - ca_pem_start;\n#endif /* CONFIG_EXAMPLE_VALIDATE_SERVER_CERT */\n\n#ifdef CONFIG_EXAMPLE_EAP_METHOD_TLS\n    unsigned int client_crt_bytes = client_crt_end - client_crt_start;\n    unsigned int client_key_bytes = client_key_end - client_key_start;\n#endif /* CONFIG_EXAMPLE_EAP_METHOD_TLS */\n\n    ESP_ERROR_CHECK(esp_netif_init());\n    wifi_event_group = xEventGroupCreate();\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n    sta_netif = esp_netif_create_default_wifi_sta();\n    assert(sta_netif);\n\n    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n    ESP_ERROR_CHECK( esp_wifi_init(&amp;cfg) );\n    ESP_ERROR_CHECK( esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, &amp;event_handler, NULL) );\n    ESP_ERROR_CHECK( esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, &amp;event_handler, NULL) );\n    ESP_ERROR_CHECK( esp_wifi_set_storage(WIFI_STORAGE_RAM) );\n    wifi_config_t wifi_config = {\n        .sta = {\n            .ssid = EXAMPLE_WIFI_SSID,\n        },\n    };\n    ESP_LOGI(TAG, \"Setting WiFi configuration SSID %s...\", wifi_config.sta.ssid);\n    ESP_ERROR_CHECK( esp_wifi_set_mode(WIFI_MODE_STA) );\n    ESP_ERROR_CHECK( esp_wifi_set_config(ESP_IF_WIFI_STA, &amp;wifi_config) );\n    // ESP_ERROR_CHECK( esp_wifi_sta_wpa2_ent_set_identity((uint8_t *)EXAMPLE_EAP_ID, strlen(EXAMPLE_EAP_ID)) );\n\n#ifdef CONFIG_EXAMPLE_VALIDATE_SERVER_CERT\n    ESP_ERROR_CHECK( esp_wifi_sta_wpa2_ent_set_ca_cert(ca_pem_start, ca_pem_bytes) );\n#endif /* CONFIG_EXAMPLE_VALIDATE_SERVER_CERT */\n\n#ifdef CONFIG_EXAMPLE_EAP_METHOD_TLS\n    ESP_ERROR_CHECK( esp_wifi_sta_wpa2_ent_set_cert_key(client_crt_start, client_crt_bytes,\\\n            client_key_start, client_key_bytes, NULL, 0) );\n#endif /* CONFIG_EXAMPLE_EAP_METHOD_TLS */\n\n#if defined CONFIG_EXAMPLE_EAP_METHOD_PEAP || CONFIG_EXAMPLE_EAP_METHOD_TTLS\n    ESP_ERROR_CHECK( esp_wifi_sta_wpa2_ent_set_username((uint8_t *)EXAMPLE_EAP_USERNAME, strlen(EXAMPLE_EAP_USERNAME)) );\n    ESP_ERROR_CHECK( esp_wifi_sta_wpa2_ent_set_password((uint8_t *)EXAMPLE_EAP_PASSWORD, strlen(EXAMPLE_EAP_PASSWORD)) );\n#endif /* CONFIG_EXAMPLE_EAP_METHOD_PEAP || CONFIG_EXAMPLE_EAP_METHOD_TTLS */\n\n    ESP_ERROR_CHECK( esp_wifi_sta_wpa2_ent_enable() );\n    ESP_ERROR_CHECK( esp_wifi_start() );\n}\n\nstatic void wpa2_enterprise_example_task(void *pvParameters)\n{\n    esp_netif_ip_info_t ip;\n    memset(&amp;ip, 0, sizeof(esp_netif_ip_info_t));\n    vTaskDelay(2000 / portTICK_PERIOD_MS);\n\n    while (1) {\n        vTaskDelay(2000 / portTICK_PERIOD_MS);\n\n        if (esp_netif_get_ip_info(sta_netif, &amp;ip) == 0) {\n            ESP_LOGI(TAG, \"~~~~~~~~~~~\");\n            ESP_LOGI(TAG, \"IP:\"IPSTR, IP2STR(&amp;ip.ip));\n            ESP_LOGI(TAG, \"MASK:\"IPSTR, IP2STR(&amp;ip.netmask));\n            ESP_LOGI(TAG, \"GW:\"IPSTR, IP2STR(&amp;ip.gw));\n            ESP_LOGI(TAG, \"~~~~~~~~~~~\");\n        }\n    }\n}\n\nvoid app_main(void)\n{\n    ESP_ERROR_CHECK( nvs_flash_init() );\n    initialise_wifi();\n    xTaskCreate(&amp;wpa2_enterprise_example_task, \"wpa2_enterprise_example_task\", 4096, NULL, 5, NULL);\n}\n</code></pre> As shown below.</p> <p></p>"},{"location":"COMMUNICATION/WIFI/wifi/#reference-links","title":"Reference Links","text":"<ol> <li>https://www.bilibili.com/video/BV1au411E7K1?p=7&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</li> <li>https://www.bilibili.com/video/BV1au411E7K1?p=8&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</li> <li>https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/wifi.html</li> </ol>"},{"location":"FREERTOS/quickstart/","title":"FREERTOS","text":""},{"location":"FREERTOS/quickstart/#introduction","title":"Introduction","text":"<p>Info</p> <p>FreeRTOS is a small real-time operating system kernel that supports multitasking, timers, semaphores, queues, mutexes, and other functions. FreeRTOS is an open-source project now maintained by Amazon Web Services.</p> <p>Warning</p> <p>Native FREERTOS and ESP-IDF FREERTOS are different. ESP-IDF FREERTOS is a secondary development based on native     FREERTOS.</p> <ol> <li>Priority issues are not applicable to multi-core situations because multiple tasks can run simultaneously.</li> <li>esp-idf automatically creates idle (0), timer (1), app_main (1), IPC-multi-core coordination (24), ESP   timer-ESP timer callback (22). The priority is in brackets.</li> <li>esp-idf does not use native FreeRTOS's memory heap management and implements its own heap.</li> <li>Use xTaskCreatePinnedToCore() to create a task.</li> <li>Avoid deleting the task of another core when deleting a task.</li> <li>The critical section uses a spin lock to ensure synchronization.</li> <li>If floating-point operations are used in the task, the specific core on which it runs must be specified when     creating the task, and it cannot be automatically arranged by the system.</li> </ol> <p>In general, the recommendations are as follows:</p> <p>1) Application developers create tasks that specify cores, and it is recommended not to use tskNO AFFINITY.</p> <p>2) Typically, the task responsible for handling wireless networks (e.g., WiFi or Bluetooth) will be pinned to   CPUO (hence the name PRO_CPU), while the task that handles the rest of the application will be pinned to CPU1     (hence the name APP CPU)</p>"},{"location":"FREERTOS/quickstart/#core-concepts","title":"Core Concepts","text":"<p>without RTOS</p> <pre><code>while(1)\n{\n    task1();\n    task2();\n    task3();\n}\n</code></pre> <p>with RTOS</p> <pre><code>void task1(void *pvParameters)\n{\n    for(;;)\n    {\n        // task1 code\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    for(;;)\n    {\n        // task2 code\n    }\n}\n\nvoid task3(void *pvParameters)\n{\n    for(;;)\n    {\n        // task3 code\n    }\n}\n\nint main(void)\n{\n    xTaskCreate(task1, \"Task1\", 100, NULL, 1, NULL);\n    xTaskCreate(task2, \"Task2\", 100, NULL, 1, NULL);\n    xTaskCreate(task3, \"Task3\", 100, NULL, 1, NULL);\n    vTaskStartScheduler();\n    for(;;);\n}\n</code></pre> <p>Note</p> <p>It can be seen that in the case of no RTOS, when facing a project with complex functions, the code will become very complicated, while using RTOS, we can decompose tasks into multiple sub-tasks, making the code clearer and easier to maintain.</p> <p>Note</p> <p>The basic time unit of FreeRTOS is tick. The tick frequency is determined by the <code>configTICK_RATE_HZ</code> macro in <code>FreeRTOSConfig.h</code>.</p>"},{"location":"FREERTOS/quickstart/#task","title":"Task","text":"<p>Info</p> <p>Real-time applications using FREERTOS can be built as a set of independent tasks, each task running in its own context and not dependent on other tasks within the system or the RTOS task scheduler itself.</p> <p>Note</p> <p>Tasks have the following status:</p> <ul> <li> <p>Running</p> </li> <li> <p>Ready</p> </li> <li> <p>Blocked</p> </li> <li> <p>Suspended</p> </li> </ul> <p>Running</p> <p>When a task is actually executing, it is said to be in the Running state. If the processor running the RTOS has only one core, then only one task can be in the Running state.</p> <p>Ready</p> <p>When a task is ready to run, but it has not yet been given a chance to run because other tasks are running, this state is called the Ready state.</p> <p>Blocked</p> <p>When a task cannot run for some reason, it is said to be in the Blocked state. A task may be blocked for waiting for an event, waiting for a semaphore, waiting for a message queue, etc. Usually a blocked task has a timeout, and when the timeout is reached, the task is awakened.</p> <p>Suspended</p> <p>Like a blocked task, a suspended task cannot enter the Running state. However, unlike a blocked task, a suspended task will not be awakened until it is explicitly resumed. A task will only enter or exit the Suspended state if it is explicitly suspended and resumed through an API command. &gt; Running</p> <p>When a task is actually executing, it is said to be in the Running state. If the processor running the RTOS has only one core, then only one task can be in the running state.</p> <p>Ready</p> <p>When a task is ready to run, but it has not yet been given a chance to execute because other tasks are running, this state is called the ready state.</p> <p>Blocked</p> <p>When a task cannot run for some reason, it is called the blocked state. Tasks may be blocked for waiting for events, waiting for semaphores, waiting for message queues, etc. Usually a task in the blocked state has a timeout, and when the timeout is reached, the task will be awakened.</p> <p>Suspended</p> <p>Like a task in the blocked state, a task in the suspended state cannot enter the running state. However, unlike a task in the blocked state, a task in the suspended state will not be awakened until it is explicitly resumed. A task will only enter or exit the suspended state if it is explicitly suspended and resumed through API commands.</p>"},{"location":"FREERTOS/quickstart/#freertos-concepts-comparison","title":"FreeRTOS Concepts Comparison","text":"<p>The following is a concise comparison of Queue, Semaphore, Mutex, Event Group, and Task Notification in FreeRTOS:</p> Feature Queue Semaphore Mutex Event Group Task Notification Main Use Data Transfer Synchronization/Resource Management Shared Resource Protection Multi-task Synchronization Lightweight Synchronization Data Transfer Supported Not Supported Not Supported Not Supported Supported (Notification Value) Resource Usage High Medium Medium Medium Lowest Priority Inheritance Not Supported Not Supported Supported Not Supported Not Supported Use Cases Inter-task Message Passing Task Synchronization Shared Resource Protection Complex Event Triggering Lightweight Synchronization"},{"location":"FREERTOS/quickstart/#key-differences","title":"Key Differences","text":"<ul> <li>Queue: Suitable for data transfer.</li> <li>Semaphore: Suitable for simple synchronization or resource counting.</li> <li>Mutex: Suitable for protecting shared resources.</li> <li>Event Group: Suitable for multi-task synchronization and complex event triggering.</li> <li>Task Notification: Suitable for lightweight synchronization, most efficient.</li> </ul>"},{"location":"FREERTOS/EVENT-GROUP/event-group/","title":"EVENT GROUP | EFFICIENT TASK SYNCHRONIZATION AND STATUS MANAGEMENT","text":"<p>References</p> <p>This document is based on the DURUOFU's ESP32-GUIDE. For more information, please refer to the original version: DURUOFU ESP32-GUIDE.</p> <p>Note</p> <p>Event groups are a mechanism for implementing task communication and synchronization, mainly used to coordinate the execution of multiple tasks or interrupts.</p> <p>Event Bit (Event Flag): The event bit is used to indicate whether an event has occurred. The event bit is usually called an event flag. For example, an application can: Define a bit (or flag), set to 1 to indicate \"received a message and ready to process\", set to 0 to indicate \"no message waiting to be processed\". Define a bit (or flag), set to 1 to indicate \"the task has completed the initialization\", set to 0 to indicate \"the task is not ready\".</p> <p>Event Group: An event group is a collection of event bits. The event group is used to manage multiple event bits. The event group is usually called an event flag group. For example, an application can: Event bit number 0 indicates \"received a message and ready to process\". Event bit number 1 indicates \"the task has completed the initialization\". Event bit number 2 indicates \"the task is in the running state\".</p> <p>Event Group and Event Bit Data Type:</p> <p>Event group is a data type of <code>EventGroupHandle_t</code>, and event bit is a data type of <code>EventBits_t</code>.</p> <p>If configUSE_16_BIT_TICKS is set to 1, the number of bits (or flags) stored in the event group is 8; if configUSE_16_BIT_TICKS is set to 0, it is 24. The value of configUSE_16_BIT_TICKS depends on the data type used for thread-local storage in the task implementation.</p> <p>(The default value in ESP-IDF is 24 bits)</p> <p>All event bits in the event group are stored in a single unsigned integer variable of type <code>EventBits_t</code>. Event bit 0 is stored in bit 0, event bit 1 is stored in bit 1, and so on.</p> <p>The following figure shows a 24-bit event group, using 3 bits to save the 3 example events described earlier. In the image, only event bit 2 is set. (An event group with 24 event bits, of which only three are in use)</p> <p></p> <p>Event Group RTOS API Functions</p> <p>The provided event group API functions allow tasks to set one or more event bits in the event group, clear one or more event bits in the event group, and suspend (enter a blocked state, so the task does not consume any processing time) to wait for one or more event bits in the event group to be set.</p> <p>Event groups can also be used to synchronize tasks, creating what are typically called \"collections\" of tasks. A task synchronization point is a location in the application code where a task blocks, consuming no CPU time, waiting for all other tasks participating in the synchronization to reach their synchronization points.</p>"},{"location":"FREERTOS/EVENT-GROUP/event-group/#1-api-description","title":"1. API Description:","text":"<p>Event group operations mainly involve the following APIs:</p> Function Name Functionality Remarks xEventGroupCreate Create an event group Returns an event group handle for subsequent operations xEventGroupSetBits Set one or more event flags Used to notify other tasks that certain events have occurred xEventGroupClearBits Clear one or more event flags Used to reset event flags to prevent repeated triggering xEventGroupWaitBits Wait for the set state of one or more event flags Tasks can choose to block until the specified event occurs xEventGroupGetBits Query the current state of the event group Returns the current state of all event flags in the event group xEventGroupSync Synchronize multiple tasks Used to allow multiple tasks to continue execution"},{"location":"FREERTOS/EVENT-GROUP/event-group/#xeventgroupcreate-create-an-event-group","title":"xEventGroupCreate: Create an Event Group","text":"<p>Prototype:</p> <pre><code>EventGroupHandle_t xEventGroupCreate( void );\n</code></pre> <p>Return Value: If successful, the function returns a handle to the created event group. If the event group cannot be created, the function returns NULL.</p> <p>Example:</p> <pre><code>EventGroupHandle_t xEventGroup;\nxEventGroup = xEventGroupCreate();\nif (xEventGroup == NULL) {\n    // Event group creation failed\n}\n</code></pre>"},{"location":"FREERTOS/EVENT-GROUP/event-group/#xeventgroupsetbits-set-event-bits","title":"xEventGroupSetBits: Set Event Bits","text":"<p>Prototype:</p> <pre><code>EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet );\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>xEventGroup</code>: The handle of the event group in which the event bits are to be set.</p> </li> <li> <p><code>uxBitsToSet</code>: The event bits to set.</p> </li> </ul> <p>Return Value: The function returns the event group status before being called.</p>"},{"location":"FREERTOS/EVENT-GROUP/event-group/#xeventgroupwaitbits-wait-for-event-bits","title":"xEventGroupWaitBits: Wait for Event Bits","text":"<p>Read the bits in the event group, selectively enter \u201cblocked\u201d state (if timeout value is set) to wait for setting one or more bits in the event group. Can not call this function in an interrupt service routine.</p> <p>Prototype:</p> <pre><code>EventBits_t xEventGroupWaitBits(\n    EventGroupHandle_t xEventGroup,\n    const EventBits_t uxBitsToWaitFor,\n    const BaseType_t xClearOnExit,\n    const BaseType_t xWaitForAllBits,\n    TickType_t xTicksToWait\n);\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>xEventGroup</code>: The handle of the event group to wait for.</p> </li> <li> <p><code>uxBitsToWaitFor</code>: The event bits to wait for (bitwise representation).</p> </li> <li> <p><code>xClearOnExit</code>: Whether to clear the specified event bits when exiting the wait.</p> </li> <li> <p><code>xWaitForAllBits</code>: Whether to wait for all bits to be set.</p> </li> <li> <p><code>xTicksToWait</code>: The maximum time to wait for the event bits to be set.</p> </li> </ul> <p>Return Value: The function returns the event status satisfying the conditions.</p> <p>Example:</p> <pre><code>EventBits_t uxBits;\nuxBits = xEventGroupWaitBits(\n    xEventGroup,      // Event group handle\n    0x03,             // Wait for bit 0 and bit 1\n    pdTRUE,           // Clear event bits when exiting the wait\n    pdFALSE,          // Wait for any event\n    portMAX_DELAY     // Wait indefinitely\n)\n\nif (uxBits &amp; 0x01) {\n    // Event 0 occurred\n}\n\nif (uxBits &amp; 0x02) {\n    // Event 1 occurred\n}\n</code></pre>"},{"location":"FREERTOS/EVENT-GROUP/event-group/#xeventgroupsyncsynchronize-tasks","title":"xEventGroupSync\uff1aSynchronize Tasks","text":"<p>Atomically sets a bit (flag) in an RTOS event group and then waits for a combination of bits to be set in the same event group. This feature is often used to synchronize multiple tasks (often called task sets), where each task must wait for the others to reach a synchronization point before continuing.</p> <p>Prototype:</p> <pre><code>EventBits_t xEventGroupSync(\n    EventGroupHandle_t xEventGroup,\n    const EventBits_t uxBitsToSet,\n    const EventBits_t uxBitsToWaitFor,\n    TickType_t xTicksToWait\n);\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>xEventGroup</code>: The handle of the event group to synchronize.</p> </li> <li> <p><code>uxBitsToSet</code>: The event bits to set.</p> </li> <li> <p><code>uxBitsToWaitFor</code>: The event bits set by other tasks to wait for.</p> </li> <li> <p><code>xTicksToWait</code>: The maximum time to wait.</p> </li> </ul> <p>Return Value: The function returns the event status satisfying the conditions.</p> <p>Example:</p> <pre><code>xEventGroupSync(\n    xEventGroup,  // Event group handle\n    0x01,         // Set bit 0\n    0x03,         // Wait for bit 0 and bit 1 to be set\n    portMAX_DELAY // Wait indefinitely\n);\n</code></pre>"},{"location":"FREERTOS/EVENT-GROUP/event-group/#2-example-code","title":"2. Example Code:","text":""},{"location":"FREERTOS/EVENT-GROUP/event-group/#1-event-group-waiting","title":"1. Event Group Waiting","text":"<p>Task 1 waiting for task2 to set the event bit, then execute the program:</p> <pre><code>// EVENT GROUP WAITING\n\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/event_groups.h\"\n\nstatic const char *TAG = \"main\";\n\nEventGroupHandle_t xCreatedEventGroup;\n\n#define BIT_0 (1 &lt;&lt; 0)\n#define BIT_4 (1 &lt;&lt; 4)\n\nvoid task1(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task1 started!\");\n\n    while (1)\n    {\n        // Wait for BIT_0 or BIT_4 to be set in the event group\n        EventBits_t uxBits;\n        uxBits = xEventGroupWaitBits(\n            xCreatedEventGroup, /* The event group being tested. */\n            BIT_0 | BIT_4,      /* The bits within the event group to wait for. */\n            pdTRUE,             /* BIT_0 &amp; BIT_4 should be cleared before returning. */\n            pdFALSE,            /* Don't wait for both bits, either bit will do. */\n            portMAX_DELAY);     /* Wait indefinitely for either bit to be set. */\n\n        // Check which bits are set\n        if ((uxBits &amp; (BIT_0 | BIT_4)) == (BIT_0 | BIT_4))\n        {\n            ESP_LOGI(TAG, \"BIT_0 and BIT_4 are both set\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"One of the bits (BIT_0 or BIT_4) is set\");\n        }\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"task2 started!\");\n    vTaskDelay(pdMS_TO_TICKS(1000)); // Delay for 1 second\n    while (1)\n    {\n        // Set BIT_0 in the event group\n        xEventGroupSetBits(xCreatedEventGroup, BIT_0);\n        ESP_LOGI(TAG, \"BIT_0 is set\");\n        vTaskDelay(pdMS_TO_TICKS(3000)); // Delay for 3 seconds\n\n        // Set BIT_4 in the event group\n        xEventGroupSetBits(xCreatedEventGroup, BIT_4);\n        ESP_LOGI(TAG, \"BIT_4 is set\");\n        vTaskDelay(pdMS_TO_TICKS(3000)); // Delay for 3 seconds\n\n        xEventGroupSetBits(xCreatedEventGroup, BIT_0 | BIT_4);\n        ESP_LOGI(TAG, \"ddd BIT_0 and BIT_4 are both set\");\n        vTaskDelay(pdMS_TO_TICKS(3000)); // Delay for 3 seconds\n    }\n}\n\nvoid app_main(void)\n{\n\n    // create event group\n    xCreatedEventGroup = xEventGroupCreate();\n\n    if (xCreatedEventGroup == NULL)\n    {\n        ESP_LOGE(TAG, \"create event group failed\");\n    }\n    else\n    {\n        xTaskCreate(task1, \"task1\", 1024 * 2, NULL, 1, NULL);\n        xTaskCreate(task2, \"task2\", 1024 * 2, NULL, 1, NULL);\n    }\n}// EVENT GROUP WAITING\n\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/event_groups.h\"\n\nstatic const char *TAG = \"main\";\n\nEventGroupHandle_t xCreatedEventGroup;\n\n#define BIT_0 (1 &lt;&lt; 0)\n#define BIT_4 (1 &lt;&lt; 4)\n\nvoid task1(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task1 started!\");\n\n    while (1)\n    {\n        // Wait for BIT_0 or BIT_4 to be set in the event group\n        EventBits_t uxBits;\n        uxBits = xEventGroupWaitBits(\n            xCreatedEventGroup, /* The event group being tested. */\n            BIT_0 | BIT_4,      /* The bits within the event group to wait for. */\n            pdTRUE,             /* BIT_0 &amp; BIT_4 should be cleared before returning. */\n            pdFALSE,            /* Don't wait for both bits, either bit will do. */\n            portMAX_DELAY);     /* Wait indefinitely for either bit to be set. */\n\n        // Check which bits are set\n        if ((uxBits &amp; (BIT_0 | BIT_4)) == (BIT_0 | BIT_4))\n        {\n            ESP_LOGI(TAG, \"BIT_0 and BIT_4 are both set\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"One of the bits (BIT_0 or BIT_4) is set\");\n        }\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"task2 started!\");\n    vTaskDelay(pdMS_TO_TICKS(1000)); // Delay for 1 second\n    while (1)\n    {\n        // Set BIT_0 in the event group\n        xEventGroupSetBits(xCreatedEventGroup, BIT_0);\n        ESP_LOGI(TAG, \"BIT_0 is set\");\n        vTaskDelay(pdMS_TO_TICKS(3000)); // Delay for 3 seconds\n\n        // Set BIT_4 in the event group\n        xEventGroupSetBits(xCreatedEventGroup, BIT_4);\n        ESP_LOGI(TAG, \"BIT_4 is set\");\n        vTaskDelay(pdMS_TO_TICKS(3000)); // Delay for 3 seconds\n\n        xEventGroupSetBits(xCreatedEventGroup, BIT_0 | BIT_4);\n        ESP_LOGI(TAG, \"ddd BIT_0 and BIT_4 are both set\");\n        vTaskDelay(pdMS_TO_TICKS(3000)); // Delay for 3 seconds\n    }\n}\n\nvoid app_main(void)\n{\n\n    // create event group\n    xCreatedEventGroup = xEventGroupCreate();\n\n    if (xCreatedEventGroup == NULL)\n    {\n        ESP_LOGE(TAG, \"create event group failed\");\n    }\n    else\n    {\n        xTaskCreate(task1, \"task1\", 1024 * 2, NULL, 1, NULL);\n        xTaskCreate(task2, \"task2\", 1024 * 2, NULL, 1, NULL);\n    }\n}\n</code></pre>"},{"location":"FREERTOS/EVENT-GROUP/event-group/#2-event-group-synchronization","title":"2. Event Group Synchronization","text":"<p>Task 1 sets BIT_0 and waits for BIT_1 to be set, while task 2 sets BIT_1 and waits for BIT_0 to be set, then executes the program:</p> <pre><code>// EVENT GROUP SYNCHRONIZATION\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/event_groups.h\"\n\n/* Bits used by the three tasks. */\n#define TASK_0_BIT (1 &lt;&lt; 0)\n#define TASK_1_BIT (1 &lt;&lt; 1)\n#define TASK_2_BIT (1 &lt;&lt; 2)\n\n#define ALL_SYNC_BITS (TASK_0_BIT | TASK_1_BIT | TASK_2_BIT)\n\nstatic const char *TAG = \"main\";\nEventGroupHandle_t xEventBits;\n\n\nvoid task0(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task0 started!\");\n\n    while (1)\n    {\n        vTaskDelay(pdMS_TO_TICKS(3000));\n        ESP_LOGI(TAG, \"task0: task synchronization started\");\n        // Event synchronization\n        xEventGroupSync(\n            xEventBits,     /* The event group being tested. */\n            TASK_0_BIT,     /* The bits within the event group to wait for. */\n            ALL_SYNC_BITS,  /* The bits within the event group to wait for. */\n            portMAX_DELAY); /* Wait a maximum of 100ms for either bit to be set. */\n\n    ESP_LOGI(TAG, \"task0: task synchronization completed\");\n        vTaskDelay(pdMS_TO_TICKS(3000));\n    }\n}\nvoid task1(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task1 started!\");\n\n    while (1)\n    {\n        vTaskDelay(pdMS_TO_TICKS(4000));\n        ESP_LOGI(TAG, \"task1: task synchronization started\");\n\n        // Event synchronization\n        xEventGroupSync(\n            xEventBits,     /* The event group being tested. */\n            TASK_1_BIT,     /* The bits within the event group to wait for. */\n            ALL_SYNC_BITS,  /* The bits within the event group to wait for. */\n            portMAX_DELAY); /* Wait a maximum of 100ms for either bit to be set. */\n\n        ESP_LOGI(TAG, \"task1: task synchronization completed\");\n        vTaskDelay(pdMS_TO_TICKS(3000));\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task2 started!\");\n\n    while (1)\n    {\n        vTaskDelay(pdMS_TO_TICKS(5000));\n        ESP_LOGI(TAG, \"task2: task synchronization started\");\n        // Event synchronization\n        xEventGroupSync(\n            xEventBits,     /* The event group being tested. */\n            TASK_2_BIT,     /* The bits within the event group to wait for. */\n            ALL_SYNC_BITS,  /* The bits within the event group to wait for. */\n            portMAX_DELAY); /* Wait a maximum of 100ms for either bit to be set. */\n\n        ESP_LOGI(TAG, \"task2: task synchronization completed\");\n        vTaskDelay(pdMS_TO_TICKS(3000));\n    }\n}\n\n\nvoid app_main(void)\n{\n    // Create event group\n    xEventBits = xEventGroupCreate();\n\n    if (xEventBits == NULL)\n    {\n        ESP_LOGE(TAG, \"Failed to create event group\");\n    }\n    else\n    {\n        xTaskCreate(task0, \"task0\", 1024 * 2, NULL, 1, NULL);\n        xTaskCreate(task1, \"task1\", 1024 * 2, NULL, 1, NULL);\n        xTaskCreate(task2, \"task2\", 1024 * 2, NULL, 1, NULL);\n    }\n}\n</code></pre> <p>Note</p> <p>When a task calls the xEventGroupWaitBits function to wait for an event bit, if the event bit has been set, the task will be awakened and changed from the blocked state to the ready state, waiting for the scheduler to schedule it.</p>"},{"location":"FREERTOS/MULTITASK/multitask/","title":"FREERTOS MULTITASK MANAGEMENT | FOR PARALLEL TASK PROCESSING","text":"<p>References</p> <p>This document is based on the DURUOFU's ESP32-GUIDE. For more information, please refer to the original version: DURUOFU ESP32-GUIDE.</p> <p>Note: Unlike native FreeRTOS, users using FreeRTOS in ESP-IDF should *never* call <code>vTaskStartScheduler()</code> and <code>vTaskEndScheduler()</code>. Instead, ESP-IDF will start FreeRTOS automatically. Users must define a <code>void app_main(void)</code> function as the entry point of the user application, which will be called automatically when ESP-IDF starts.</p> <p>Usually, users will start other tasks of the application from <code>app_main</code>. The <code>app_main</code> function can return at any time (before the application terminates). The <code>app_main</code> function is called by the main task.</p>"},{"location":"FREERTOS/MULTITASK/multitask/#task-creation","title":"Task Creation","text":"<p>FreeRTOS provides two methods to create tasks: <code>xTaskCreate</code> and <code>xTaskCreateStatic</code>.</p>"},{"location":"FREERTOS/MULTITASK/multitask/#xtaskcreate-dynamically-create-a-task","title":"xTaskCreate: Dynamically create a task","text":"<p>Use when you need to create a task by dynamically allocating memory at runtime, which is the general normal case.</p> <p>Prototype:</p> <pre><code>static inline BaseType_t xTaskCreate(TaskFunction_t pxTaskCode, \n                                     const char *const pcName, \n                                     const configSTACK_DEPTH_TYPE usStackDepth, \n                                     void *const pvParameters, \n                                     UBaseType_t uxPriority, \n                                     TaskHandle_t *const pxCreatedTask)\n</code></pre> <p>Create a new task and add it to the list of tasks that are ready to run. In the FreeRTOS implementation, tasks use two blocks of memory. The first block is used to store the task's data structure. The task uses the second block as its stack. If a task is created using xTaskCreate(), then these two blocks of memory will be automatically allocated within the xTaskCreate() function.</p> <p>Parameters:</p> <ul> <li><code>pxTaskCode</code>: A pointer to the task entry function. The task must be designed to never return (i.e., implemented in an infinite loop).</li> <li><code>pcName</code>: A descriptive name for the task, mainly for debugging convenience. The maximum length is defined by <code>configMAX_TASK_NAME_LEN</code> (default 16).</li> <li><code>usStackDepth</code>: The size of the task stack (in bytes). Note that this is different from the default unit in native FreeRTOS.</li> <li><code>pvParameters</code>: A pointer to the parameter passed to the task function (type void pointer).</li> <li><code>uxPriority</code>: The priority of the task (the larger the number, the higher the priority, with a minimum of 1). In systems that support MPU, privileged tasks can be created by setting the <code>portPRIVILEGE_BIT</code> bit (e.g., <code>(2 | portPRIVILEGE_BIT)</code> indicates a privileged task with a priority of 2).</li> <li><code>pxCreatedTask</code>: Used to store the task handle (optional), which can be used to reference the created task.</li> </ul> <p>Return value:</p> <ul> <li><code>pdPASS</code>: Task created successfully.</li> <li><code>errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY</code>: Task creation failed (insufficient memory).</li> </ul>"},{"location":"FREERTOS/MULTITASK/multitask/#xtaskcreatestatic-statically-create-a-task","title":"xTaskCreateStatic: Statically create a task","text":"<p>Manually provide the task stack and task control block (TCB) to avoid dynamic memory allocation.</p> <p>Prototype:</p> <pre><code>TaskHandle_t xTaskCreateStatic(\n    TaskFunction_t pvTaskCode,\n    const char * const pcName,\n    const uint32_t ulStackDepth,\n    void * const pvParameters,\n    UBaseType_t uxPriority,\n    StackType_t * const puxStackBuffer,\n    StaticTask_t * const pxTaskBuffer\n);\n</code></pre> <p>Parameters:</p> <ul> <li><code>pvTaskCode</code>: A pointer to the task entry function. The task must be designed to never return (i.e., implemented in an infinite loop).</li> <li><code>pcName</code>: The task name (for debugging).</li> <li><code>ulStackDepth</code>: The size of the task stack (in bytes).</li> <li><code>pvParameters</code>: The parameter passed to the task function.</li> <li><code>uxPriority</code>: The priority of the task.</li> <li><code>puxStackBuffer</code>: A pointer to the stack buffer.</li> <li><code>pxTaskBuffer</code>: A pointer to the task buffer.</li> </ul> <p>Return value:</p> <ul> <li><code>pdPASS</code>: Task created successfully.</li> <li><code>errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY</code>: Task creation failed (insufficient memory).</li> </ul>"},{"location":"FREERTOS/MULTITASK/multitask/#example-code","title":"Example Code","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\nstatic const char *TAG = \"main\";\n\n// Task function\nvoid myTask(void *pvParameters)\n{\n    for (;;)\n    {\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n        ESP_LOGI(TAG, \"myTask\");\n    }\n}\n\nvoid app_main(void)\n{\n    // Create a FreeRTOS task\n    // Parameter description:\n    // Task entry function: myTask\n    // Task name: \"myTask\", used for identifying the task during debugging\n    // 3. Task stack size: 2048 bytes (allocate appropriately to avoid stack overflow)\n    // 4. Task parameters: NULL (no parameters passed)\n    // 5. Task priority: 1 (lower priority, idle task has priority 0)\n    // 6. Task handle: NULL (no need to save the task handle)\n    xTaskCreate(myTask, \"myTask\", 2048, NULL, 1, NULL);\n}\n</code></pre>"},{"location":"FREERTOS/MULTITASK/multitask/#task-deletion","title":"Task Deletion","text":"<p>To delete a task, use the <code>vTaskDelete</code> function. The task will be deleted immediately, and the memory used by the task will be freed.</p>"},{"location":"FREERTOS/MULTITASK/multitask/#vtaskdelete-delete-a-task","title":"vTaskDelete: Delete a task","text":"<p>When a task completes its function and needs to release resources, or when the system needs to dynamically adjust tasks. Note, after calling <code>vTaskDelete</code>, the task will be deleted immediately, and the memory used by the task will be freed by the FreeRTOS kernel.</p> <p>Prototype:</p> <pre><code>void vTaskDelete(TaskHandle_t xTaskToDelete);\n</code></pre> <p>Parameters:</p> <ul> <li>xTaskToDelete: The handle of the task to be deleted.</li> </ul>"},{"location":"FREERTOS/MULTITASK/multitask/#delete-other-task","title":"Delete other task","text":"<pre><code>// Delete other task\n\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\nstatic const char *TAG = \"main\";\n\n// Task function\nvoid myTask(void *pvParameters)\n{\n    for (;;)\n    {\n        vTaskDelay(500 / portTICK_PERIOD_MS);\n        ESP_LOGI(TAG, \"myTask\");\n    }\n}\n\nvoid app_main(void)\n{\n    // Task handle\n    TaskHandle_t taskHandle = NULL;\n    // Create a FreeRTOS task\n    xTaskCreate(myTask, \"myTask\", 2048, NULL, 1, &amp;taskHandle);\n\n    // Delay for 2 seconds\n    vTaskDelay(2000 / portTICK_PERIOD_MS);\n\n    // Delete the task\n    if (taskHandle != NULL)\n    {\n        vTaskDelete(taskHandle);\n    }\n}\n</code></pre>"},{"location":"FREERTOS/MULTITASK/multitask/#delete-itself","title":"Delete itself","text":"<pre><code>// Delete itself\n\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\nstatic const char *TAG = \"main\";\n\n// Task function\nvoid myTask(void *pvParameters)\n{\n    // Delay for 1 second\n    vTaskDelay(1000 / portTICK_PERIOD_MS);\n    ESP_LOGI(TAG, \"myTask:1\");\n\n    // Delay for another 1 second\n    vTaskDelay(1000 / portTICK_PERIOD_MS);\n    ESP_LOGI(TAG, \"myTask:2\");\n\n    // Delay for another 1 second\n    vTaskDelay(1000 / portTICK_PERIOD_MS);\n    ESP_LOGI(TAG, \"myTask:3\");\n\n    // Delete the task (if NULL is passed, the current task is deleted)\n    vTaskDelete(NULL);\n}\n\nvoid app_main(void)\n{\n    // Task handle\n    TaskHandle_t taskHandle = NULL;\n    // Create a FreeRTOS task\n    xTaskCreate(myTask, \"myTask\", 2048, NULL, 1, &amp;taskHandle);\n}\n</code></pre>"},{"location":"FREERTOS/MULTITASK/multitask/#passing-parameters-when-creating-tasks","title":"Passing Parameters When Creating Tasks","text":"<p>When creating a task, you can pass parameters to the task function. The parameters are passed as a void pointer, and data of any type can be passed, e.g., a structure, an array, or a single variable. After receiving the parameters, the task function can cast the void pointer to the desired data type.</p>"},{"location":"FREERTOS/MULTITASK/multitask/#example-code_1","title":"Example Code","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\nstatic const char *TAG = \"main\";\n\n// Define a structure to hold an integer and an array\ntypedef struct\n{\n    int Int;\n    int Array[3];\n} MyStruct;\n\n// Task function 1: Accepts an integer parameter\nvoid Task_1(void *pvParameters)\n{\n    int *pInt = (int *)pvParameters;\n    ESP_LOGI(TAG, \"Received integer parameter: %d\", *pInt);\n    vTaskDelete(NULL); // Delete the task after execution\n}\n\n// Task function 2: Accepts an array parameter\nvoid Task_2(void *pvParameters)\n{\n    int *pArray = (int *)pvParameters;\n    ESP_LOGI(TAG, \"Received array parameters: %d %d %d\", *pArray, *(pArray + 1), *(pArray + 2));\n    vTaskDelete(NULL); // Delete the task after execution\n}\n\n// Task function 3: Accepts a structure parameter\nvoid Task_3(void *pvParameters)\n{\n    MyStruct *pStruct = (MyStruct *)pvParameters;\n    ESP_LOGI(TAG, \"Received structure parameters: %d %d %d %d\", pStruct-&gt;Int, pStruct-&gt;Array[0], pStruct-&gt;Array[1], pStruct-&gt;Array[2]);\n    vTaskDelete(NULL); // Delete the task after execution\n}\n\n// Task function 4: Accepts a string parameter\nvoid Task_4(void *pvParameters)\n{\n    char *pChar = (char *)pvParameters;\n    ESP_LOGI(TAG, \"Received string parameter: %s\", pChar);\n    vTaskDelete(NULL); // Delete the task after execution\n}\n\n// Global parameters to be passed to tasks\nint Parameters_1 = 1;\nint Parameters_2[3] = {1, 2, 3};\nMyStruct Parameters_3 = {1, {1, 2, 3}};\nstatic const char *Parameters_4 = \"Hello World!\";\n\nvoid app_main(void)\n{\n    // Create Task 1 and pass an integer parameter\n    xTaskCreate(Task_1, \"Task_1\", 2048, (void *)&amp;Parameters_1, 1, NULL);\n\n    // Create Task 2 and pass an array parameter\n    xTaskCreate(Task_2, \"Task_2\", 2048, (void *)&amp;Parameters_2, 1, NULL);\n\n    // Create Task 3 and pass a structure parameter\n    xTaskCreate(Task_3, \"Task_3\", 3048, (void *)&amp;Parameters_3, 1, NULL);\n\n    // Create Task 4 and pass a string parameter (note: no address-of operator &amp; is used)\n    xTaskCreate(Task_4, \"Task_4\", 3048, (void *)Parameters_4, 1, NULL);\n}\n</code></pre>"},{"location":"FREERTOS/MULTITASK/multitask/#task-priority","title":"Task Priority","text":"<p>Each task in FreeRTOS has a priority, which determines the order in which tasks are executed. Tasks with larger priority values \u200b\u200bhave higher priority and are scheduled before lower priority tasks. When multiple tasks have the same priority, the scheduler uses a round-robin mechanism to allocate CPU time between these tasks. </p> <p>The priority range is from 0 to (configMAX_PRIORITIES - 1), where configMAX_PRIORITIES is defined in FreeRTOSConfig.h. The default value is 25. The idle task has the lowest priority (0), and the highest priority is configMAX_PRIORITIES - 1.</p>"},{"location":"FREERTOS/MULTITASK/multitask/#uxtaskpriorityget-get-the-priority-of-a-task","title":"uxTaskPriorityGet: Get the priority of a task","text":"<p>Prototype:</p> <pre><code>UBaseType_t uxTaskPriorityGet(TaskHandle_t xTask);\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>xTask</code>: The handle of the task to query.</p> </li> <li> <p>Return value: The priority of the task.</p> </li> </ul>"},{"location":"FREERTOS/MULTITASK/multitask/#vtaskpriorityset-set-the-priority-of-a-task","title":"vTaskPrioritySet: Set the priority of a task","text":"<p>Prototype:</p> <pre><code>void vTaskPrioritySet(TaskHandle_t xTask, UBaseType_t uxNewPriority);\n</code></pre> <p>Parameters:</p> <ul> <li><code>xTask</code>: The handle of the task to set the priority.</li> <li><code>uxNewPriority</code>: The new priority to set.</li> </ul>"},{"location":"FREERTOS/MULTITASK/multitask/#example-code_2","title":"Example Code","text":"<pre><code>void app_main(void)\n{\n    UBaseType_t taskPriority_1 = 0;\n    UBaseType_t taskPriority_2 = 0;\n    TaskHandle_t taskHandle_1 = NULL;\n    TaskHandle_t taskHandle_2 = NULL;\n\n    xTaskCreate(Task_1, \"Task_1\", 2048, NULL, 12, &amp;taskHandle_1);\n    taskPriority_1 = uxTaskPriorityGet(taskHandle_1);\n    ESP_LOGI(TAG, \"Task_1 Priority\uff1a%d\", taskPriority_1);\n\n    xTaskCreate(Task_2, \"Task_1\", 2048, NULL, 12, &amp;taskHandle_2);\n    taskPriority_2 = uxTaskPriorityGet(taskHandle_2);\n    ESP_LOGI(TAG, \"Task_1 Priority\uff1a%d\", taskPriority_2);\n}\n</code></pre>"},{"location":"FREERTOS/MULTITASK/multitask/#task-suspend-and-resume","title":"Task Suspend and Resume","text":"<p>FreeRTOS provides two functions to suspend and resume tasks: <code>vTaskSuspend</code> and <code>vTaskResume</code>.</p>"},{"location":"FREERTOS/MULTITASK/multitask/#vtasksuspend-suspend-a-task","title":"vTaskSuspend: Suspend a task","text":"<p>Prototype:</p> <pre><code>void vTaskSuspend(TaskHandle_t xTask);\n</code></pre> <p>Parameters:</p> <ul> <li><code>xTask</code>: The handle of the task to suspend.</li> </ul>"},{"location":"FREERTOS/MULTITASK/multitask/#vtaskresume-resume-a-task","title":"vTaskResume: Resume a task","text":"<p>Prototype:</p> <pre><code>void vTaskResume(TaskHandle_t xTask);\n</code></pre> <p>Parameters:</p> <ul> <li><code>xTask</code>: The handle of the task to resume.</li> </ul>"},{"location":"FREERTOS/MULTITASK/multitask/#example-code_3","title":"Example Code","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"esp_log.h\"\n\nstatic const char *TAG = \"main\";\n\nTaskHandle_t taskHandle_1 = NULL; // Handle for Task 1\n\n// Task 1: Periodically prints logs\nvoid Task_1(void *pvParameters)\n{\n    while (1)\n    {\n        ESP_LOGI(TAG, \"Task 1 is running...\");\n        vTaskDelay(pdMS_TO_TICKS(1000)); // Delay for 1 second\n    }\n}\n\n// Task 2: Controls the suspension and resumption of Task 1\nvoid Task_2(void *pvParameters)\n{\n    while (1)\n    {\n        ESP_LOGI(TAG, \"Suspending Task 1...\");\n        vTaskSuspend(taskHandle_1); // Suspend Task 1\n        vTaskDelay(pdMS_TO_TICKS(5000)); // Delay for 5 seconds\n\n        ESP_LOGI(TAG, \"Resuming Task 1...\");\n        vTaskResume(taskHandle_1); // Resume Task 1\n        vTaskDelay(pdMS_TO_TICKS(5000)); // Delay for another 5 seconds\n    }\n}\n\nvoid app_main(void)\n{\n    // Create Task 1\n    xTaskCreate(Task_1, \"Task_1\", 2048, NULL, 6, &amp;taskHandle_1);\n\n    // Create Task 2\n    xTaskCreate(Task_2, \"Task_2\", 2048, NULL, 5, NULL);\n}\n</code></pre>"},{"location":"FREERTOS/MULTITASK/multitask/#system-task-information-listing","title":"System Task Information Listing","text":"<p>FreeRTOS provides many functions to list task information to help developer to debug and monitor the system.</p> <p>System information are mainly listed by <code>vTaskList</code> and <code>uxTaskGetStackHighWaterMark</code>.</p>"},{"location":"FREERTOS/MULTITASK/multitask/#vtasklist-list-task-information","title":"vTaskList: List task information","text":""},{"location":"FREERTOS/MUTEX/mutex/","title":"MUTEX","text":"<p>References</p> <p>This document is based on the DURUOFU's ESP32-GUIDE. For more information, please refer to the original version: DURUOFU ESP32-GUIDE.</p>"},{"location":"FREERTOS/MUTEX/mutex/#1-mutex","title":"1. Mutex","text":"<p>Mutex (Mutual Exclusion Lock): A mutex is very similar to a binary semaphore, but there are some subtle differences: mutexes have a priority inheritance mechanism, but binary semaphores do not.</p> <p>Note</p> <p>Suppose there are three tasks: task_L, task_M, task_H, with priorities increasing in order. task_L has the lowest priority, task_M has a medium priority, and task_H has the highest priority. task_L and task_H share resources, protected by a mutex (assuming no priority inheritance). task_L starts first, acquires the mutex, task_H starts later, tries to acquire the mutex, but because task_L holds the mutex, task_H is blocked. At this time, task_M starts, and task_M's priority is higher than task_L's. task_M preempts task_L's CPU time slice. task_L cannot release the mutex because it is preempted by task_M, causing task_H to be unable to execute, even though it has the highest priority. This is a typical priority inversion phenomenon.</p> <p>Priority</p> <p>Priority inheritance is a method to solve the priority inversion problem. When a low-priority task holds a mutex, if a high-priority task requests the mutex, the priority of the low-priority task will be raised to the priority of the high-priority task until the low-priority task releases the mutex.</p>"},{"location":"FREERTOS/MUTEX/mutex/#11-example-code","title":"1.1 Example Code:","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/semphr.h\"\n\nstatic const char *TAG = \"main\";\n\nSemaphoreHandle_t mutexHandle;\n\nvoid task1(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"task1 started!\");\n    while (1)\n    {\n        if (xSemaphoreTake(mutexHandle, portMAX_DELAY) == pdTRUE)\n        {\n            ESP_LOGI(TAG, \"task1 got the mutex!\");\n            for (int i = 0; i &lt; 10; i++)\n            {\n                ESP_LOGI(TAG, \"task1 running...%d\", i);\n                vTaskDelay(pdMS_TO_TICKS(1000));\n            }\n            xSemaphoreGive(mutexHandle);\n            ESP_LOGI(TAG, \"task1 released the mutex!\");\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"task1 failed to get the mutex!\");\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"task2 started!\");\n    vTaskDelay(pdMS_TO_TICKS(1000));\n    while (1)\n    {\n    }\n}\n\nvoid task3(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"task3 started!\");\n    vTaskDelay(pdMS_TO_TICKS(1000));\n    while (1)\n    {\n        if (xSemaphoreTake(mutexHandle, 1000) == pdPASS)\n        {\n            ESP_LOGI(TAG, \"task3 got the mutex!\");\n            for (int i = 0; i &lt; 10; i++)\n            {\n                ESP_LOGI(TAG, \"task3 running...%d\", i);\n                vTaskDelay(pdMS_TO_TICKS(1000));\n            }\n            xSemaphoreGive(mutexHandle);\n            ESP_LOGI(TAG, \"task3 released the mutex!\");\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"task3 failed to get the mutex!\");\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n    }\n}\n\nvoid app_main(void)\n{\n    mutexHandle = xSemaphoreCreateMutex();\n    xTaskCreate(task1, \"task1\", 1024 * 2, NULL, 10, NULL);\n    xTaskCreate(task2, \"task2\", 1024 * 2, NULL, 10, NULL);\n    xTaskCreate(task3, \"task3\", 1024 * 2, NULL, 10, NULL);\n}\n</code></pre>"},{"location":"FREERTOS/MUTEX/mutex/#2-recursive-mutex","title":"2. Recursive Mutex","text":"<p>Recursive mutexes are a special type of mutex that can be locked multiple times by the same task. Each time the mutex is locked, the task must unlock it the same number of times before it is actually released.</p>"},{"location":"FREERTOS/MUTEX/mutex/#21-example-code","title":"2.1 Example Code:","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/semphr.h\"\n\nstatic const char *TAG = \"main\";\n\nSemaphoreHandle_t mutexHandle;\n\nvoid task1(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task1 started!\");\n    while (1)\n    {\n        xSemaphoreTakeRecursive(mutexHandle, portMAX_DELAY);\n        ESP_LOGI(TAG, \"task1 got the mutex - using resource A\");\n        for (int i = 0; i &lt; 10; i++)\n        {\n            ESP_LOGI(TAG, \"task1 running...%d - using resource A\", i);\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n\n        xSemaphoreTakeRecursive(mutexHandle, portMAX_DELAY);\n        ESP_LOGI(TAG, \"task1 got the mutex - using resource B\");\n        for (int i = 0; i &lt; 10; i++)\n        {\n            ESP_LOGI(TAG, \"task1 running...%d - using resource B\", i);\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n\n        xSemaphoreGiveRecursive(mutexHandle);\n        ESP_LOGI(TAG, \"task1 released the mutex - using resource B\");\n        vTaskDelay(pdMS_TO_TICKS(3000));\n        xSemaphoreGiveRecursive(mutexHandle);\n        ESP_LOGI(TAG, \"task1 released the mutex - using resource A\");\n    }\n    vTaskDelete(NULL);\n}\n\nvoid task2(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"task2 started!\");\n    vTaskDelay(pdMS_TO_TICKS(1000));\n    while (1)\n    {\n        // Get the recursive mutex\n        if (xSemaphoreTakeRecursive(mutexHandle, portMAX_DELAY) == pdTRUE)\n        {\n            ESP_LOGI(TAG, \"task2 got the mutex\");\n            for (int i = 0; i &lt; 10; i++)\n            {\n                ESP_LOGI(TAG, \"task2 running...%d\", i);\n                vTaskDelay(pdMS_TO_TICKS(1000));\n            }\n            xSemaphoreGiveRecursive(mutexHandle);\n            ESP_LOGI(TAG, \"task2 released the mutex\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"task2 failed to get the mutex\");\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n    }\n}\n\nvoid app_main(void)\n{\n    // Create a recursive mutex\n    mutexHandle = xSemaphoreCreateRecursiveMutex();\n\n    xTaskCreate(task1, \"task1\", 1024 * 2, NULL, 1, NULL);\n    xTaskCreate(task2, \"task2\", 1024 * 2, NULL, 2, NULL);\n}\n</code></pre>"},{"location":"FREERTOS/QUEUE/queue/","title":"QUEUE | EFFICIENT TASK COMMUNICATION","text":"<p>References</p> <p>This document is based on the DURUOFU's ESP32-GUIDE. For more information, please refer to the original version: DURUOFU ESP32-GUIDE.</p> <p>Tip</p> <p>The header file <code>#include \"freertos/queue.h\"</code> must be included wherever a queue is used.</p>"},{"location":"FREERTOS/QUEUE/queue/#1-creating-and-passing-parameters-to-a-queue","title":"1. Creating and Passing Parameters to a Queue","text":"<p>Queues are the primary form of communication between tasks. They can be used to send messages between tasks and interrupts and tasks. In most cases, queues are used as thread-safe FIFO (first in, first out) buffers, where new data is sent to the back of the queue, but can also be sent to the front.</p>"},{"location":"FREERTOS/QUEUE/queue/#11-api-description","title":"1.1 API Description","text":"<p>Queue operations mainly involve the following APIs:</p> Function Name Function Remarks xQueueCreate Create a queue Create a queue of a specified length and size xQueueSend Send data to the queue If the queue is full, the task can choose to block or return immediately xQueueReceive Receive data from the queue If the queue is empty, the task can choose to block or return immediately xQueueSendToFront Send data to the front of the queue Similar to xQueueSend, but with higher priority xQueueSendToBack Send data to the back of the queue Default behavior, equivalent to xQueueSend uxQueueMessagesWaiting Query the number of messages currently waiting in the queue Returns the number of messages in the queue that have not been read"},{"location":"FREERTOS/QUEUE/queue/#xqueuecreate-create-a-queue","title":"xQueueCreate: Create a Queue","text":"<p>Prototype:</p> <pre><code>QueueHandle_t xQueueCreate(UBaseType_t uxQueueLength, UBaseType_t uxItemSize);\n</code></pre> <p>Parameter Description: - uxQueueLength: The length of the queue (the number of elements it can hold). - uxItemSize: The size of each element in the queue (in bytes).</p> <p>Return Value: Returns the queue handle on success; returns NULL on failure.</p> <p>Example:</p> <pre><code>QueueHandle_t xQueue;\nxQueue = xQueueCreate(10, sizeof(int)); // Create a queue that can store 10 integers\nif (xQueue == NULL) {\n    // Queue creation failed, handle the error\n}\n</code></pre>"},{"location":"FREERTOS/QUEUE/queue/#xqueuesend-send-data-to-the-queue","title":"xQueueSend: Send Data to the Queue","text":"<p>Prototype:</p> <pre><code>BaseType_t xQueueSend(QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait);\n</code></pre> <p>Parameter Description:</p> <ul> <li>xQueue: The queue handle.</li> <li>pvItemToQueue: A pointer to the data to be sent to the queue.</li> <li>xTicksToWait: The time the task waits when the queue is full (in ticks). Set to 0 to indicate no waiting.</li> </ul> <p>Return Value: Returns pdPASS on success; returns errQUEUE_FULL if the queue is full. - pdPASS: The data was successfully sent to the queue. - errQUEUE_FULL\uff1aThe queue is full and the data could not be sent.</p> <p>Example: </p> <pre><code>int data = 42;\nif (xQueueSend(xQueue, &amp;data, 0) != pdPASS) {\n    // Data sending failed, handle the error\n}\n</code></pre>"},{"location":"FREERTOS/QUEUE/queue/#xqueuereceive-receive-data-from-the-queue","title":"xQueueReceive: Receive Data from the Queue","text":"<p>Prototype:</p> <pre><code>BaseType_t xQueueReceive(QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait);\n</code></pre> <p>Parameter Description: - xQueue: The queue handle. - pvBuffer: A pointer to the buffer that receives the data. - xTicksToWait: The time the task waits when the queue is empty (in ticks). Set to 0 to indicate no waiting.</p> <p>Return Value: Returns pdPASS on success; returns errQUEUE_EMPTY if the queue is empty. - pdPASS: The data was successfully received from the queue. - pdFALSE: The queue is empty and the data could not be received.</p> <p>Example: </p> <pre><code>int receivedData;\nif (xQueueReceive(xQueue, &amp;receivedData, portMAX_DELAY) == pdPASS) {\n    // Data received successfully\n}\n</code></pre>"},{"location":"FREERTOS/QUEUE/queue/#12-queue-example","title":"1.2 Queue Example","text":""},{"location":"FREERTOS/QUEUE/queue/#1-passing-constants-to-a-queue","title":"(1) Passing Constants to a Queue","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/queue.h\"\n\nstatic const char *TAG = \"main\";\n\nvoid Task_1(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    int i = 0;\n\n    for (;;)\n    {\n        // send data to the queue\n        if (xQueueSend(xQueue, &amp;i, 0)!= pdPASS) {\n            ESP_LOGI(TAG, \"send data failed\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"send data success, data is: %d\", i);\n            i++;\n        }\n\n        if(i == 10)\n        {\n            i = 0;\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_2(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    for (;;)\n    {\n        int receivedData;\n        if (xQueueReceive(xQueue, &amp;receivedData, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"data receive failed\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"data receive success, data is: %d\", receivedData);\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n\n    }\n    vTaskDelete(NULL);\n}\n\nvoid app_main(void)\n{\n    TaskHandle_t taskHandle_1 = NULL;\n    TaskHandle_t taskHandle_2 = NULL;\n    QueueHandle_t xQueue;\n\n    // create a queue\n    xQueue = xQueueCreate(10, sizeof(int));\n\n    if (xQueue != NULL)\n    {\n        ESP_LOGI(TAG, \"queue create success\");\n        // send data task\n        xTaskCreate(Task_1, \"Task_1\", 1024 * 4, (void *)xQueue, 12, &amp;taskHandle_1);\n        // receive data task\n        xTaskCreate(Task_2, \"Task_1\", 1024 * 4, (void *)xQueue, 12, &amp;taskHandle_2);\n    }\n    else\n    {\n        ESP_LOGI(TAG, \"queue create failed\");\n    }\n}\n</code></pre>"},{"location":"FREERTOS/QUEUE/queue/#2-passing-structures-to-a-queue","title":"(2) Passing Structures to a Queue","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/queue.h\"\n\nstatic const char *TAG = \"main\";\n\n// define a struct\ntypedef struct\n{\n    int id;\n    int data[3];\n} MyStruct;\n\nvoid Task_1(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    MyStruct shendData = {1, {1, 2, 3}};\n\n    for (;;)\n    {\n        // send data to the queue\n        if (xQueueSend(xQueue, &amp;shendData, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"data send failed\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"data send success, data is: %d-[%d,%d,%d]\", shendData.id, shendData.data[0], shendData.data[1], shendData.data[2]);\n            shendData.id++;\n        }\n\n        if (shendData.id == 10)\n        {\n            shendData.id = 0;\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_2(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    for (;;)\n    {\n        MyStruct receivedData;\n        if (xQueueReceive(xQueue, &amp;receivedData, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"data receive failed\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"data receive success, data is: %d-[%d,%d,%d]\", receivedData.id, receivedData.data[0], receivedData.data[1], receivedData.data[2]);\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n\n    }\n    vTaskDelete(NULL);\n}\n\nvoid app_main(void)\n{\n    TaskHandle_t taskHandle_1 = NULL;\n    TaskHandle_t taskHandle_2 = NULL;\n    QueueHandle_t xQueue;\n\n    // create a queue\n    xQueue = xQueueCreate(10, sizeof(MyStruct));\n\n    if (xQueue != NULL)\n    {\n        ESP_LOGI(TAG, \"queue create success\");\n        // send data task\n        xTaskCreate(Task_1, \"Task_1\", 1024 * 4, (void *)xQueue, 12, &amp;taskHandle_1);\n        // receive data task\n        xTaskCreate(Task_2, \"Task_1\", 1024 * 4, (void *)xQueue, 12, &amp;taskHandle_2);\n    }\n    else\n    {\n        ESP_LOGI(TAG, \"queue create failed\");\n    }\n}\n</code></pre>"},{"location":"FREERTOS/QUEUE/queue/#3-passing-pointers-to-a-queue","title":"(3) Passing Pointers to a Queue","text":"<pre><code>// queue parameter passing pointer: generally used to pass data that occupies a large amount of memory. Passing a pointer can avoid copying data and improve efficiency.\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/queue.h\"\n\nstatic const char *TAG = \"main\";\n\nvoid Task_1(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    int i = 0;\n\n    for (;;)\n    {\n        char *pCharSend = (char *)malloc(50); // allocate memory\n        snprintf(pCharSend, 50, \"Hello World! - %d\", i);\n        i++;\n        // send data to the queue\n        if (xQueueSend(xQueue, &amp;pCharSend, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"data send failed\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"data send success, data is: %s\", pCharSend);\n\n        }\n\n        if (i == 10)\n        {\n            i = 0;\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_2(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n\n    char *pCharReceived = NULL; // receive data pointer\n    for (;;)\n    {\n        if (xQueueReceive(xQueue, &amp;pCharReceived, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"data receive failed\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"data receive success, data is: %s\", pCharReceived);\n            free(pCharReceived); // release memory\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n\n    }\n    vTaskDelete(NULL);\n}\n\nvoid app_main(void)\n{\n    TaskHandle_t taskHandle_1 = NULL;\n    TaskHandle_t taskHandle_2 = NULL;\n    QueueHandle_t xQueue;\n\n    // create a queue\n    xQueue = xQueueCreate(10, sizeof(char *));\n\n    if (xQueue != NULL)\n    {\n        ESP_LOGI(TAG, \"queue create success\");\n        // send data task\n        xTaskCreate(Task_1, \"Task_1\", 1024 * 4, (void *)xQueue, 12, &amp;taskHandle_1);\n        // receive data task\n        xTaskCreate(Task_2, \"Task_1\", 1024 * 4, (void *)xQueue, 12, &amp;taskHandle_2);\n    }\n    else\n    {\n        ESP_LOGI(TAG, \"queue create failed\");\n    }\n}\n</code></pre>"},{"location":"FREERTOS/QUEUE/queue/#2-queue-multi-in-single-out-model","title":"2. Queue Multi-In-Single-Out Model","text":"<p>Info</p> <p>Actually, for MISO model, there are several tasks sending data to the queue, and only one task receiving data from the queue. This model is typically used for data listening.</p> <p>Example Code:</p> <pre><code>// Task 1 and Task 2 send data to the queue, and Task 3 receives data. The priority of Task 3 is higher than that of Task 1 and Task 2, so as to achieve the purpose of data listening.\n\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/queue.h\"\n\nstatic const char *TAG = \"main\";\n\nvoid Task_1(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    int i = 111;\n\n    for (;;)\n    {\n        // send data to the queue\n        if (xQueueSend(xQueue, &amp;i, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"Task 1 data send failed\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"Task 1 data send success, data is: %d\", i);\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_2(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    int i = 222;\n\n    for (;;)\n    {\n        // send data to the queue\n        if (xQueueSend(xQueue, &amp;i, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"Task 2 data send failed\");   \n        }\n        else\n        {\n            ESP_LOGI(TAG, \"Task 2 data send success, data is: %d\", i);\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_3(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    for (;;)\n    {\n        int receivedData;\n        // use portMAX_DELAY to block and wait for data\n        if (xQueueReceive(xQueue, &amp;receivedData, portMAX_DELAY) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"Task 3 data receive failed\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"Task 3 data receive success, data is: %d\", receivedData);\n        }\n    }\n    vTaskDelete(NULL);\n}\n\nvoid app_main(void)\n{\n\n    QueueHandle_t xQueue;\n\n    // create a queue\n    xQueue = xQueueCreate(10, sizeof(int));\n\n    if (xQueue != NULL)\n    {\n        ESP_LOGI(TAG, \"Queue create success\");\n        // send data task\n        xTaskCreate(Task_1, \"Task_1\", 1024 * 4, (void *)xQueue, 1, NULL);\n        xTaskCreate(Task_2, \"Task_2\", 1024 * 4, (void *)xQueue, 1, NULL);\n        // receive data\n        xTaskCreate(Task_3, \"Task_3\", 1024 * 4, (void *)xQueue, 2, NULL);\n    }\n    else\n    {\n        ESP_LOGI(TAG, \"Queue create failed\");\n    }\n}\n</code></pre>"},{"location":"FREERTOS/QUEUE/queue/#3-queue-set","title":"3. Queue Set","text":"<p>Note</p> <p>Queue set is a mechanism to listen to multiple queues at the same time. When data is sent to any queue in the queue set, the task will receive the data.</p>"},{"location":"FREERTOS/QUEUE/queue/#31-api-description","title":"3.1 API Description","text":"<p>Queue set operations mainly involve the following APIs:</p> Function Name Function Remarks xQueueCreateSet Create a queue set Create a queue set xQueueAddToSet Add a queue to the queue set Add a queue to the queue set xQueueRemoveFromSet Remove a queue from the queue set Remove a queue from the queue set xQueueSelectFromSet Listen to the queue set Listen to the queue set"},{"location":"FREERTOS/QUEUE/queue/#32-queue-set-example","title":"3.2 Queue Set Example","text":"<pre><code>// \u961f\u5217\u96c6\u5408:\n// https : // www.bilibili.com/video/BV1zq4y1m7UK?spm_id_from=333.788.videopod.sections&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e\n\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/queue.h\"\n\nstatic const char *TAG = \"main\";\n\nvoid Task_1(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    int i = 111;\n\n    for (;;)\n    {\n        // send data to the queue\n        if (xQueueSend(xQueue, &amp;i, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"Task 1 data send failed\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"Task 1 data send success, data is: %d\", i);\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_2(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    int i = 222;\n\n    for (;;)\n    {\n        // send data to the queue\n        if (xQueueSend(xQueue, &amp;i, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"Task 2 data send failed\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"Task 2 data send success, data is: %d\", i);\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_3(void *pvParameters)\n{\n    // get the queue set handle\n    QueueSetHandle_t xQueueSet = (QueueSetHandle_t)pvParameters;\n    // get the queue handle from the queue with data\n    QueueSetMemberHandle_t QueueData;\n    for (;;)\n    {\n        QueueData = xQueueSelectFromSet(xQueueSet, portMAX_DELAY);\n        if (QueueData != NULL)\n        {\n            int i;\n            if (xQueueReceive(QueueData, &amp;i, portMAX_DELAY) != pdPASS)\n            {\n                ESP_LOGI(TAG, \"Task 3 data receive failed\");\n            }\n            else\n            {\n                ESP_LOGI(TAG, \"Task 3 data receive success, data is: %d, and the queue is: %p\", i, QueueData);\n            }\n        }\n    }\n    vTaskDelete(NULL);\n}\n\nvoid app_main(void)\n{\n    QueueHandle_t xQueue_1;\n    QueueHandle_t xQueue_2;\n\n    // create a queue\n    xQueue_1 = xQueueCreate(10, sizeof(int));\n    xQueue_2 = xQueueCreate(10, sizeof(int));\n\n    // create a queue set\n    QueueSetHandle_t xQueueSet;\n    xQueueSet = xQueueCreateSet(20);\n\n    // add the queue to the queue set\n    xQueueAddToSet(xQueue_1, xQueueSet);\n    xQueueAddToSet(xQueue_2, xQueueSet);\n\n    if ((xQueue_1 != NULL )&amp;&amp; (xQueue_2 != NULL) &amp;&amp; (xQueueSet != NULL))\n    {\n        ESP_LOGI(TAG, \"queue create success\");\n        // send data task\n        xTaskCreate(Task_1, \"Task_1\", 1024 * 4, (void *)xQueue_1, 1, NULL);\n        xTaskCreate(Task_2, \"Task_1\", 1024 * 4, (void *)xQueue_2, 1, NULL);\n        // receive data\n        xTaskCreate(Task_3, \"Task_1\", 1024 * 4, (void *)xQueueSet, 2, NULL);\n    }\n    else\n    {\n        ESP_LOGI(TAG, \"queue create failed\");\n    }\n}\n</code></pre>"},{"location":"FREERTOS/QUEUE/queue/#4-queue-mailbox","title":"4. Queue Mailbox","text":"<p>The mailbox in FreeRTOS is different from other RTOSs, it is a queue but the length is only 1.</p> <p>Write Mailbox: Overwrite the data in the mailbox, if the mailbox is full, the data will be overwritten. Read Mailbox: Read the data in the mailbox, if the mailbox is empty, the task will block and wait for the data.</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/queue.h\"\n\nstatic const char *TAG = \"main\";\n\n// write data queue\nvoid Task_1(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t Mailbox = (QueueHandle_t)pvParameters;\n    int i = 0;\n\n    for (;;)\n    {\n        // send data\n        if (xQueueOverwrite(Mailbox, &amp;i) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"Task 1 data send failed\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"Task 1 data send success, data is: %d\", i);\n        }\n        i++;\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\n\n// read data queue\nvoid Task_2(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t Mailbox = (QueueHandle_t)pvParameters;\n\n    int i = 0;\n\n    for (;;)\n    {\n        // read data\n        if (xQueuePeek(Mailbox, &amp;i, portMAX_DELAY) == pdPASS)\n        {\n            ESP_LOGI(TAG, \"Task 2 data read success, data is: %d\", i);\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"Task 2 data read failed\");\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_3(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t Mailbox = (QueueHandle_t)pvParameters;\n    int i = 0;\n\n    for (;;)\n    {\n        // read data\n        if (xQueuePeek(Mailbox, &amp;i, portMAX_DELAY) == pdPASS)\n        {\n            ESP_LOGI(TAG, \"Task 3 data read success, data is: %d\", i);\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"Task 3 data read failed\");\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_4(void *pvParameters)\n{\n    // get the queue handle\n    QueueHandle_t Mailbox = (QueueHandle_t)pvParameters;\n    int i = 0;\n\n    for (;;)\n    {\n        // read data\n        if (xQueuePeek(Mailbox, &amp;i, portMAX_DELAY) == pdPASS)\n        {\n            ESP_LOGI(TAG, \"Task 4 data read success, data is: %d\", i);\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"Task 4 data read failed\");\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid app_main(void)\n{\n    QueueHandle_t Mailbox; // Create a queue\n\n    // create a queue (note: the queue length is only 1)\n    Mailbox = xQueueCreate(1, sizeof(int));\n\n    if ((Mailbox != NULL) )\n    {\n        ESP_LOGI(TAG, \"create queue success\");\n        // write data task\n        xTaskCreate(Task_1, \"Task_1\", 1024 * 4, (void *)Mailbox, 2, NULL);\n        xTaskCreate(Task_2, \"Task_2\", 1024 * 4, (void *)Mailbox, 1, NULL);\n        xTaskCreate(Task_3, \"Task_3\", 1024 * 4, (void *)Mailbox, 1, NULL);\n        xTaskCreate(Task_4, \"Task_4\", 1024 * 4, (void *)Mailbox, 1, NULL);\n    }\n    else\n    {\n        ESP_LOGI(TAG, \"queue create failed\");\n    }\n}\n</code></pre>"},{"location":"FREERTOS/SEMAPHORE/semaphore/","title":"SEMAPHORE | TASK EXECUTION ORDER CONTROL AND RESOURCE SHARING","text":"<p>References</p> <p>This document is based on the DURUOFU's ESP32-GUIDE. For more information, please refer to the original version: DURUOFU ESP32-GUIDE.</p> <p>Note</p> <p>FreeRTOS provides semaphores and mutexes for task synchronization and resource sharing management. Semaphores are more inclined to task synchronization, while mutexes are used to protect shared resources.</p>"},{"location":"FREERTOS/SEMAPHORE/semaphore/#1-binary-semaphore","title":"1. Binary Semaphore","text":"<p>The binary semaphore is the most basic semaphore, with only two states: available and unavailable (or 1 and 0). It is usually used for task-to-task or interrupt-to-task synchronization. When an event occurs, the semaphore is released by an interrupt or task, and the waiting task is awakened. Binary semaphores are suitable for simple event notification scenarios, such as notifying a task to process external input or complete a task.</p>"},{"location":"FREERTOS/SEMAPHORE/semaphore/#11-api-description","title":"1.1 API Description:","text":"API Function Description <code>xSemaphoreCreateBinary()</code> Create a binary semaphore. <code>xSemaphoreTake()</code> Take a semaphore. <code>xSemaphoreGive()</code> Give a semaphore."},{"location":"FREERTOS/SEMAPHORE/semaphore/#12-example-code","title":"1.2 Example Code:","text":"<pre><code>// Binary Semaphore\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/semphr.h\"\n\nstatic const char *TAG = \"main\";\n\n// Binary Semaphore\nSemaphoreHandle_t semaphoreHandle;\n\n// Shared variable\nint shareVariable = 0;\n\nvoid task1(void *pvParameters)\n{\n    for (;;)\n    {\n        // Take the semaphore, the semaphore becomes 0\n        xSemaphoreTake(semaphoreHandle, portMAX_DELAY);\n        for (int i = 0; i &lt; 10; i++)\n        {\n            shareVariable++;\n            ESP_LOGI(TAG, \"task1 shareVariable:%d\", shareVariable);\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n        // Give the semaphore, the semaphore becomes 1\n        xSemaphoreGive(semaphoreHandle);\n        vTaskDelay(pdMS_TO_TICKS(1000));\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    for (;;)\n    {\n        // Take the semaphore\n        xSemaphoreTake(semaphoreHandle, portMAX_DELAY);\n        for (int i = 0; i &lt; 10; i++)\n        {\n            shareVariable--;\n            ESP_LOGI(TAG, \"task2 shareVariable:%d\", shareVariable);\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n        // Give the semaphore\n        xSemaphoreGive(semaphoreHandle);\n        vTaskDelay(pdMS_TO_TICKS(1000));\n    }\n}\n\nvoid app_main(void)\n{\n    semaphoreHandle = xSemaphoreCreateBinary();\n    xSemaphoreGive(semaphoreHandle);\n    xTaskCreate(task1, \"task1\", 2048, NULL, 10, NULL);\n    xTaskCreate(task2, \"task2\", 2048, NULL, 10, NULL);\n}\n</code></pre>"},{"location":"FREERTOS/TASK-NOTIFICATION/task-notification/","title":"TASK NOTIFICATION | EFFECTIVE COMMUNICATION BETWEEN TASKS","text":"<p>References</p> <p>This document is based on the DURUOFU's ESP32-GUIDE. For more information, please refer to the original version: DURUOFU ESP32-GUIDE.</p> <p>Task Notifications is a lightweight inter-task communication and synchronization mechanism that is more efficient than queues or event groups because it does not require dynamic memory allocation. Each task has a built-in task notification value that other tasks or interrupt service routines (ISRs) can use to notify the task of an event.</p> <p>Features:</p> <ul> <li> <p>Each task has a task notification value (32-bit integer) that can be used to store information.</p> </li> <li> <p>The task notification value is initialized to 0 by default.</p> </li> <li> <p>One task can operate on another task's notification value through the notification function.</p> </li> <li> <p>The task notification value can be used as a binary semaphore, counting semaphore, or a simple 32-bit  variable.</p> </li> <li> <p>When a task receives a notification, it can choose to block (wait for notification) or process the notification.</p> </li> </ul>"},{"location":"FREERTOS/TASK-NOTIFICATION/task-notification/#1-api-description","title":"1. API Description:","text":"<p>Task notifications mainly involve the following APIs:</p> Function Name Function xTaskNotify Sends a notification to a specified task, and the notification value can be overwritten xTaskNotifyGive Simplified notification function for sending semaphore notifications xTaskNotifyWait Waits for the notification value to be updated and chooses whether to clear the notification value ulTaskNotifyTake Waits for task notifications and automatically decrements the notification value (usually used for counting semaphores) xTaskNotifyStateClear Clears the notification state of the task"},{"location":"FREERTOS/TASK-NOTIFICATION/task-notification/#xtasknotify","title":"xTaskNotify","text":"<p>Function: Sends a notification to a specified task and modifies the task's notification value.</p> <p>Prototype:</p> <pre><code>BaseType_t xTaskNotify(\n    TaskHandle_t xTaskToNotify,\n    uint32_t ulValue,\n    eNotifyAction eAction\n);\n</code></pre> <p>Parameters:</p> <ul> <li> <p>xTaskToNotify: Task handle to receive the notification.</p> </li> <li> <p>ulValue: Notification value to send.</p> </li> <li> <p>eAction: Operation type of the notification value.</p> </li> <li> <p>eSetBits: Set the specified bit of the notification value.</p> </li> <li> <p>eIncrement: Increment the notification value.</p> </li> <li> <p>eSetValueWithOverwrite: Overwrite the notification value.</p> </li> <li> <p>eSetValueWithoutOverwrite: Do not overwrite the current value if the notification value is not processed.</p> </li> </ul> <p>Return Value:</p> <ul> <li> <p>pdPASS: Operation successful.</p> </li> <li> <p>pdFAIL\uff1aOperation failed (usually occurs in eSetValueWithoutOverwrite).</p> </li> </ul> <p>Example:</p> <pre><code>xTaskNotify(xTaskHandle, 0x01, eSetBits); // Set the 0th bit of the task notification value\n</code></pre>"},{"location":"FREERTOS/TASK-NOTIFICATION/task-notification/#xtasknotifygive","title":"xTaskNotifyGive","text":"<p>Function: Sends a \"semaphore-style\" notification to a task, equivalent to the eIncrement mode of xTaskNotify().</p> <p>Prototype:</p> <pre><code>void xTaskNotifyGive(TaskHandle_t xTaskToNotify);\n</code></pre> <p>Parameters:</p> <ul> <li>xTaskToNotify: Task handle to receive the notification.   </li> </ul> <p>Example:</p> <pre><code>xTaskNotifyGive(xTaskHandle); // Increment the task notification value\n</code></pre>"},{"location":"FREERTOS/TASK-NOTIFICATION/task-notification/#ultasknotifytake","title":"ulTaskNotifyTake","text":"<p>Function: Waits for task notifications and automatically decrements the notification value (usually used for counting semaphores).</p> <p>Prototype:</p> <pre><code>uint32_t ulTaskNotifyTake(BaseType_t xClearCountOnExit, TickType_t xTicksToWait);\n</code></pre> <p>Parameters:</p> <ul> <li> <p>xClearCountOnExit:   pdTRUE\uff1aClear the notification value when exiting the wait.   pdFALSE\uff1aRetain the remaining notification value when exiting the wait.</p> </li> <li> <p>xTicksToWait: Maximum wait time.</p> </li> </ul> <p>Return Value: Retur the notification value. If it is counting semaphore, the return value is the remaining notification value.</p> <p>Example:</p> <pre><code>if (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) &gt; 0) {\n    // Process the task after receiving the notification\n}\n</code></pre>"},{"location":"FREERTOS/TASK-NOTIFICATION/task-notification/#xtasknotifywait","title":"xTaskNotifyWait","text":"<p>Function: Waits for task notifications, can choose to get the notification value, and decide whether to clear the notification value.</p> <p>Prototype:</p> <pre><code>BaseType_t xTaskNotifyWait(\n    uint32_t ulBitsToClearOnEntry,\n    uint32_t ulBitsToClearOnExit,\n    uint32_t *pulNotificationValue,\n    TickType_t xTicksToWait\n);\n</code></pre> <p>Parameters:</p> <ul> <li> <p>ulBitsToClearOnEntry: Clear the specified bit of the notification value when entering the wait.</p> </li> <li> <p>ulBitsToClearOnExit: Clear the specified bit of the notification value when exiting the wait.</p> </li> <li> <p>pulNotificationValue: Pointer to save the notification value.</p> </li> <li> <p>xTicksToWait: Maximum wait time.</p> </li> </ul> <p>Return Value:</p> <ul> <li> <p>pdTRUE: Received the notification.</p> </li> <li> <p>pdFALSE: Timeout without receiving the notification.</p> </li> </ul> <p>Example:</p> <pre><code>uint32_t ulNotificationValue;\nif (xTaskNotifyWait(0x00, 0xFFFFFFFF, &amp;ulNotificationValue, portMAX_DELAY) == pdTRUE) {\n    // Process the task after receiving the notification\n}\n</code></pre>"},{"location":"FREERTOS/TASK-NOTIFICATION/task-notification/#xtasknotifystateclear","title":"xTaskNotifyStateClear","text":"<p>Function: Clear the notification state of the task.</p> <p>Prototype:</p> <pre><code>void vTaskNotifyStateClear(TaskHandle_t xTask);\n</code></pre> <p>Parameters:</p> <ul> <li>xTask: Task handle to clear the notification state.</li> </ul> <p>Example:</p> <pre><code>vTaskNotifyStateClear(xTaskHandle); // Clear the notification state of the task\n</code></pre>"},{"location":"FREERTOS/TASK-NOTIFICATION/task-notification/#2-example-code","title":"2. Example Code:","text":""},{"location":"FREERTOS/TASK-NOTIFICATION/task-notification/#1-direct-task-notification","title":"1. Direct Task Notification","text":"<p>task2 controls the execution of task1:</p> <pre><code>// Direct Task Notification\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\nstatic const char *TAG = \"main\";\n\nstatic TaskHandle_t xTask1 = NULL, xTask2 = NULL;\n\nvoid task1(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task1 started!\");\n\n    while (1)\n    {\n        ESP_LOGI(TAG, \"task1: Waiting for task notification\");\n        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);\n\n        ESP_LOGI(TAG, \"task1: Received task notification\");\n        vTaskDelay(pdMS_TO_TICKS(3000));\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task2 started!\");\n\n    while (1)\n    {\n        vTaskDelay(pdMS_TO_TICKS(5000));\n        ESP_LOGI(TAG, \"task2: Sending task notification\");\n        xTaskNotifyGive(xTask1);\n    }\n}\n\nvoid app_main(void)\n{\n\n    xTaskCreate(task1, \"task1\", 1024 * 2, NULL, 1, &amp;xTask1);\n    xTaskCreate(task2, \"task2\", 1024 * 2, NULL, 1, &amp;xTask2);\n}\n</code></pre>"},{"location":"FREERTOS/TASK-NOTIFICATION/task-notification/#2-task-notification-value","title":"2. Task Notification Value","text":"<p>Task notification judged by bit - to replace queue mailbox or event group:</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\nstatic const char *TAG = \"main\";\n\nstatic TaskHandle_t xTask1 = NULL, xTask2 = NULL;\n\nvoid task1(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task1 started!\");\n\n    uint32_t ulNotifiedValue;\n\n    while (1)\n    {\n        ESP_LOGI(TAG, \"task1: Waiting for task notification\");\n        xTaskNotifyWait(0x00, ULONG_MAX, &amp;ulNotifiedValue, portMAX_DELAY);\n        // Determine the source of the notification by different bit positions\n        if ((ulNotifiedValue &amp; 0x01) != 0)\n        {\n            ESP_LOGI(TAG, \"task1: Received task notification-bit0\");\n        }\n        if ((ulNotifiedValue &amp; 0x02) != 0)\n        {\n            ESP_LOGI(TAG, \"task1: Received task notification-bit1\");\n        }\n        if ((ulNotifiedValue &amp; 0x04) != 0)\n        {\n            ESP_LOGI(TAG, \"task1: Received task notification-bit2\");\n        }\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task2 started!\");\n\n    while (1)\n    {\n        vTaskDelay(pdMS_TO_TICKS(5000));\n        ESP_LOGI(TAG, \"task2: Sending task notification-bit0\");\n        xTaskNotify(xTask1, 0x01, eSetValueWithOverwrite);\n\n        vTaskDelay(pdMS_TO_TICKS(5000));\n        ESP_LOGI(TAG, \"task2: Sending task notification-bit1\");\n        xTaskNotify(xTask1, 0x02, eSetValueWithOverwrite);\n\n        vTaskDelay(pdMS_TO_TICKS(5000));\n        ESP_LOGI(TAG, \"task2: Sending task notification-bit2\");\n        xTaskNotify(xTask1, 0x04, eSetValueWithOverwrite);\n\n    }\n}\n\nvoid app_main(void)\n{\n\n    xTaskCreate(task1, \"task1\", 1024 * 4, NULL, 1, &amp;xTask1);\n    xTaskCreate(task2, \"task2\", 1024 * 4, NULL, 1, &amp;xTask2);\n}\n</code></pre>"},{"location":"GET_STARTED/COMMON-COMMAND/common-command/","title":"COMMON COMMANDS","text":"<p>Create a new project</p> <pre><code>idf.py create-project &lt;project_name&gt;\n</code></pre> <p>Create a new component</p> <pre><code>idf.py -C &lt;component_dir&gt;   create-component &lt;component_name&gt;\n</code></pre> <p>Select the target chip</p> <pre><code>idf.py set-target &lt;target&gt;\n</code></pre> <p>Build the project</p> <pre><code>idf.py build\n</code></pre> <p>Clean the build results</p> <pre><code>idf.py fullclean\n</code></pre> <p>Flash the firmware to the serial port</p> <pre><code>idf.py -p &lt;port&gt; flash\n</code></pre> <p>Open the serial monitor</p> <pre><code>idf.py -p &lt;port&gt; monitor\n</code></pre> <p>Configure the menu</p> <pre><code>idf.py menuconfig\n</code></pre> <p>Build + Flash + Monitor</p> <pre><code>idf.py build flash monitor\n</code></pre>"},{"location":"GET_STARTED/ENVIRONMENT/environment/","title":"ESP32 DEVELOPMENT ENVIRONMENT SETUP","text":"<p>Tip</p> <p>You are strongly recommended to read the official guide for setting up the development environment before proceeding. The official guide can be found here. </p> <p>Note</p> <p>To start using ESP-IDF on ESP32, install the following software:</p> <ul> <li> <p>Toolchain to compile code for ESP32</p> </li> <li> <p>Build tools - CMake and Ninja to build a full Application for ESP32</p> </li> <li> <p>ESP-IDF that essentially contains API (software libraries and source code) for ESP32 and scripts to  operate the Toolchain</p> </li> </ul> <p></p> <p>Note</p> <p>There are two ways for ESP32 ESP-IDF programming:</p> <ul> <li> <p>Command Line Interface (CLI): fundamental for ESP-IDF programming</p> </li> <li> <p>IDE: easier for beginners</p> </li> </ul>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#windows","title":"WINDOWS","text":""},{"location":"GET_STARTED/ENVIRONMENT/environment/#cli","title":"CLI","text":"<ul> <li> <p> How to Install the ESP-IDF Toolchain on Windows (CLI)</p> <p>  Portal </p> </li> </ul>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#ide","title":"IDE","text":"<ul> <li> <p> How to Install the ESP-IDF Toolchain on Windows (VSCode)</p> <p>  Portal </p> </li> </ul>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#linux","title":"LINUX","text":"<p>Tip</p> <p>ESP-IDF is much faster on Linux than on Windows. It is recommended to use Linux for ESP-IDF development.</p>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#cli_1","title":"CLI \ud83c\udfaf","text":"<p>Note</p> <p>There are a total of five steps:</p> <ul> <li> <p>Step 1: Installation Preparation</p> </li> <li> <p>Step 2: Get ESP-IDF</p> </li> <li> <p>Step 3: Set up the Toolchain</p> </li> <li> <p>Step 4: Set up the Build System</p> </li> <li> <p>Step 5: Start Using</p> </li> </ul>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#step-1-installation-preparation","title":"Step 1 - Installation Preparation","text":"<ul> <li>UBUNTU &amp; DEBIAN</li> </ul> <pre><code>sudo apt-get install git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0\n</code></pre> <ul> <li>CENTOS</li> </ul> <pre><code>sudo yum -y update &amp;&amp; sudo yum install git wget flex bison gperf python3 python3-setuptools cmake ninja-build ccache dfu-util libusbx\n</code></pre>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#step-2-get-esp-idf","title":"Step 2 - Get ESP-IDF","text":"<p>Before building applications around the ESP32, obtain the ESP-IDF repository, the software library files provided by Espressif.</p> <p>To get a local copy of ESP-IDF, open the terminal, navigate to the working directory where you want to save ESP-IDF, and clone the remote repository using git clone. See detailed steps for different operating systems below.</p> <p>Open the terminal and run the following commands:</p> <p><pre><code>mkdir -p ~/esp\ncd ~/esp\ngit clone --recursive https://github.com/espressif/esp-idf.git\n</code></pre> ESP-IDF will be downloaded to <code>~/esp/esp-idf</code>.</p> <p>Visit the ESP-IDF Version Overview to check specific applicable scenarios for different ESP-IDF versions.</p>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#step-3-set-up-the-toolchain","title":"Step 3 - Set Up the Toolchain","text":"<p>Besides ESP-IDF itself, various tools used by ESP-IDF, such as compilers, debuggers, and Python packages, must also be installed to support ESP32 projects. <pre><code>cd ~/esp/esp-idf\n./install.sh all\n</code></pre></p>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#step-4-set-up-the-environment-variables","title":"Step 4 - Set Up the Environment Variables","text":"<p>At this stage, the tools you just installed are not yet added to the PATH environment variable, so they cannot be used from the command line. Therefore, some environment variables must be set. This can be done using another script provided by ESP-IDF.</p> <p>Run the following command in the terminal where you need to use ESP-IDF:</p> <pre><code>. $HOME/esp/esp-idf/export.sh\n</code></pre> <p>If you frequently use ESP-IDF, you can create an alias for running export.sh as follows:</p> <p>(1) Open the shell configuration file</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>(2) Copy and paste the following command into your shell configuration file.</p> <pre><code>alias get_idf='. $HOME/esp/esp-idf/export.sh'\n</code></pre> <p>(3) Refresh the configuration file by restarting the terminal or by running <code>source [path to profile]</code>, such as <code>source ~/.bashrc</code>.</p> <p>You can now run <code>get_idf</code> in any terminal window to set up or refresh the ESP-IDF environment.</p> <p>It is not recommended to add <code>export.sh</code> directly to the shell configuration file, as this will activate the IDF virtual environment in every terminal session, including those where ESP-IDF is not needed. This goes against the purpose of using a virtual environment and may interfere with other software.</p>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#ide_1","title":"IDE","text":"<ul> <li> <p> How to Install the ESP-IDF Toolchain on Ubuntu \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  Portal </p> </li> </ul>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#uninstalling-esp-idf","title":"Uninstalling ESP-IDF","text":"<p>(1) Delete the <code>esp</code> directory.</p> <p>First, navigate to the directory where you cloned the ESP-IDF repository and delete the <code>esp</code> directory, typically at <code>~/esp/esp-idf</code>.</p> <pre><code>rm -rf ~/esp/esp-idf\n</code></pre> <p>(2) Remove the toolchain.</p> <p>If you installed the toolchain using the <code>install.sh</code> script, typically in <code>~/.espressif</code>, you can remove it by running the following command:</p> <pre><code>rm -rf ~/.espressif\n</code></pre> <p>(3) Remove the environment variables.</p> <p>If you added an alias to quickly load the ESP-IDF environment variables in your shell configuration file (e.g., <code>~/.bashrc</code> or <code>~/.zshrc</code>), you need to edit these configuration files and remove the alias. You can open and edit the file using the following command:</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>(4) Refresh the configuration file.</p> <p>After removing the alias, refresh the configuration file by running the following command:</p> <pre><code>source ~/.bashrc\n</code></pre>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#vscode-esp-idf-plugin","title":"VSCode ESP-IDF Plugin","text":"<p>Note</p> <p>This is currently one of the most popular ways to develop with ESP-IDF. VSCode is a lightweight code editor that supports multiple programming languages, including C/C++. The ESP-IDF plugin provides full support for ESP-IDF in VSCode, including features like code autocompletion, debugging, building, and flashing.</p> <ol> <li> <p>Install VSCode</p> <p>First, you need to install VSCode. You can download the installer for your operating system here.</p> </li> <li> <p>Install the ESP-IDF Plugin</p> <p>To install the ESP-IDF plugin, follow these steps:</p> <ul> <li>Open VSCode.</li> <li>Click the Extensions icon on the left sidebar.</li> <li>Type \u201cESP-IDF\u201d in the search bar.</li> <li>Click the \u201cInstall\u201d button.</li> </ul> </li> <li> <p>Configure ESP-IDF Path and ESP-IDF Tools Path</p> <p>After installing the ESP-IDF plugin, you need to configure the ESP-IDF path and ESP-IDF tools path. These paths tell the plugin where to find ESP-IDF and its related tools.</p> <ul> <li>Open VSCode.</li> <li>Click the \u201cSettings\u201d icon in the lower left corner.</li> <li>Type \u201cESP-IDF\u201d in the search bar.</li> <li>Enter the paths for ESP-IDF and ESP-IDF tools in the \u201cESP-IDF Path\u201d and \u201cESP-IDF Tools Path\u201d fields. (If they are not already installed, the plugin will automatically download them once the paths are set.)</li> <li>Save the settings.</li> </ul> </li> <li> <p>Create a New Project</p> </li> </ol>"},{"location":"GET_STARTED/HANDS-ON/hands-on/","title":"HANDS ON","text":""},{"location":"GET_STARTED/HANDS-ON/hands-on/#program-preparation","title":"Program Preparation","text":"<p>Find some programs for testing, here, I use the following repository: </p> <pre><code>git clone --recursive https://gitee.com/vi-iot/esp32-board.git\n</code></pre>"},{"location":"GET_STARTED/HANDS-ON/hands-on/#hardware-preparation","title":"Hardware Preparation","text":"<p>Connect the ESP32 development board to the computer</p>"},{"location":"GET_STARTED/HANDS-ON/hands-on/#select-a-program","title":"Select a Program","text":"<p>Enter the repository <code>esp32-board</code> we just downloaded, find a program, such as <code>helloworld</code>, enter the directory:</p> <pre><code>cd esp32-board\ncd helloworld\n</code></pre>"},{"location":"GET_STARTED/HANDS-ON/hands-on/#set-the-development-board-type","title":"Set the Development Board Type","text":"<p>ESP32 Environment Issue</p> <p>Type in <code>get_idf</code> to call the ESP32 environment if you are not currently in the ESP32 environment. Note that, the use of <code>get_idf</code> is only available after you properly set up the alias in the SHELL as indicated in the last tutorial.</p> <p>If it is a general ESP32 development board, you can ignore this step, but if it is another development board, it is better to specify the development board type, such as esp32-s3:</p> <pre><code>idf.py set-target esp32s3\n</code></pre>"},{"location":"GET_STARTED/HANDS-ON/hands-on/#compile-the-program","title":"Compile the Program","text":"<pre><code>idf.py build\n</code></pre>"},{"location":"GET_STARTED/HANDS-ON/hands-on/#flash-the-program","title":"Flash the Program","text":"<pre><code>idf.py flash\n</code></pre> <p>Note that you can view the USB port where the device is located:</p> <pre><code>ls /dev/tty*\n</code></pre> <p>By comparing the linked/non-linked, find the port where the device is located, such as <code>/dev/ttyACM1</code>, and then flash the program:</p> <pre><code>idf.py -p /dev/ttyACM1 flash\n</code></pre>"},{"location":"GET_STARTED/HANDS-ON/hands-on/#monitor-the-program-running","title":"Monitor the Program Running","text":"<pre><code>idf.py monitor\n</code></pre> <p>or you can use a specific port</p> <pre><code>idf.py -p /dev/ttyACM1 monitor\n</code></pre>"},{"location":"GET_STARTED/HANDS-ON/hands-on/#exit-monitoring","title":"Exit Monitoring","text":"<p>Press <code>Ctrl + ]</code> to exit monitoring</p>"},{"location":"GET_STARTED/HARDWARE/hardware/","title":"HARDWARE","text":"<p>DNESP32S3M</p> <p>The hardware platform used in this document is the DNESP32S3M from Alientek\uff0c which is based on ESP32-S3, as shown in the figure above. It should be possible to migrate the relevant programs to other development boards, but adaptation should be made according to the actual situation.</p> <p>DNESP32S3M Hardware Features</p> <p>ESP32-S3 is a system on a chip that integrates the following features:</p> <ul> <li> <p>Wi-Fi (2.4 GHz band)</p> </li> <li> <p>Bluetooth Low Energy</p> </li> <li> <p>Dual high performance Xtensa\u00ae 32-bit LX7 CPU cores</p> </li> <li> <p>Ultra Low Power co-processor running either RISC-V or FSM core</p> </li> <li> <p>Multiple peripherals</p> </li> <li> <p>Built-in security hardware</p> </li> <li> <p>USB OTG interface</p> </li> <li> <p>USB Serial/JTAG Controller</p> </li> </ul> <p>Powered by 40 nm technology, ESP32-S3 provides a robust, highly integrated platform, which helps meet   the continuous demands for efficient power usage, compact design, security, high performance, and     reliability.</p> <p>Espressif provides basic hardware and software resources to help application developers realize their   ideas using the ESP32-S3 series hardware. The software development framework by Espressif is intended     for development of Internet-of-Things (IoT) applications with Wi-Fi, Bluetooth, power management and    several other system features.</p> <p>Note</p> <p>To start programming, you need:</p> <ul> <li> <p>A computer with a USB port</p> </li> <li> <p>A USB cable</p> </li> <li> <p>A DNESP32S3M development board or other ESP32 development board</p> </li> </ul>"},{"location":"GET_STARTED/TEMPLATE/template/","title":"TEMPLATE PROJECT BUILDING-UP","text":""},{"location":"GET_STARTED/TEMPLATE/template/#environment-setup","title":"ENVIRONMENT SETUP","text":"<p>Info</p> <p>We use VSCode + ESP-IDF for development. Details to setup the development environment can be found on the internet. I assume you have already set up the development environment. Note that the configuration method in the following figure is equivalent to using idf.py menuconfig.</p>"},{"location":"GET_STARTED/TEMPLATE/template/#create-a-new-project","title":"CREATE A NEW PROJECT","text":"<ol> <li>Launch VSCode and then open the command palette by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS).</li> <li>Type <code>ESP-IDF: New Project</code> and press <code>Enter</code>. </li> <li>Enter the project configuration UI and fill in the required information. </li> <li>Choose a template to create a new project. </li> <li>Open in a new window.  </li> </ol>"},{"location":"GET_STARTED/TEMPLATE/template/#templated-project-structure","title":"TEMPLATED PROJECT STRUCTURE","text":"<pre><code>sample_proj/ # Project root directory\n\u251c\u2500\u2500 CMakeLists.txt # Project CMake configuration file\n\u251c\u2500\u2500 main/ # Main application directory\n\u2502   \u251c\u2500\u2500 CMakeLists.txt # Application CMake configuration file\n\u2502   \u2514\u2500\u2500 main.c # Application source file\n\u2514\u2500\u2500 sdkconfig # Project configuration file\n</code></pre>"},{"location":"GET_STARTED/TEMPLATE/template/#project-configuration","title":"PROJECT CONFIGURATION","text":"<p>Note</p> <p>This step is to configure the project settings to maximize the power of the hardware, i.e., use target-specific configurations rather than default configurations.</p> <p>Warning</p> <p>Before you open the project configuration UI, make sure you have the project open in VSCode, set the target to your board, and have the ESP-IDF extension installed.</p> <ol> <li>Enter the project configuration UI by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS) and type <code>ESP-IDF: Configure Project</code>. Alternatively, one can click the gear icon on the bottom menu of the VSCode window. </li> <li>'FLASH' configuration. In the search bar, type <code>flash</code> and press <code>Enter</code>.  </li> <li>'Partition Table' configuration. In the search bar, type <code>partition</code> and press <code>Enter</code>.  details to be provided later</li> <li>'PSRAM' configuration. In the search bar, type <code>psram</code> and press <code>Enter</code>. First, check the checkbox in front of PSRAM, then configure as follows. Note that if the background color is too dark, you may not see the checkbox. </li> <li>Change the CPU frequency. In the search bar, type <code>cpu</code> and press <code>Enter</code>. Modify the CPU frequency to 240 MHz. </li> <li>Modify the FreeRTOS tick clock frequency. In the search bar, type <code>tick</code> and press <code>Enter</code>. Modify the tick clock frequency to 1000 Hz. </li> <li>Modify the partition table. In the command palette, type <code>ESP-IDF: Open Partition Table Editor UI</code>. </li> <li>Modify the partition table as shown below. </li> <li>Save the all the modifications.</li> </ol> <p>By far, we have finished the project initialization. The configuration is now consistent with the hardware onboard resources. </p>"},{"location":"GET_STARTED/TEMPLATE/template/#template-program","title":"TEMPLATE PROGRAM","text":"<p>Now, let's create a simple program to test the board. </p> <p>Go to the main.c file and replace the content with the following code:</p> <pre><code>#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"nvs_flash.h\"\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        vTaskDelay(1000);\n    }\n}\n</code></pre> <p>Then, ensure the serial port number is corrrect, the target board is selected, then click the \"fire flame\" icon to build, flash and monitor the program. Then, you should be able to see the printouts on the serial monitor. </p>"},{"location":"GET_STARTED/TEMPLATE/template/#conclusions","title":"CONCLUSIONS","text":"<p>Note</p> <p>This project sets up the minimal system development board DNESP32S3M, and this project can serve as a useful template for future development. Compared to STM32, many low level details are hidden from the user, therefore the set up process is much simpler.</p>"},{"location":"INTERFACING/KEY/key-itr/","title":"KEY-INTERRUPT","text":""},{"location":"INTERFACING/KEY/key-itr/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we will talk about the onboard key on the DNESP32S3M development board. Different from the previous development method, the key reading method in this section uses the interrupt method.</p> <p>Tip</p> <p>Note that the content on this page is essentially an alternative to the non-interrupt method of the key. Therefore, in practical applications, only one method needs to be selected.</p> <p></p>"},{"location":"INTERFACING/KEY/key-itr/#overview","title":"Overview","text":"<p>In the project, we created a new directory named <code>KEY</code> under the <code>components</code> directory to store the key driver code, including the <code>key.h</code> and <code>key.c</code> files.</p>"},{"location":"INTERFACING/KEY/key-itr/#pin-configuration","title":"Pin Configuration","text":"<p>According to the schematic, the onboard key is connected to GPIO0.</p> <p></p>"},{"location":"INTERFACING/KEY/key-itr/#code","title":"Code","text":""},{"location":"INTERFACING/KEY/key-itr/#exith","title":"EXIT.h","text":"<pre><code>/**\n * @file exit.h\n * @author \n * @brief This file is for the external interrupt initialization and configuration.\n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __EXIT_H__\n#define __EXIT_H__\n\n#include \"esp_err.h\"\n#include &lt;inttypes.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/queue.h\"\n#include \"driver/gpio.h\"\n#include \"esp_system.h\" \n#include \"esp_log.h\"\n#include \"sdkconfig.h\"\n#include \"led.h\"\n\n/* Pin definition */\n#define BOOT_INT_GPIO_PIN   GPIO_NUM_0\n\n/* IO operation */\n#define BOOT_EXIT                gpio_get_level(BOOT_INT_GPIO_PIN)\n\n/* Function declarations */\n/**\n * @brief       External interrupt initialization function\n * @param       None\n * @retval      None\n */\nvoid exit_init(void);   /* External interrupt initialization function */\n\n#endif\n</code></pre>"},{"location":"INTERFACING/KEY/key-itr/#exith_1","title":"EXIT.h","text":"<pre><code>/**\n * @file exit.c\n * @author \n * @brief This file is for the external interrupt initialization and configuration.\n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n#include \"exit.h\"\n\n/**\n * @brief       External interrupt service routine\n * @param       arg: Interrupt pin number\n * @note        IRAM_ATTR: The IRAM_ATTR attribute is used to store the interrupt handler in internal RAM to reduce latency\n * @retval      None\n */\nstatic void IRAM_ATTR exit_gpio_isr_handler(void *arg)\n{\n    uint32_t gpio_num = (uint32_t) arg;\n\n    if (gpio_num == BOOT_INT_GPIO_PIN)\n    {\n        led_toggle();\n    }\n}\n\n/**\n * @brief       External interrupt initialization function\n * @param       None\n * @retval      None\n */\nvoid exit_init(void)\n{\n    gpio_config_t gpio_init_struct;\n\n    /* Configure BOOT pin and external interrupt */\n    gpio_init_struct.mode = GPIO_MODE_INPUT;                    /* Set as input mode */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_ENABLE;           /* Enable pull-up */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_DISABLE;      /* Disable pull-down */\n    gpio_init_struct.intr_type = GPIO_INTR_NEGEDGE;             /* Trigger on falling edge */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; BOOT_INT_GPIO_PIN;  /* Configure BOOT key pin */\n    gpio_config(&amp;gpio_init_struct);                             /* Apply configuration */\n\n    /* Register interrupt service */\n    gpio_install_isr_service(0);\n\n    /* Set GPIO interrupt callback function */\n    gpio_isr_handler_add(BOOT_INT_GPIO_PIN, exit_gpio_isr_handler, (void*) BOOT_INT_GPIO_PIN);\n\n    /* Enable GPIO interrupt */\n    gpio_intr_enable(BOOT_INT_GPIO_PIN);\n}\n</code></pre>"},{"location":"INTERFACING/KEY/key-itr/#test-program","title":"Test Program","text":"<p>Replace the code in the <code>main.c</code> file with the following code:</p> <pre><code>/**\n * @file main.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief \n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"rgb.h\"\n#include \"exit.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    // BSP\n    led_init();\n    rgb_init();\n    // key_init();\n    exit_init();\n\n    while (1)\n    {\n        vTaskDelay(10);\n\n    }\n\n}\n</code></pre>"},{"location":"INTERFACING/KEY/key/","title":"KEY","text":""},{"location":"INTERFACING/KEY/key/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we will talk about the onboard key on the DNESP32S3M development board.</p> <p>Alientek DNESP32S3M development board has a key button (boot) for user input. Before reset, BOOT can be used to choose startup mode. After reset, BOOT can be used as normal key.</p> <p></p>"},{"location":"INTERFACING/KEY/key/#overview","title":"Overview","text":"<p>In the project, we created a new directory named <code>KEY</code> under the <code>components</code> directory to store the key driver code, including the <code>key.h</code> and <code>key.c</code> files.</p>"},{"location":"INTERFACING/KEY/key/#pin-configuration","title":"Pin Configuration","text":"<p>According to the schematic, the onboard key is connected to GPIO0.</p> <p></p>"},{"location":"INTERFACING/KEY/key/#code","title":"Code","text":""},{"location":"INTERFACING/KEY/key/#keyh","title":"KEY.h","text":"<pre><code>/**\n * @file key.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This file is for the onboard key.\n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __KEY_H__\n#define __KEY_H__\n\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"driver/gpio.h\"\n\n/* Pin Definition */\n#define BOOT_GPIO_PIN   GPIO_NUM_0\n\n/* IO Operation */\n#define BOOT            gpio_get_level(BOOT_GPIO_PIN)\n\n/* Key Press Definition */\n#define BOOT_PRES       1       /* BOOT key pressed */\n\n/* Function declarations */\n/**\n * @brief       Initialize the key\n * @param       None\n * @retval      None\n */\nvoid key_init(void);            /* Initialize the key */\n\n/**\n * @brief       Key scan function\n * @param       mode: 0 / 1, with the following meanings:\n *              0: Non-continuous press (returns key value only on the first press.\n *                 Must release and press again to return a value).\n *              1: Continuous press supported (returns key value each time the function is called while the key is pressed).\n * @retval      Key value, defined as follows:\n *              BOOT_PRES, 1, BOOT key pressed\n */\nuint8_t key_scan(uint8_t mode); /* Key scan function */\n\n#endif\n</code></pre>"},{"location":"INTERFACING/KEY/key/#keyc","title":"KEY.c","text":"<pre><code>/**\n * @file key.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This file is for the onboard key.\n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n#include \"key.h\"\n\n/**\n * @brief       Initialize the key\n * @param       None\n * @retval      None\n */\nvoid key_init(void)\n{\n    gpio_config_t gpio_init_struct;\n\n    gpio_init_struct.intr_type = GPIO_INTR_DISABLE;         /* Disable pin interrupt */\n    gpio_init_struct.mode = GPIO_MODE_INPUT;                /* Input mode */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_ENABLE;       /* Enable pull-up */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_DISABLE;  /* Disable pull-down */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; BOOT_GPIO_PIN;  /* BOOT key pin */\n    gpio_config(&amp;gpio_init_struct);                         /* Configure and enable */\n}\n\n/**\n * @brief       Key scan function\n * @param       mode: 0 / 1, with the following meanings:\n *              0: Non-continuous press (returns key value only on the first press.\n *                 Must release and press again to return a value).\n *              1: Continuous press supported (returns key value each time the function is called while the key is pressed).\n * @retval      Key value, defined as follows:\n *              BOOT_PRES, 1, BOOT key pressed\n */\nuint8_t key_scan(uint8_t mode)\n{\n    uint8_t keyval = 0;\n    static uint8_t key_boot = 1;    /* Key release flag */\n\n    if(mode)\n    {\n        key_boot = 1;\n    }\n\n    if (key_boot &amp;&amp; (BOOT == 0))    /* Key release flag is 1 and any key is pressed */\n    {\n        vTaskDelay(10);             /* Debounce */\n        key_boot = 0;\n\n        if (BOOT == 0)\n        {\n            keyval = BOOT_PRES;\n        }\n    }\n    else if (BOOT == 1)\n    {\n        key_boot = 1;\n    }\n\n    return keyval;                  /* Return key value */\n}\n</code></pre>"},{"location":"INTERFACING/KEY/key/#test-program","title":"Test Program","text":"<p>Replace the code in the <code>main.c</code> file with the following code:</p> <pre><code>/**\n * @file main.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief \n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"key.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    uint8_t key;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    // BSP\n    led_init();\n    key_init();\n\n    while (1)\n    {\n        key = key_scan(0);\n\n        switch(key)\n        {\n            case BOOT_PRES:\n                led_toggle();\n                break;\n            default:\n                break;\n        }\n\n        vTaskDelay(10);\n\n    }\n\n}\n</code></pre>"},{"location":"INTERFACING/LCD/lcd/","title":"LCD","text":""},{"location":"INTERFACING/LCD/lcd/#esp32s3-minimal-system-board-with-096-inch-hd-ips-lcd-display","title":"ESP32S3 Minimal System Board with 0.96-Inch HD IPS LCD Display","text":"<p>The onboard 0.96-inch HD IPS LCD display has a resolution of 160x80 and supports 16-bit true color display. The display uses the ST7735S driver chip with built-in RAM, eliminating the need for external drivers or memory. The ESP32S3 chip can drive this display via the SPI interface. In 4-wire SPI communication mode, the 0.96-inch LCD screen requires only four signal lines (CS, SCL, SDA, RS (DC)).</p> <p> </p> <p>The screen connects to the PCB circuit via 13 pins. The pin details are as follows:</p> No. Name Description 1 TP0 NC 2 TP1 NC 3 SDA SPI communication MOSI signal line 4 SCL SPI communication SCK signal line 5 RS Command/Data signal line (Low: Command; High: Data) 6 RES Hardware reset pin (active low) 7 CS SPI communication chip select signal (active low) 8 GND Ground 9 NC NC 10 VCC 3.3V power supply 11 LEDK LCD backlight control pin (cathode) 12 LEDA LCD backlight control pin (anode) 13 GND Ground <p> </p> <p>From the above diagrams, it is evident that the write cycle of the 0.96-inch LCD module in 4-wire SPI mode is very fast (TSCYCW = 66ns), whereas the read cycle is relatively slower (TSCYCR = 150ns).</p> <p>The ST7735S LCD driver stores display data directly in its onboard RAM, which has a capacity of 132x162x18 bits. The ST7735S chip automatically displays data from its RAM to the LCD without an external clock, minimizing power consumption.</p>"},{"location":"INTERFACING/LCD/lcd/#hardware-reset-requirements","title":"Hardware Reset Requirements","text":"<p>Before initializing the display module, the RST pin must be used to perform a hardware reset. The RST pin should be pulled low for at least 10 microseconds. After pulling RST high to end the reset, a delay of 120 milliseconds is required before data can be transmitted to the display module.</p>"},{"location":"INTERFACING/LCD/lcd/#backlight-control","title":"Backlight Control","text":"<p>The LEDK pin controls the LCD backlight of the display module. This pin has a built-in pull-down resistor. The backlight is off when the LEDK pin is high or floating and turns on when the LEDK pin is pulled low.</p>"},{"location":"INTERFACING/LCD/lcd/#color-depth","title":"Color Depth","text":"<p>The ST7735S supports a maximum color depth of 18 bits (262K colors), but 16-bit color depth (65K colors) is generally used for maximum speed. In 16-bit mode, the RGB565 format is used to transmit and store color data, as shown below:</p> <ul> <li>High 5 bits represent red.</li> <li>Middle 6 bits represent green.</li> <li>Low 5 bits represent blue.</li> <li>Larger values correspond to darker colors.</li> </ul>"},{"location":"INTERFACING/LCD/lcd/#continuous-ram-readwrite-and-scan-direction-configuration","title":"Continuous RAM Read/Write and Scan Direction Configuration","text":"<p>The ST7735S allows continuous read/write operations in its RAM for color data on the LCD. The scan direction (RAM auto-increment direction) can be configured using command <code>0x36</code>, as shown below:</p> <p></p> <p>Command <code>0x36</code> configures six parameters, but only <code>MY</code>, <code>MX</code>, and <code>MV</code> are relevant for setting the LCD scan direction:</p> MY MX MV LCD Scan Direction (RAM Auto-Increment Direction) 0 0 0 Left to right, top to bottom 1 0 0 Left to right, bottom to top 0 1 0 Right to left, top to bottom 1 1 0 Right to left, bottom to top 0 0 1 Top to bottom, left to right 1 0 1 Bottom to top, left to right 0 1 1 Top to bottom, right to left 1 1 1 Bottom to top, right to left <p>This flexibility allows efficient content rendering, such as displaying BMP images that decode data starting from the bottom-left corner. By setting the LCD scan direction appropriately, data can be filled into the LCD without repeatedly setting coordinates, improving display speed.</p>"},{"location":"INTERFACING/LCD/lcd/#setting-address-for-color-data","title":"Setting Address for Color Data","text":"<p>Before writing color data to the ST7735S, the address must be set to specify which pixel on the LCD will receive the color data. Commands <code>0x2A</code> and <code>0x2B</code> are used to set the column and row addresses, respectively:</p> <ul> <li> <p>Command <code>0x2A</code>: </p> </li> <li> <p>Command <code>0x2B</code>: </p> </li> </ul> <p>With the default LCD scan direction (left to right, top to bottom), the <code>XS</code> and <code>XE</code> parameters of command <code>0x2A</code> and the <code>YS</code> and <code>YE</code> parameters of command <code>0x2B</code> define a region on the LCD. During continuous read/write operations, the ST7735S reads/writes color data in this region following the configured scan direction.</p>"},{"location":"INTERFACING/LCD/lcd/#code","title":"Code","text":""},{"location":"INTERFACING/LCD/lcd/#lcdfonth","title":"lcdfont.h","text":"<pre><code>/**\n * @file lcdfont.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief lcd font\n * @version 1.0\n * @date 2024-11-18\n * @ref Alientek LCD Driver\n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __LCDFONT_H__\n#define __LCDFONT_H__\n\n/* Common ASCII Table\n * Offset: 32\n * ASCII Character Set: !\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\n * PC2LCD2002 Modulation Setting: Negative Code + Column-wise + Forward Direction + C51 Format\n * Total: 4 Character Sets (12x12, 16x16, 24x24, and 32x32). Users can add other resolutions as needed.\n * Bytes per Character: (size/8 + ((size%8) ? 1 : 0)) * (size/2), where size is the dot matrix size (e.g., 12/16/24/32...) defined when generating the font library.\n */\n\n\n/* 12x12 ASCII Character Set Dot Matrix */\nconst unsigned char asc2_1206[95][12]={\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\" \",0*/\n{0x00,0x00,0x00,0x00,0x3F,0x40,0x00,0x00,0x00,0x00,0x00,0x00},/*\"!\",1*/\n{0x00,0x00,0x30,0x00,0x40,0x00,0x30,0x00,0x40,0x00,0x00,0x00},/*\"\"\",2*/\n{0x09,0x00,0x0B,0xC0,0x3D,0x00,0x0B,0xC0,0x3D,0x00,0x09,0x00},/*\"#\",3*/\n{0x18,0xC0,0x24,0x40,0x7F,0xE0,0x22,0x40,0x31,0x80,0x00,0x00},/*\"$\",4*/\n{0x18,0x00,0x24,0xC0,0x1B,0x00,0x0D,0x80,0x32,0x40,0x01,0x80},/*\"%\",5*/\n{0x03,0x80,0x1C,0x40,0x27,0x40,0x1C,0x80,0x07,0x40,0x00,0x40},/*\"&amp;\",6*/\n{0x10,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"'\",7*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x80,0x20,0x40,0x40,0x20},/*\"(\",8*/\n{0x00,0x00,0x40,0x20,0x20,0x40,0x1F,0x80,0x00,0x00,0x00,0x00},/*\")\",9*/\n{0x09,0x00,0x06,0x00,0x1F,0x80,0x06,0x00,0x09,0x00,0x00,0x00},/*\"*\",10*/\n{0x04,0x00,0x04,0x00,0x3F,0x80,0x04,0x00,0x04,0x00,0x00,0x00},/*\"+\",11*/\n{0x00,0x10,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\",\",12*/\n{0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x00,0x00},/*\"-\",13*/\n{0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\".\",14*/\n{0x00,0x20,0x01,0xC0,0x06,0x00,0x38,0x00,0x40,0x00,0x00,0x00},/*\"/\",15*/\n{0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00},/*\"0\",16*/\n{0x00,0x00,0x10,0x40,0x3F,0xC0,0x00,0x40,0x00,0x00,0x00,0x00},/*\"1\",17*/\n{0x18,0xC0,0x21,0x40,0x22,0x40,0x24,0x40,0x18,0x40,0x00,0x00},/*\"2\",18*/\n{0x10,0x80,0x20,0x40,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00},/*\"3\",19*/\n{0x02,0x00,0x0D,0x00,0x11,0x00,0x3F,0xC0,0x01,0x40,0x00,0x00},/*\"4\",20*/\n{0x3C,0x80,0x24,0x40,0x24,0x40,0x24,0x40,0x23,0x80,0x00,0x00},/*\"5\",21*/\n{0x1F,0x80,0x24,0x40,0x24,0x40,0x34,0x40,0x03,0x80,0x00,0x00},/*\"6\",22*/\n{0x30,0x00,0x20,0x00,0x27,0xC0,0x38,0x00,0x20,0x00,0x00,0x00},/*\"7\",23*/\n{0x1B,0x80,0x24,0x40,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00},/*\"8\",24*/\n{0x1C,0x00,0x22,0xC0,0x22,0x40,0x22,0x40,0x1F,0x80,0x00,0x00},/*\"9\",25*/\n{0x00,0x00,0x00,0x00,0x08,0x40,0x00,0x00,0x00,0x00,0x00,0x00},/*\":\",26*/\n{0x00,0x00,0x00,0x00,0x04,0x60,0x00,0x00,0x00,0x00,0x00,0x00},/*\";\",27*/\n{0x00,0x00,0x04,0x00,0x0A,0x00,0x11,0x00,0x20,0x80,0x40,0x40},/*\"&lt;\",28*/\n{0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x00,0x00},/*\"=\",29*/\n{0x00,0x00,0x40,0x40,0x20,0x80,0x11,0x00,0x0A,0x00,0x04,0x00},/*\"&gt;\",30*/\n{0x18,0x00,0x20,0x00,0x23,0x40,0x24,0x00,0x18,0x00,0x00,0x00},/*\"?\",31*/\n{0x1F,0x80,0x20,0x40,0x27,0x40,0x29,0x40,0x1F,0x40,0x00,0x00},/*\"@\",32*/\n{0x00,0x40,0x07,0xC0,0x39,0x00,0x0F,0x00,0x01,0xC0,0x00,0x40},/*\"A\",33*/\n{0x20,0x40,0x3F,0xC0,0x24,0x40,0x24,0x40,0x1B,0x80,0x00,0x00},/*\"B\",34*/\n{0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x30,0x80,0x00,0x00},/*\"C\",35*/\n{0x20,0x40,0x3F,0xC0,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00},/*\"D\",36*/\n{0x20,0x40,0x3F,0xC0,0x24,0x40,0x2E,0x40,0x30,0xC0,0x00,0x00},/*\"E\",37*/\n{0x20,0x40,0x3F,0xC0,0x24,0x40,0x2E,0x00,0x30,0x00,0x00,0x00},/*\"F\",38*/\n{0x0F,0x00,0x10,0x80,0x20,0x40,0x22,0x40,0x33,0x80,0x02,0x00},/*\"G\",39*/\n{0x20,0x40,0x3F,0xC0,0x04,0x00,0x04,0x00,0x3F,0xC0,0x20,0x40},/*\"H\",40*/\n{0x20,0x40,0x20,0x40,0x3F,0xC0,0x20,0x40,0x20,0x40,0x00,0x00},/*\"I\",41*/\n{0x00,0x60,0x20,0x20,0x20,0x20,0x3F,0xC0,0x20,0x00,0x20,0x00},/*\"J\",42*/\n{0x20,0x40,0x3F,0xC0,0x24,0x40,0x0B,0x00,0x30,0xC0,0x20,0x40},/*\"K\",43*/\n{0x20,0x40,0x3F,0xC0,0x20,0x40,0x00,0x40,0x00,0x40,0x00,0xC0},/*\"L\",44*/\n{0x3F,0xC0,0x3C,0x00,0x03,0xC0,0x3C,0x00,0x3F,0xC0,0x00,0x00},/*\"M\",45*/\n{0x20,0x40,0x3F,0xC0,0x0C,0x40,0x23,0x00,0x3F,0xC0,0x20,0x00},/*\"N\",46*/\n{0x1F,0x80,0x20,0x40,0x20,0x40,0x20,0x40,0x1F,0x80,0x00,0x00},/*\"O\",47*/\n{0x20,0x40,0x3F,0xC0,0x24,0x40,0x24,0x00,0x18,0x00,0x00,0x00},/*\"P\",48*/\n{0x1F,0x80,0x21,0x40,0x21,0x40,0x20,0xE0,0x1F,0xA0,0x00,0x00},/*\"Q\",49*/\n{0x20,0x40,0x3F,0xC0,0x24,0x40,0x26,0x00,0x19,0xC0,0x00,0x40},/*\"R\",50*/\n{0x18,0xC0,0x24,0x40,0x24,0x40,0x22,0x40,0x31,0x80,0x00,0x00},/*\"S\",51*/\n{0x30,0x00,0x20,0x40,0x3F,0xC0,0x20,0x40,0x30,0x00,0x00,0x00},/*\"T\",52*/\n{0x20,0x00,0x3F,0x80,0x00,0x40,0x00,0x40,0x3F,0x80,0x20,0x00},/*\"U\",53*/\n{0x20,0x00,0x3E,0x00,0x01,0xC0,0x07,0x00,0x38,0x00,0x20,0x00},/*\"V\",54*/\n{0x38,0x00,0x07,0xC0,0x3C,0x00,0x07,0xC0,0x38,0x00,0x00,0x00},/*\"W\",55*/\n{0x20,0x40,0x39,0xC0,0x06,0x00,0x39,0xC0,0x20,0x40,0x00,0x00},/*\"X\",56*/\n{0x20,0x00,0x38,0x40,0x07,0xC0,0x38,0x40,0x20,0x00,0x00,0x00},/*\"Y\",57*/\n{0x30,0x40,0x21,0xC0,0x26,0x40,0x38,0x40,0x20,0xC0,0x00,0x00},/*\"Z\",58*/\n{0x00,0x00,0x00,0x00,0x7F,0xE0,0x40,0x20,0x40,0x20,0x00,0x00},/*\"[\",59*/\n{0x00,0x00,0x70,0x00,0x0C,0x00,0x03,0x80,0x00,0x40,0x00,0x00},/*\"\\\",60*/\n{0x00,0x00,0x40,0x20,0x40,0x20,0x7F,0xE0,0x00,0x00,0x00,0x00},/*\"]\",61*/\n{0x00,0x00,0x20,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x00,0x00},/*\"^\",62*/\n{0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10},/*\"_\",63*/\n{0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"`\",64*/\n{0x00,0x00,0x02,0x80,0x05,0x40,0x05,0x40,0x03,0xC0,0x00,0x40},/*\"a\",65*/\n{0x20,0x00,0x3F,0xC0,0x04,0x40,0x04,0x40,0x03,0x80,0x00,0x00},/*\"b\",66*/\n{0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x40,0x06,0x40,0x00,0x00},/*\"c\",67*/\n{0x00,0x00,0x03,0x80,0x04,0x40,0x24,0x40,0x3F,0xC0,0x00,0x40},/*\"d\",68*/\n{0x00,0x00,0x03,0x80,0x05,0x40,0x05,0x40,0x03,0x40,0x00,0x00},/*\"e\",69*/\n{0x00,0x00,0x04,0x40,0x1F,0xC0,0x24,0x40,0x24,0x40,0x20,0x00},/*\"f\",70*/\n{0x00,0x00,0x02,0xE0,0x05,0x50,0x05,0x50,0x06,0x50,0x04,0x20},/*\"g\",71*/\n{0x20,0x40,0x3F,0xC0,0x04,0x40,0x04,0x00,0x03,0xC0,0x00,0x40},/*\"h\",72*/\n{0x00,0x00,0x04,0x40,0x27,0xC0,0x00,0x40,0x00,0x00,0x00,0x00},/*\"i\",73*/\n{0x00,0x10,0x00,0x10,0x04,0x10,0x27,0xE0,0x00,0x00,0x00,0x00},/*\"j\",74*/\n{0x20,0x40,0x3F,0xC0,0x01,0x40,0x07,0x00,0x04,0xC0,0x04,0x40},/*\"k\",75*/\n{0x20,0x40,0x20,0x40,0x3F,0xC0,0x00,0x40,0x00,0x40,0x00,0x00},/*\"l\",76*/\n{0x07,0xC0,0x04,0x00,0x07,0xC0,0x04,0x00,0x03,0xC0,0x00,0x00},/*\"m\",77*/\n{0x04,0x40,0x07,0xC0,0x04,0x40,0x04,0x00,0x03,0xC0,0x00,0x40},/*\"n\",78*/\n{0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x40,0x03,0x80,0x00,0x00},/*\"o\",79*/\n{0x04,0x10,0x07,0xF0,0x04,0x50,0x04,0x40,0x03,0x80,0x00,0x00},/*\"p\",80*/\n{0x00,0x00,0x03,0x80,0x04,0x40,0x04,0x50,0x07,0xF0,0x00,0x10},/*\"q\",81*/\n{0x04,0x40,0x07,0xC0,0x02,0x40,0x04,0x00,0x04,0x00,0x00,0x00},/*\"r\",82*/\n{0x00,0x00,0x06,0x40,0x05,0x40,0x05,0x40,0x04,0xC0,0x00,0x00},/*\"s\",83*/\n{0x00,0x00,0x04,0x00,0x1F,0x80,0x04,0x40,0x00,0x40,0x00,0x00},/*\"t\",84*/\n{0x04,0x00,0x07,0x80,0x00,0x40,0x04,0x40,0x07,0xC0,0x00,0x40},/*\"u\",85*/\n{0x04,0x00,0x07,0x00,0x04,0xC0,0x01,0x80,0x06,0x00,0x04,0x00},/*\"v\",86*/\n{0x06,0x00,0x01,0xC0,0x07,0x00,0x01,0xC0,0x06,0x00,0x00,0x00},/*\"w\",87*/\n{0x04,0x40,0x06,0xC0,0x01,0x00,0x06,0xC0,0x04,0x40,0x00,0x00},/*\"x\",88*/\n{0x04,0x10,0x07,0x10,0x04,0xE0,0x01,0x80,0x06,0x00,0x04,0x00},/*\"y\",89*/\n{0x00,0x00,0x04,0x40,0x05,0xC0,0x06,0x40,0x04,0x40,0x00,0x00},/*\"z\",90*/\n{0x00,0x00,0x00,0x00,0x04,0x00,0x7B,0xE0,0x40,0x20,0x00,0x00},/*\"{\",91*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF0,0x00,0x00,0x00,0x00},/*\"|\",92*/\n{0x00,0x00,0x40,0x20,0x7B,0xE0,0x04,0x00,0x00,0x00,0x00,0x00},/*\"}\",93*/\n{0x40,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x40,0x00},/*\"~\",94*/\n};\n\n/* 16x16 ASCII Character Set Dot Matrix */\nconst unsigned char asc2_1608[95][16]={ \n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\" \",0*/\n{0x00,0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x10,0x10,0x00,0x00},/*\"!\",1*/\n{0x00,0x12,0x24,0x24,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"\"\",2*/\n{0x00,0x00,0x00,0x12,0x12,0x12,0x7E,0x24,0x24,0x24,0x7E,0x24,0x24,0x24,0x00,0x00},/*\"#\",3*/\n{0x00,0x00,0x08,0x3C,0x4A,0x4A,0x48,0x38,0x0C,0x0A,0x0A,0x4A,0x4A,0x3C,0x08,0x08},/*\"$\",4*/\n{0x00,0x00,0x00,0x44,0xA4,0xA8,0xA8,0xB0,0x54,0x1A,0x2A,0x2A,0x4A,0x44,0x00,0x00},/*\"%\",5*/\n{0x00,0x00,0x00,0x30,0x48,0x48,0x48,0x50,0x6E,0xA4,0x94,0x98,0x89,0x76,0x00,0x00},/*\"&amp;\",6*/\n{0x00,0x60,0x20,0x20,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"'\",7*/\n{0x00,0x02,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x02,0x00},/*\"(\",8*/\n{0x00,0x40,0x20,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x10,0x20,0x40,0x00},/*\")\",9*/\n{0x00,0x00,0x00,0x00,0x10,0x10,0xD6,0x38,0x38,0xD6,0x10,0x10,0x00,0x00,0x00,0x00},/*\"*\",10*/\n{0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x7F,0x08,0x08,0x08,0x00,0x00,0x00,0x00},/*\"+\",11*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x20,0x20,0x40},/*\",\",12*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"-\",13*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00,0x00},/*\".\",14*/\n{0x00,0x00,0x02,0x04,0x04,0x04,0x08,0x08,0x10,0x10,0x10,0x20,0x20,0x40,0x40,0x00},/*\"/\",15*/\n{0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00},/*\"0\",16*/\n{0x00,0x00,0x00,0x08,0x38,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00},/*\"1\",17*/\n{0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x02,0x04,0x08,0x10,0x20,0x42,0x7E,0x00,0x00},/*\"2\",18*/\n{0x00,0x00,0x00,0x3C,0x42,0x42,0x02,0x04,0x18,0x04,0x02,0x42,0x42,0x3C,0x00,0x00},/*\"3\",19*/\n{0x00,0x00,0x00,0x04,0x0C,0x0C,0x14,0x24,0x24,0x44,0x7F,0x04,0x04,0x1F,0x00,0x00},/*\"4\",20*/\n{0x00,0x00,0x00,0x7E,0x40,0x40,0x40,0x78,0x44,0x02,0x02,0x42,0x44,0x38,0x00,0x00},/*\"5\",21*/\n{0x00,0x00,0x00,0x18,0x24,0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x22,0x1C,0x00,0x00},/*\"6\",22*/\n{0x00,0x00,0x00,0x7E,0x42,0x04,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x00,0x00},/*\"7\",23*/\n{0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x24,0x18,0x24,0x42,0x42,0x42,0x3C,0x00,0x00},/*\"8\",24*/\n{0x00,0x00,0x00,0x38,0x44,0x42,0x42,0x42,0x46,0x3A,0x02,0x02,0x24,0x18,0x00,0x00},/*\"9\",25*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00},/*\":\",26*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x10},/*\";\",27*/\n{0x00,0x00,0x00,0x02,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x02,0x00,0x00},/*\"&lt;\",28*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00},/*\"=\",29*/\n{0x00,0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x02,0x04,0x08,0x10,0x20,0x40,0x00,0x00},/*\"&gt;\",30*/\n{0x00,0x00,0x00,0x3C,0x42,0x42,0x62,0x04,0x08,0x08,0x08,0x00,0x18,0x18,0x00,0x00},/*\"?\",31*/\n{0x00,0x00,0x00,0x38,0x44,0x5A,0xAA,0xAA,0xAA,0xAA,0xAA,0x5C,0x42,0x3C,0x00,0x00},/*\"@\",32*/\n{0x00,0x00,0x00,0x10,0x10,0x18,0x28,0x28,0x24,0x3C,0x44,0x42,0x42,0xE7,0x00,0x00},/*\"A\",33*/\n{0x00,0x00,0x00,0xF8,0x44,0x44,0x44,0x78,0x44,0x42,0x42,0x42,0x44,0xF8,0x00,0x00},/*\"B\",34*/\n{0x00,0x00,0x00,0x3E,0x42,0x42,0x80,0x80,0x80,0x80,0x80,0x42,0x44,0x38,0x00,0x00},/*\"C\",35*/\n{0x00,0x00,0x00,0xF8,0x44,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x44,0xF8,0x00,0x00},/*\"D\",36*/\n{0x00,0x00,0x00,0xFC,0x42,0x48,0x48,0x78,0x48,0x48,0x40,0x42,0x42,0xFC,0x00,0x00},/*\"E\",37*/\n{0x00,0x00,0x00,0xFC,0x42,0x48,0x48,0x78,0x48,0x48,0x40,0x40,0x40,0xE0,0x00,0x00},/*\"F\",38*/\n{0x00,0x00,0x00,0x3C,0x44,0x44,0x80,0x80,0x80,0x8E,0x84,0x44,0x44,0x38,0x00,0x00},/*\"G\",39*/\n{0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0xE7,0x00,0x00},/*\"H\",40*/\n{0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},/*\"I\",41*/\n{0x00,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x88,0xF0},/*\"J\",42*/\n{0x00,0x00,0x00,0xEE,0x44,0x48,0x50,0x70,0x50,0x48,0x48,0x44,0x44,0xEE,0x00,0x00},/*\"K\",43*/\n{0x00,0x00,0x00,0xE0,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x42,0xFE,0x00,0x00},/*\"L\",44*/\n{0x00,0x00,0x00,0xEE,0x6C,0x6C,0x6C,0x6C,0x6C,0x54,0x54,0x54,0x54,0xD6,0x00,0x00},/*\"M\",45*/\n{0x00,0x00,0x00,0xC7,0x62,0x62,0x52,0x52,0x4A,0x4A,0x4A,0x46,0x46,0xE2,0x00,0x00},/*\"N\",46*/\n{0x00,0x00,0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x44,0x38,0x00,0x00},/*\"O\",47*/\n{0x00,0x00,0x00,0xFC,0x42,0x42,0x42,0x42,0x7C,0x40,0x40,0x40,0x40,0xE0,0x00,0x00},/*\"P\",48*/\n{0x00,0x00,0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x82,0x82,0xB2,0x4C,0x38,0x06,0x00},/*\"Q\",49*/\n{0x00,0x00,0x00,0xFC,0x42,0x42,0x42,0x7C,0x48,0x48,0x44,0x44,0x42,0xE3,0x00,0x00},/*\"R\",50*/\n{0x00,0x00,0x00,0x3E,0x42,0x42,0x40,0x20,0x18,0x04,0x02,0x42,0x42,0x7C,0x00,0x00},/*\"S\",51*/\n{0x00,0x00,0x00,0xFE,0x92,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00},/*\"T\",52*/\n{0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00},/*\"U\",53*/\n{0x00,0x00,0x00,0xE7,0x42,0x42,0x44,0x24,0x24,0x28,0x28,0x18,0x10,0x10,0x00,0x00},/*\"V\",54*/\n{0x00,0x00,0x00,0xD6,0x54,0x54,0x54,0x54,0x54,0x6C,0x28,0x28,0x28,0x28,0x00,0x00},/*\"W\",55*/\n{0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x18,0x24,0x24,0x42,0xE7,0x00,0x00},/*\"X\",56*/\n{0x00,0x00,0x00,0xEE,0x44,0x44,0x28,0x28,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00},/*\"Y\",57*/\n{0x00,0x00,0x00,0x7E,0x84,0x04,0x08,0x08,0x10,0x20,0x20,0x42,0x42,0xFC,0x00,0x00},/*\"Z\",58*/\n{0x00,0x1E,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1E,0x00},/*\"[\",59*/\n{0x00,0x00,0x40,0x20,0x20,0x20,0x10,0x10,0x10,0x08,0x08,0x04,0x04,0x04,0x02,0x02},/*\"\\\",60*/\n{0x00,0x78,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x78,0x00},/*\"]\",61*/\n{0x00,0x18,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"^\",62*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF},/*\"_\",63*/\n{0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"`\",64*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x0C,0x34,0x44,0x4C,0x36,0x00,0x00},/*\"a\",65*/\n{0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x58,0x64,0x42,0x42,0x42,0x64,0x58,0x00,0x00},/*\"b\",66*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x22,0x40,0x40,0x40,0x22,0x1C,0x00,0x00},/*\"c\",67*/\n{0x00,0x00,0x00,0x00,0x06,0x02,0x02,0x3E,0x42,0x42,0x42,0x42,0x46,0x3B,0x00,0x00},/*\"d\",68*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x7E,0x40,0x42,0x3C,0x00,0x00},/*\"e\",69*/\n{0x00,0x00,0x00,0x00,0x0C,0x12,0x10,0x7C,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},/*\"f\",70*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x44,0x44,0x38,0x40,0x3C,0x42,0x42,0x3C},/*\"g\",71*/\n{0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x42,0xE7,0x00,0x00},/*\"h\",72*/\n{0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},/*\"i\",73*/\n{0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x1C,0x04,0x04,0x04,0x04,0x04,0x04,0x44,0x78},/*\"j\",74*/\n{0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x4E,0x48,0x50,0x70,0x48,0x44,0xEE,0x00,0x00},/*\"k\",75*/\n{0x00,0x00,0x00,0x10,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},/*\"l\",76*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x49,0x49,0x49,0x49,0x49,0xED,0x00,0x00},/*\"m\",77*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0x62,0x42,0x42,0x42,0x42,0xE7,0x00,0x00},/*\"n\",78*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00},/*\"o\",79*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD8,0x64,0x42,0x42,0x42,0x64,0x58,0x40,0xE0},/*\"p\",80*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1A,0x26,0x42,0x42,0x42,0x26,0x1A,0x02,0x07},/*\"q\",81*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x32,0x20,0x20,0x20,0x20,0xF8,0x00,0x00},/*\"r\",82*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x42,0x40,0x3C,0x02,0x42,0x7C,0x00,0x00},/*\"s\",83*/\n{0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x7C,0x10,0x10,0x10,0x10,0x12,0x0C,0x00,0x00},/*\"t\",84*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC6,0x42,0x42,0x42,0x42,0x46,0x3B,0x00,0x00},/*\"u\",85*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x44,0x44,0x28,0x28,0x10,0x10,0x00,0x00},/*\"v\",86*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDB,0x89,0x4A,0x5A,0x54,0x24,0x24,0x00,0x00},/*\"w\",87*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x24,0x18,0x18,0x18,0x24,0x6E,0x00,0x00},/*\"x\",88*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x10,0x10,0x60},/*\"y\",89*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x44,0x08,0x10,0x10,0x22,0x7E,0x00,0x00},/*\"z\",90*/\n{0x00,0x03,0x04,0x04,0x04,0x04,0x04,0x04,0x08,0x04,0x04,0x04,0x04,0x04,0x03,0x00},/*\"{\",91*/\n{0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08},/*\"|\",92*/\n{0x00,0xC0,0x20,0x20,0x20,0x20,0x20,0x20,0x10,0x20,0x20,0x20,0x20,0x20,0xC0,0x00},/*\"}\",93*/\n{0x20,0x5A,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"~\",94*/\n};  \n\n/* 24x24 ASCII Character Set Dot Matrix */\nconst unsigned char asc2_2412[95][48]={\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\" \",0*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"!\",1*/\n{0x00,0x00,0x00,0x00,0x06,0x60,0x06,0x60,0x0C,0xC0,0x19,0x80,0x11,0x00,0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"\"\",2*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x40,0x08,0x40,0x08,0x40,0x08,0x40,0x7F,0xE0,0x7F,0xE0,0x10,0x40,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x80,0x7F,0xE0,0x7F,0xE0,0x20,0x80,0x20,0x80,0x20,0x80,0x20,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"#\",3*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x02,0x00,0x0F,0x80,0x1A,0xC0,0x32,0xC0,0x33,0xC0,0x32,0x00,0x1A,0x00,0x0E,0x00,0x07,0x00,0x03,0x80,0x03,0x80,0x02,0xC0,0x32,0xC0,0x3A,0xC0,0x32,0xC0,0x12,0x80,0x0F,0x00,0x02,0x00,0x02,0x00,0x00,0x00},/*\"$\",4*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x80,0x50,0x80,0x89,0x00,0x89,0x00,0x89,0x00,0x8A,0x00,0x8A,0x00,0x5C,0x00,0x75,0xC0,0x05,0x40,0x0A,0x20,0x0A,0x20,0x12,0x20,0x12,0x20,0x12,0x20,0x21,0x40,0x21,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"%\",5*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x36,0x00,0x36,0x00,0x36,0x00,0x36,0x00,0x36,0x00,0x34,0x00,0x19,0xE0,0x38,0x80,0x58,0x80,0xCC,0x80,0xCC,0x80,0xC6,0x80,0xC7,0x00,0xC3,0x10,0x63,0x90,0x3C,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"&amp;\",6*/\n{0x00,0x00,0x00,0x00,0x30,0x00,0x38,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"'\",7*/\n{0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x01,0x00,0x02,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x00},/*\"(\",8*/\n{0x00,0x00,0x00,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x04,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x00,0x00},/*\")\",9*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x03,0x00,0x02,0x00,0x62,0x30,0x72,0xF0,0x0B,0x80,0x0F,0x80,0x7A,0xF0,0x62,0x30,0x02,0x00,0x02,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"*\",10*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x7F,0xF0,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"+\",11*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x38,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x20,0x00},/*\",\",12*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"-\",13*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\".\",14*/\n{0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x60,0x00,0x40,0x00,0xC0,0x00,0x80,0x00,0x80,0x01,0x00,0x01,0x00,0x02,0x00,0x02,0x00,0x06,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x30,0x00,0x20,0x00,0x60,0x00,0x40,0x00,0x00,0x00},/*\"/\",15*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x19,0x80,0x30,0xC0,0x30,0xC0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x30,0xC0,0x30,0xC0,0x19,0x80,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"0\",16*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x3E,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x3F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"1\",17*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x00,0x21,0x80,0x40,0xC0,0x60,0xC0,0x60,0xC0,0x00,0xC0,0x00,0x80,0x01,0x80,0x03,0x00,0x06,0x00,0x04,0x00,0x08,0x00,0x10,0x40,0x20,0x40,0x60,0x40,0x7F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"2\",18*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x00,0x63,0x00,0x61,0x80,0x61,0x80,0x01,0x80,0x01,0x80,0x03,0x00,0x0E,0x00,0x01,0x80,0x00,0x80,0x00,0xC0,0x00,0xC0,0x60,0xC0,0x60,0xC0,0x61,0x80,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"3\",19*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x03,0x80,0x05,0x80,0x05,0x80,0x09,0x80,0x11,0x80,0x11,0x80,0x21,0x80,0x41,0x80,0x7F,0xF0,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"4\",20*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xC0,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x2F,0x00,0x31,0x80,0x20,0xC0,0x00,0xC0,0x00,0xC0,0x60,0xC0,0x60,0xC0,0x41,0x80,0x21,0x80,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"5\",21*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x80,0x18,0xC0,0x30,0xC0,0x30,0x00,0x20,0x00,0x60,0x00,0x67,0x80,0x68,0xC0,0x70,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x20,0x60,0x30,0x40,0x18,0xC0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"6\",22*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xE0,0x30,0x60,0x20,0x40,0x20,0x80,0x00,0x80,0x00,0x80,0x01,0x00,0x01,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"7\",23*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x80,0x30,0xC0,0x60,0x60,0x60,0x60,0x60,0x60,0x30,0x40,0x38,0xC0,0x0F,0x00,0x13,0x80,0x30,0xC0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x30,0xC0,0x0F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"8\",24*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x30,0x80,0x30,0xC0,0x60,0x40,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0xE0,0x31,0x60,0x1E,0x60,0x00,0x60,0x00,0xC0,0x00,0xC0,0x30,0x80,0x31,0x80,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"9\",25*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\":\",26*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x02,0x00,0x04,0x00,0x04,0x00},/*\";\",27*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00},/*\"&lt;\",28*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"=\",29*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"&gt;\",30*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x18,0x60,0x20,0x30,0x20,0x30,0x30,0x30,0x30,0x30,0x00,0xE0,0x01,0x80,0x02,0x00,0x02,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"?\",31*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x18,0xC0,0x30,0x40,0x33,0xA0,0x26,0xA0,0x66,0xA0,0x65,0xA0,0x6D,0x20,0x6D,0x20,0x6D,0x20,0x6D,0x20,0x6D,0x40,0x27,0x80,0x30,0x20,0x30,0x40,0x18,0xC0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"@\",32*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x0A,0x00,0x0B,0x00,0x09,0x00,0x09,0x00,0x11,0x00,0x11,0x80,0x10,0x80,0x1F,0x80,0x20,0xC0,0x20,0xC0,0x20,0x40,0x40,0x40,0x40,0x60,0xF0,0xF0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"A\",33*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x31,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x31,0x80,0x3F,0x00,0x30,0xC0,0x30,0x40,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0xC0,0x7F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"B\",34*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x18,0xC0,0x30,0x60,0x30,0x20,0x20,0x20,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x20,0x30,0x20,0x30,0x40,0x18,0xC0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"C\",35*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x31,0x80,0x30,0xC0,0x30,0xC0,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0xC0,0x30,0xC0,0x31,0x80,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"D\",36*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xC0,0x60,0xC0,0x60,0x20,0x60,0x20,0x60,0x00,0x61,0x00,0x61,0x00,0x7F,0x00,0x61,0x00,0x61,0x00,0x61,0x00,0x60,0x00,0x60,0x20,0x60,0x20,0x60,0x40,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"E\",37*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xC0,0x60,0xC0,0x60,0x20,0x60,0x20,0x60,0x00,0x61,0x00,0x61,0x00,0x7F,0x00,0x61,0x00,0x61,0x00,0x61,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"F\",38*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x18,0x80,0x30,0x40,0x30,0x40,0x20,0x40,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x63,0xF0,0x60,0xC0,0x60,0xC0,0x30,0xC0,0x30,0xC0,0x18,0xC0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"G\",39*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xF0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x7F,0xE0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0xF0,0xF0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"H\",40*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xC0,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x3F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"I\",41*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xE0,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x63,0x00,0x66,0x00,0x3C,0x00},/*\"J\",42*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF3,0xC0,0x61,0x80,0x63,0x00,0x62,0x00,0x64,0x00,0x68,0x00,0x6C,0x00,0x74,0x00,0x76,0x00,0x62,0x00,0x63,0x00,0x61,0x00,0x61,0x80,0x60,0x80,0x60,0xC0,0xF1,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"K\",43*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x20,0x60,0x20,0x60,0x40,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"L\",44*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xE0,0x61,0xC0,0x61,0xC0,0x71,0xC0,0x71,0xC0,0x72,0xC0,0x72,0xC0,0x52,0xC0,0x5A,0xC0,0x5A,0xC0,0x5C,0xC0,0x4C,0xC0,0x4C,0xC0,0x4C,0xC0,0x48,0xC0,0xE1,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"M\",45*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x71,0xF0,0x30,0x40,0x38,0x40,0x38,0x40,0x2C,0x40,0x2C,0x40,0x26,0x40,0x26,0x40,0x22,0x40,0x23,0x40,0x21,0x40,0x21,0xC0,0x21,0xC0,0x20,0xC0,0x20,0xC0,0xF8,0x40,0x00,0x00,0x00,0x00,0x00,0x00},/*\"N\",46*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x19,0x80,0x30,0xC0,0x30,0x40,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x30,0x40,0x30,0xC0,0x19,0x80,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"O\",47*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x60,0xC0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x61,0xC0,0x7F,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"P\",48*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x19,0x80,0x30,0xC0,0x30,0x40,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x6E,0x60,0x32,0x40,0x33,0xC0,0x19,0x80,0x0F,0x00,0x01,0xE0,0x00,0xC0,0x00,0x00},/*\"Q\",49*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,0x60,0xC0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0xC0,0x7F,0x00,0x62,0x00,0x63,0x00,0x61,0x00,0x61,0x80,0x60,0xC0,0x60,0xC0,0x60,0x60,0xF0,0x70,0x00,0x00,0x00,0x00,0x00,0x00},/*\"R\",50*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x40,0x30,0xC0,0x60,0x40,0x60,0x40,0x60,0x00,0x70,0x00,0x3C,0x00,0x1F,0x00,0x07,0xC0,0x01,0xC0,0x00,0xE0,0x40,0x60,0x40,0x60,0x60,0x60,0x30,0xC0,0x0F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"S\",51*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x46,0x20,0x86,0x10,0x86,0x10,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"T\",52*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0xE0,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x30,0x40,0x18,0x80,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"U\",53*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xE0,0x60,0x40,0x20,0x80,0x20,0x80,0x30,0x80,0x30,0x80,0x11,0x00,0x11,0x00,0x19,0x00,0x19,0x00,0x0A,0x00,0x0A,0x00,0x0E,0x00,0x0C,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"V\",54*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEF,0x70,0x46,0x20,0x42,0x20,0x62,0x20,0x62,0x20,0x26,0x40,0x26,0x40,0x27,0x40,0x27,0x40,0x39,0x40,0x39,0x80,0x19,0x80,0x19,0x80,0x11,0x80,0x11,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"W\",55*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x79,0xE0,0x30,0x80,0x10,0x80,0x18,0x80,0x09,0x00,0x0D,0x00,0x06,0x00,0x04,0x00,0x06,0x00,0x06,0x00,0x0B,0x00,0x09,0x00,0x11,0x80,0x10,0x80,0x20,0xC0,0x71,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"X\",56*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xF0,0x60,0x20,0x20,0x40,0x30,0x40,0x10,0x80,0x18,0x80,0x1D,0x00,0x0D,0x00,0x0E,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"Y\",57*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xE0,0x30,0x40,0x60,0xC0,0x40,0x80,0x01,0x80,0x01,0x00,0x02,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x18,0x00,0x10,0x20,0x30,0x20,0x20,0x40,0x7F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"Z\",58*/\n{0x00,0x00,0x00,0x00,0x07,0xC0,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x07,0xC0,0x00,0x00},/*\"[\",59*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x04,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x03,0x00,0x01,0x00,0x01,0x00,0x00,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x20},/*\"\\\",60*/\n{0x00,0x00,0x00,0x00,0x3E,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x3E,0x00,0x00,0x00},/*\"]\",61*/\n{0x00,0x00,0x06,0x00,0x09,0x00,0x10,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"^\",62*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF0},/*\"_\",63*/\n{0x00,0x00,0x00,0x00,0x18,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"`\",64*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x80,0x30,0xC0,0x30,0xC0,0x00,0xC0,0x07,0xC0,0x38,0xC0,0x70,0xC0,0x60,0xC0,0x60,0xC0,0x71,0xD0,0x3E,0x70,0x00,0x00,0x00,0x00,0x00,0x00},/*\"a\",65*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x70,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x33,0x80,0x3C,0xC0,0x38,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x40,0x38,0xC0,0x27,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"b\",66*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x31,0x80,0x31,0x80,0x61,0x80,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x40,0x30,0x40,0x30,0x80,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"c\",67*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x03,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x1E,0xC0,0x31,0xC0,0x30,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x20,0xC0,0x31,0xE0,0x1E,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"d\",68*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x80,0x18,0xC0,0x10,0x40,0x30,0x60,0x30,0x60,0x3F,0xE0,0x30,0x00,0x30,0x00,0x18,0x20,0x18,0x40,0x07,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"e\",69*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x06,0x60,0x0C,0x60,0x0C,0x00,0x0C,0x00,0x7F,0x80,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x3F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"f\",70*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xE0,0x1B,0x60,0x31,0x80,0x31,0x80,0x31,0x80,0x19,0x80,0x1F,0x00,0x30,0x00,0x3F,0x00,0x33,0xC0,0x60,0xC0,0x60,0xC0,0x71,0xC0,0x1F,0x00},/*\"g\",71*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x70,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x37,0x80,0x38,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x79,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"h\",72*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x3E,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x3F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"i\",73*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x80,0x0F,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x33,0x00,0x3E,0x00},/*\"j\",74*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x70,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x31,0xC0,0x31,0x00,0x31,0x00,0x32,0x00,0x36,0x00,0x3A,0x00,0x31,0x00,0x31,0x80,0x30,0x80,0x30,0xC0,0x79,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"k\",75*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x3E,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x3F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"l\",76*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEC,0xE0,0x77,0x60,0x66,0x60,0x66,0x60,0x66,0x60,0x66,0x60,0x66,0x60,0x66,0x60,0x66,0x60,0x66,0x60,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"m\",77*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x77,0x80,0x38,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x79,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"n\",78*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x19,0x80,0x30,0xC0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x30,0xC0,0x30,0xC0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"o\",79*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x77,0x80,0x38,0xC0,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0x60,0x30,0xC0,0x38,0xC0,0x37,0x80,0x30,0x00,0x30,0x00,0x7C,0x00},/*\"p\",80*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x40,0x31,0xC0,0x30,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x60,0xC0,0x20,0xC0,0x31,0xC0,0x1E,0xC0,0x00,0xC0,0x00,0xC0,0x03,0xE0},/*\"q\",81*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF9,0xC0,0x1A,0x60,0x1C,0x60,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"r\",82*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xC0,0x38,0xC0,0x30,0x40,0x30,0x40,0x1C,0x00,0x0F,0x00,0x03,0xC0,0x20,0xC0,0x20,0xC0,0x31,0xC0,0x3F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"s\",83*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x04,0x00,0x0C,0x00,0x0C,0x00,0x7F,0x80,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x40,0x0C,0x40,0x07,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"t\",84*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x40,0x71,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x30,0xC0,0x39,0xE0,0x1E,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"u\",85*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0xE0,0x30,0x40,0x10,0x80,0x10,0x80,0x18,0x80,0x09,0x00,0x0D,0x00,0x0D,0x00,0x06,0x00,0x06,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"v\",86*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEF,0x70,0x46,0x20,0x62,0x20,0x26,0x40,0x26,0x40,0x37,0x40,0x39,0x80,0x19,0x80,0x19,0x80,0x19,0x80,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"w\",87*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3D,0xE0,0x18,0x80,0x08,0x80,0x0D,0x00,0x06,0x00,0x06,0x00,0x07,0x00,0x09,0x00,0x10,0x80,0x10,0xC0,0x79,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*\"x\",88*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x79,0xE0,0x10,0x80,0x10,0x80,0x10,0x80,0x09,0x00,0x09,0x00,0x0D,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x04,0x00,0x04,0x00,0x24,0x00,0x38,0x00},/*\"y\",89*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x80,0x21,0x80,0x23,0x00,0x22,0x00,0x06,0x00,0x04,0x00,0x0C,0x00,0x18,0x40,0x10,0x40,0x30,0xC0,0x3F,0x80,0x00,0x00,0x00,0x00,0x00,0x00},/*\"z\",90*/\n{0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0xC0,0x00,0x00},/*\"{\",91*/\n{0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00},/*\"|\",92*/\n{0x00,0x00,0x00,0x00,0x30,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x30,0x00,0x00,0x00},/*\"}\",93*/\n{0x00,0x00,0x38,0x00,0x44,0x20,0x43,0x20,0x01,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"~\",94*/\n};     \n\n/* 32x32 ASCII Character Set Dot Matrix */\nconst unsigned char asc2_3216[95][128]={\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\" \",0*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x03,0xC0,0x03,0xC0,0x03,0xC0,0x03,0xC0,0x03,0xC0,0x01,0xC0,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x03,0xC0,0x03,0xC0,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"!\",1*/\n{0x00,0x00,0x00,0x00,0x03,0x18,0x07,0x38,0x07,0x38,0x0E,0x70,0x0C,0x60,0x18,0xC0,0x31,0x80,0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"\"\",2*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x18,0x30,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"#\",3*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x03,0xC0,0x0D,0x30,0x09,0x18,0x19,0x18,0x19,0x38,0x19,0x38,0x1D,0x00,0x0D,0x00,0x0F,0x00,0x07,0x00,0x03,0xC0,0x01,0xE0,0x01,0xF0,0x01,0x30,0x01,0x38,0x01,0x18,0x39,0x18,0x39,0x18,0x31,0x18,0x31,0x30,0x19,0x60,0x07,0xC0,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00},/*\"$\",4*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x10,0x6C,0x10,0x44,0x20,0xC6,0x20,0xC6,0x40,0xC6,0x40,0xC6,0x40,0xC6,0x80,0xC6,0x80,0x44,0x80,0x6D,0x38,0x39,0x6C,0x02,0x44,0x02,0xC6,0x02,0xC6,0x04,0xC6,0x04,0xC6,0x08,0xC6,0x08,0xC6,0x08,0x44,0x10,0x6C,0x10,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"%\",5*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x19,0x00,0x31,0x80,0x31,0x80,0x31,0x80,0x31,0x80,0x31,0x00,0x33,0x00,0x3A,0x00,0x1C,0x00,0x38,0x7C,0x3C,0x10,0x4C,0x10,0xCE,0x10,0xC6,0x20,0xC7,0x20,0xC3,0x20,0xC1,0xC0,0xC1,0xC2,0x60,0xE6,0x31,0x7C,0x1E,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"&amp;\",6*/\n{0x00,0x00,0x00,0x00,0x38,0x00,0x3C,0x00,0x3C,0x00,0x0C,0x00,0x0C,0x00,0x08,0x00,0x30,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"'\",7*/\n{0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x18,0x00,0x30,0x00,0x20,0x00,0x60,0x00,0x40,0x00,0xC0,0x00,0xC0,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x00,0xC0,0x00,0xC0,0x00,0x40,0x00,0x60,0x00,0x20,0x00,0x30,0x00,0x18,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x00},/*\"(\",8*/\n{0x00,0x00,0x00,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x18,0x00,0x0C,0x00,0x04,0x00,0x06,0x00,0x02,0x00,0x03,0x00,0x03,0x00,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x03,0x00,0x03,0x00,0x03,0x00,0x06,0x00,0x04,0x00,0x0C,0x00,0x18,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x00,0x00},/*\")\",9*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0xC0,0x01,0xC0,0x30,0xC6,0x38,0x8E,0x1C,0x9C,0x06,0xB0,0x01,0xC0,0x01,0xC0,0x06,0xB0,0x1C,0x9C,0x38,0x8E,0x31,0x86,0x01,0xC0,0x01,0xC0,0x01,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"*\",10*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x3F,0xFE,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"+\",11*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x3C,0x00,0x3C,0x00,0x0C,0x00,0x0C,0x00,0x08,0x00,0x30,0x00,0x60,0x00},/*\",\",12*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"-\",13*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x3C,0x00,0x3C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\".\",14*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x06,0x00,0x04,0x00,0x0C,0x00,0x08,0x00,0x18,0x00,0x10,0x00,0x30,0x00,0x20,0x00,0x60,0x00,0x40,0x00,0xC0,0x00,0x80,0x01,0x80,0x01,0x00,0x03,0x00,0x02,0x00,0x06,0x00,0x04,0x00,0x0C,0x00,0x08,0x00,0x18,0x00,0x10,0x00,0x30,0x00,0x20,0x00,0x60,0x00,0x40,0x00,0x00,0x00,0x00,0x00},/*\"/\",15*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x06,0x20,0x0C,0x30,0x18,0x18,0x18,0x18,0x18,0x08,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x18,0x08,0x18,0x18,0x18,0x18,0x0C,0x30,0x06,0x20,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"0\",16*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x80,0x1F,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x03,0xC0,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"1\",17*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x08,0x38,0x10,0x18,0x20,0x0C,0x20,0x0C,0x30,0x0C,0x30,0x0C,0x00,0x0C,0x00,0x18,0x00,0x18,0x00,0x30,0x00,0x60,0x00,0xC0,0x01,0x80,0x03,0x00,0x02,0x00,0x04,0x04,0x08,0x04,0x10,0x04,0x20,0x0C,0x3F,0xF8,0x3F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"2\",18*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x18,0x60,0x30,0x30,0x30,0x18,0x30,0x18,0x30,0x18,0x00,0x18,0x00,0x18,0x00,0x30,0x00,0x60,0x03,0xC0,0x00,0x70,0x00,0x18,0x00,0x08,0x00,0x0C,0x00,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x08,0x30,0x18,0x18,0x30,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"3\",19*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0xE0,0x00,0xE0,0x01,0x60,0x01,0x60,0x02,0x60,0x04,0x60,0x04,0x60,0x08,0x60,0x08,0x60,0x10,0x60,0x30,0x60,0x20,0x60,0x40,0x60,0x7F,0xFC,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x03,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"4\",20*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFC,0x0F,0xFC,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x13,0xE0,0x14,0x30,0x18,0x18,0x10,0x08,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x30,0x0C,0x30,0x0C,0x20,0x18,0x20,0x18,0x18,0x30,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"5\",21*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x06,0x18,0x0C,0x18,0x08,0x18,0x18,0x00,0x10,0x00,0x10,0x00,0x30,0x00,0x33,0xE0,0x36,0x30,0x38,0x18,0x38,0x08,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x18,0x0C,0x18,0x08,0x0C,0x18,0x0E,0x30,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"6\",22*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFC,0x1F,0xFC,0x10,0x08,0x30,0x10,0x20,0x10,0x20,0x20,0x00,0x20,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x80,0x00,0x80,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"7\",23*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x0C,0x30,0x18,0x18,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x38,0x0C,0x38,0x08,0x1E,0x18,0x0F,0x20,0x07,0xC0,0x18,0xF0,0x30,0x78,0x30,0x38,0x60,0x1C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x30,0x18,0x18,0x30,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"8\",24*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x18,0x20,0x30,0x10,0x30,0x18,0x60,0x08,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x70,0x1C,0x30,0x2C,0x18,0x6C,0x0F,0x8C,0x00,0x0C,0x00,0x18,0x00,0x18,0x00,0x10,0x30,0x30,0x30,0x60,0x30,0xC0,0x0F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"9\",25*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x03,0xC0,0x03,0xC0,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x03,0xC0,0x03,0xC0,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\":\",26*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x03,0x80,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x03,0x80,0x03,0x80,0x01,0x80,0x03,0x00,0x03,0x00,0x00,0x00},/*\";\",27*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"&lt;\",28*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"=\",29*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x01,0x00,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"&gt;\",30*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x0C,0x18,0x18,0x0C,0x10,0x06,0x30,0x06,0x38,0x06,0x38,0x06,0x38,0x06,0x00,0x0C,0x00,0x18,0x00,0x70,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x80,0x03,0xC0,0x03,0xC0,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"?\",31*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x06,0x10,0x0C,0x08,0x18,0x04,0x30,0xD4,0x31,0xB2,0x21,0x32,0x63,0x32,0x63,0x22,0x66,0x22,0x66,0x22,0x66,0x22,0x66,0x62,0x66,0x64,0x66,0x64,0x26,0xE8,0x33,0x30,0x30,0x02,0x10,0x04,0x18,0x0C,0x0C,0x18,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"@\",32*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x03,0x80,0x03,0x80,0x03,0x80,0x04,0xC0,0x04,0xC0,0x04,0xC0,0x04,0xC0,0x0C,0x40,0x08,0x60,0x08,0x60,0x08,0x60,0x08,0x20,0x1F,0xF0,0x10,0x30,0x10,0x30,0x10,0x30,0x20,0x18,0x20,0x18,0x20,0x18,0x60,0x1C,0xF8,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"A\",33*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x18,0x38,0x18,0x18,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x18,0x18,0x30,0x1F,0xE0,0x18,0x18,0x18,0x0C,0x18,0x04,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x0C,0x18,0x18,0x7F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"B\",34*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x06,0x1C,0x08,0x0C,0x18,0x06,0x30,0x02,0x30,0x02,0x30,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x30,0x02,0x30,0x02,0x10,0x04,0x18,0x08,0x0C,0x10,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"C\",35*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xC0,0x18,0x70,0x18,0x18,0x18,0x08,0x18,0x0C,0x18,0x0C,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x04,0x18,0x0C,0x18,0x0C,0x18,0x18,0x18,0x18,0x18,0x60,0x7F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"D\",36*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFC,0x18,0x0C,0x18,0x04,0x18,0x02,0x18,0x02,0x18,0x00,0x18,0x00,0x18,0x10,0x18,0x10,0x18,0x30,0x1F,0xF0,0x18,0x30,0x18,0x10,0x18,0x10,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x02,0x18,0x02,0x18,0x04,0x18,0x0C,0x7F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"E\",37*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFC,0x18,0x1C,0x18,0x04,0x18,0x02,0x18,0x02,0x18,0x00,0x18,0x00,0x18,0x10,0x18,0x10,0x18,0x30,0x1F,0xF0,0x18,0x30,0x18,0x10,0x18,0x10,0x18,0x10,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"F\",38*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x0C,0x30,0x08,0x10,0x18,0x18,0x30,0x08,0x30,0x08,0x20,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x7E,0x60,0x18,0x60,0x18,0x20,0x18,0x30,0x18,0x30,0x18,0x10,0x18,0x18,0x18,0x0C,0x20,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"G\",39*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x3F,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x3F,0xFC,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0xFC,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"H\",40*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xF8,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"I\",41*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFE,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x70,0x60,0x70,0xC0,0x71,0x80,0x3F,0x00},/*\"J\",42*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x7C,0x18,0x30,0x18,0x20,0x18,0x60,0x18,0x40,0x18,0x80,0x18,0x80,0x19,0x00,0x19,0x00,0x1B,0x00,0x1D,0x80,0x1D,0x80,0x18,0xC0,0x18,0xC0,0x18,0x60,0x18,0x60,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x18,0x18,0x18,0x7E,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"K\",43*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x02,0x18,0x02,0x18,0x04,0x18,0x0C,0x7F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"L\",44*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x0F,0x38,0x1C,0x38,0x1C,0x38,0x1C,0x38,0x1C,0x38,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x2C,0x4C,0x2C,0x4C,0x26,0x4C,0x26,0x4C,0x26,0x4C,0x26,0x8C,0x22,0x8C,0x23,0x8C,0x23,0x8C,0x23,0x0C,0x23,0x0C,0x21,0x0C,0xF1,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"M\",45*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x1F,0x38,0x04,0x38,0x04,0x2C,0x04,0x2C,0x04,0x26,0x04,0x26,0x04,0x23,0x04,0x23,0x04,0x21,0x84,0x21,0x84,0x20,0xC4,0x20,0xC4,0x20,0x64,0x20,0x64,0x20,0x34,0x20,0x34,0x20,0x1C,0x20,0x1C,0x20,0x0C,0x20,0x0C,0xF8,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"N\",46*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x0C,0x30,0x18,0x18,0x10,0x08,0x30,0x0C,0x30,0x0C,0x60,0x04,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x20,0x06,0x30,0x0C,0x30,0x0C,0x10,0x08,0x18,0x18,0x0C,0x30,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"O\",47*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF0,0x18,0x18,0x18,0x0C,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x06,0x18,0x0C,0x18,0x18,0x1F,0xE0,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"P\",48*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x0C,0x30,0x18,0x18,0x10,0x08,0x30,0x0C,0x30,0x0C,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x27,0x84,0x38,0xCC,0x38,0x6C,0x18,0x78,0x0C,0x70,0x03,0xE0,0x00,0x32,0x00,0x3C,0x00,0x1C,0x00,0x00},/*\"Q\",49*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x18,0x38,0x18,0x18,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x18,0x18,0x30,0x1F,0xE0,0x18,0xC0,0x18,0xC0,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x18,0x18,0x18,0x7E,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"R\",50*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xC8,0x18,0x78,0x30,0x18,0x60,0x18,0x60,0x08,0x60,0x08,0x60,0x00,0x70,0x00,0x3C,0x00,0x1F,0x00,0x07,0xC0,0x01,0xF0,0x00,0x78,0x00,0x18,0x00,0x1C,0x40,0x0C,0x40,0x0C,0x60,0x0C,0x20,0x0C,0x30,0x18,0x38,0x30,0x27,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"S\",51*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x31,0x84,0x21,0x86,0x41,0x82,0x41,0x82,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"T\",52*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x3E,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x30,0x08,0x18,0x10,0x1C,0x20,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"U\",53*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x1E,0x18,0x0C,0x18,0x08,0x18,0x08,0x18,0x08,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x20,0x06,0x20,0x06,0x20,0x06,0x20,0x06,0x40,0x03,0x40,0x03,0x40,0x03,0x40,0x03,0x80,0x01,0x80,0x01,0x80,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"V\",54*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF3,0xCF,0x61,0x86,0x61,0x84,0x21,0x84,0x20,0x84,0x30,0xC4,0x31,0xC4,0x31,0xC4,0x31,0xC8,0x31,0xC8,0x11,0xC8,0x12,0x48,0x1A,0x68,0x1A,0x68,0x1A,0x70,0x1C,0x70,0x0C,0x70,0x0C,0x70,0x0C,0x30,0x0C,0x20,0x08,0x20,0x08,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"W\",55*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x3E,0x18,0x08,0x18,0x10,0x0C,0x10,0x0C,0x20,0x06,0x20,0x06,0x40,0x03,0x40,0x03,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xC0,0x02,0xC0,0x02,0x60,0x04,0x60,0x04,0x70,0x08,0x30,0x08,0x30,0x18,0x18,0x10,0x1C,0x7C,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"X\",56*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x3E,0x38,0x08,0x18,0x08,0x18,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x20,0x06,0x20,0x06,0x20,0x03,0x40,0x03,0x40,0x03,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"Y\",57*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFE,0x1C,0x0C,0x18,0x0C,0x30,0x18,0x20,0x18,0x00,0x30,0x00,0x60,0x00,0x60,0x00,0xC0,0x00,0xC0,0x01,0x80,0x01,0x80,0x03,0x00,0x03,0x00,0x06,0x00,0x06,0x00,0x0C,0x00,0x18,0x02,0x18,0x06,0x30,0x04,0x30,0x1C,0x7F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"Z\",58*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFC,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0xFC,0x00,0x00,0x00,0x00},/*\"[\",59*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x08,0x00,0x0C,0x00,0x04,0x00,0x06,0x00,0x06,0x00,0x02,0x00,0x03,0x00,0x01,0x00,0x01,0x80,0x01,0x80,0x00,0x80,0x00,0xC0,0x00,0x40,0x00,0x60,0x00,0x60,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x18,0x00,0x18,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x06,0x00,0x00},/*\"\\\",60*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x3F,0xC0,0x00,0x00,0x00,0x00},/*\"]\",61*/\n{0x00,0x00,0x00,0x00,0x03,0xC0,0x03,0xE0,0x06,0x20,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"^\",62*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF},/*\"_\",63*/\n{0x00,0x00,0x00,0x00,0x1E,0x00,0x03,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"`\",64*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x18,0x30,0x30,0x18,0x30,0x18,0x30,0x18,0x00,0x38,0x07,0xD8,0x1C,0x18,0x30,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x19,0x30,0x79,0x1F,0x8E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"a\",65*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x78,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x19,0xE0,0x1A,0x38,0x1C,0x18,0x1C,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x08,0x1C,0x18,0x1C,0x30,0x13,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"b\",66*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x0E,0x10,0x0C,0x18,0x18,0x18,0x30,0x18,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x04,0x18,0x04,0x18,0x08,0x0C,0x10,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"c\",67*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x78,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x07,0xD8,0x0C,0x38,0x18,0x18,0x18,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x10,0x18,0x18,0x38,0x0C,0x5E,0x07,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"d\",68*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x0C,0x30,0x08,0x18,0x18,0x08,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x3F,0xFC,0x30,0x00,0x30,0x00,0x30,0x00,0x18,0x04,0x18,0x08,0x0E,0x18,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"e\",69*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x01,0x86,0x01,0x06,0x03,0x06,0x03,0x00,0x03,0x00,0x03,0x00,0x3F,0xF8,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x1F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"f\",70*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xEE,0x0C,0x36,0x08,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x08,0x18,0x0C,0x30,0x0F,0xE0,0x18,0x00,0x18,0x00,0x1F,0xC0,0x0F,0xF8,0x18,0x1C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x18,0x18,0x07,0xE0},/*\"g\",71*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x78,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x19,0xE0,0x1A,0x30,0x1C,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7E,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"h\",72*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x03,0xC0,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1F,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"i\",73*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x78,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x03,0xF0,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x18,0x60,0x18,0x40,0x0F,0x80},/*\"j\",74*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x78,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x7C,0x18,0x30,0x18,0x20,0x18,0x40,0x18,0x80,0x19,0x80,0x1B,0x80,0x1E,0xC0,0x1C,0xC0,0x18,0x60,0x18,0x30,0x18,0x30,0x18,0x18,0x18,0x1C,0x7E,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"k\",75*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1F,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"l\",76*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0xEF,0x3C,0x71,0xC6,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0x61,0x86,0xF3,0xCF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"m\",77*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0xE0,0x7A,0x30,0x1C,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7E,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"n\",78*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x0C,0x30,0x08,0x18,0x18,0x18,0x10,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x18,0x18,0x18,0x18,0x0C,0x30,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"o\",79*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0xE0,0x7A,0x30,0x1C,0x18,0x18,0x08,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x18,0x1C,0x18,0x1E,0x30,0x19,0xE0,0x18,0x00,0x18,0x00,0x18,0x00,0x7E,0x00},/*\"p\",80*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC8,0x0C,0x78,0x18,0x38,0x18,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x10,0x18,0x18,0x38,0x0C,0x78,0x07,0x98,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x7E},/*\"q\",81*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x1C,0x7E,0x66,0x06,0x86,0x07,0x80,0x07,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x7F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"r\",82*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE4,0x06,0x1C,0x0C,0x0C,0x0C,0x04,0x0C,0x04,0x0E,0x00,0x07,0xC0,0x01,0xF0,0x00,0x78,0x00,0x1C,0x10,0x0C,0x10,0x0C,0x18,0x0C,0x1C,0x18,0x13,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"s\",83*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x03,0x00,0x07,0x00,0x3F,0xF8,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x04,0x03,0x04,0x01,0x88,0x00,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"t\",84*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x78,0x78,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x38,0x0C,0x5E,0x07,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"u\",85*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x3E,0x18,0x0C,0x18,0x08,0x18,0x18,0x0C,0x10,0x0C,0x10,0x04,0x20,0x06,0x20,0x06,0x20,0x03,0x40,0x03,0x40,0x03,0xC0,0x01,0x80,0x01,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"v\",86*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFB,0xCF,0x61,0x86,0x21,0x84,0x31,0x84,0x31,0x84,0x31,0xC8,0x11,0xC8,0x1A,0xC8,0x1A,0x48,0x1A,0x70,0x0E,0x70,0x0C,0x70,0x0C,0x30,0x0C,0x20,0x04,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"w\",87*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x7C,0x0C,0x10,0x0E,0x10,0x06,0x20,0x03,0x40,0x03,0x40,0x01,0x80,0x01,0x80,0x01,0xC0,0x02,0x60,0x04,0x60,0x04,0x30,0x08,0x18,0x18,0x18,0x7C,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"x\",88*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x3E,0x18,0x18,0x18,0x10,0x08,0x10,0x0C,0x10,0x04,0x20,0x06,0x20,0x06,0x20,0x02,0x40,0x03,0x40,0x01,0x40,0x01,0x80,0x01,0x80,0x01,0x00,0x01,0x00,0x01,0x00,0x02,0x00,0x3E,0x00,0x3C,0x00},/*\"y\",89*/\n{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xF8,0x30,0x38,0x30,0x30,0x20,0x60,0x20,0xE0,0x00,0xC0,0x01,0x80,0x03,0x80,0x03,0x00,0x06,0x00,0x0E,0x04,0x0C,0x04,0x18,0x0C,0x30,0x18,0x3F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"z\",90*/\n{0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x10,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0xC0,0x01,0x80,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x0C,0x00,0x00},/*\"{\",91*/\n{0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80},/*\"|\",92*/\n{0x00,0x00,0x00,0x00,0x18,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x01,0x80,0x00,0xC0,0x01,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x04,0x00,0x18,0x00,0x00,0x00},/*\"}\",93*/\n{0x00,0x00,0x1E,0x00,0x23,0x00,0x41,0x82,0x40,0x82,0x00,0xE4,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*\"~\",94*/\n};\n\n#endif\n</code></pre>"},{"location":"INTERFACING/LCD/lcd/#lcdh","title":"lcd.h","text":"<pre><code>/**\n * @file lcd.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief LCD driver header file\n * @version 1.0\n * @date 2024-11-18\n * @ref Alinetek LCD driver\n * @copyright Copyright (c) 2024\n */\n\n#ifndef __LCD_H__\n#define __LCD_H__\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"driver/gpio.h\"\n#include \"spi.h\"\n\n/* Pin definitions */\n#define LCD_NUM_BL GPIO_NUM_41  /* Backlight control pin */\n#define LCD_NUM_WR GPIO_NUM_40  /* Write control pin */\n#define LCD_NUM_CS GPIO_NUM_39  /* Chip select pin */\n#define LCD_NUM_RST GPIO_NUM_38 /* Reset pin */\n\n/* IO operations */\n#define LCD_WR(x)                                                              \\\n    do                                                                         \\\n    {                                                                          \\\n        x ? (gpio_set_level(LCD_NUM_WR, 1)) : (gpio_set_level(LCD_NUM_WR, 0)); \\\n    } while (0)\n\n#define LCD_CS(x)                                                              \\\n    do                                                                         \\\n    {                                                                          \\\n        x ? (gpio_set_level(LCD_NUM_CS, 1)) : (gpio_set_level(LCD_NUM_CS, 0)); \\\n    } while (0)\n\n#define LCD_PWR(x)                                                             \\\n    do                                                                         \\\n    {                                                                          \\\n        x ? (gpio_set_level(LCD_NUM_BL, 1)) : (gpio_set_level(LCD_NUM_BL, 0)); \\\n    } while (0)\n\n#define LCD_RST(x)                                                               \\\n    do                                                                           \\\n    {                                                                            \\\n        x ? (gpio_set_level(LCD_NUM_RST, 1)) : (gpio_set_level(LCD_NUM_RST, 0)); \\\n    } while (0)\n\n/* Common color values */\n#define WHITE 0xFFFF   /* White */\n#define BLACK 0x0000   /* Black */\n#define RED 0xF800     /* Red */\n#define GREEN 0x07E0   /* Green */\n#define BLUE 0x001F    /* Blue */\n#define MAGENTA 0XF81F /* Magenta/Purple = BLUE + RED */\n#define YELLOW 0XFFE0  /* Yellow = GREEN + RED */\n#define CYAN 0X07FF    /* Cyan = GREEN + BLUE */\n\n/* Less common color values */\n#define BROWN 0XBC40      /* Brown */\n#define BRRED 0XFC07      /* Brown-red */\n#define GRAY 0X8430       /* Gray */\n#define DARKBLUE 0X01CF   /* Dark blue */\n#define LIGHTBLUE 0X7D7C  /* Light blue */\n#define GRAYBLUE 0X5458   /* Gray-blue */\n#define LIGHTGREEN 0X841F /* Light green */\n#define LGRAY 0XC618      /* Light gray (panel background) */\n#define LGRAYBLUE 0XA651  /* Light gray-blue (middle layer color) */\n#define LBBLUE 0X2B12     /* Light brown-blue (selection bar highlight color) */\n\n/* Scan direction definitions */\n#define L2R_U2D 0 /* Left to right, top to bottom */\n#define L2R_D2U 1 /* Left to right, bottom to top */\n#define R2L_U2D 2 /* Right to left, top to bottom */\n#define R2L_D2U 3 /* Right to left, bottom to top */\n#define U2D_L2R 4 /* Top to bottom, left to right */\n#define U2D_R2L 5 /* Top to bottom, right to left */\n#define D2U_L2R 6 /* Bottom to top, left to right */\n#define D2U_R2L 7 /* Bottom to top, right to left */\n\n#define DFT_SCAN_DIR L2R_U2D /* Default scan direction */\n\n/* LCD information structure */\ntypedef struct _lcd_obj_t\n{\n    uint16_t width;   /* Width */\n    uint16_t height;  /* Height */\n    uint8_t dir;      /* Screen orientation: 0 = vertical, 1 = horizontal */\n    uint16_t wramcmd; /* Write GRAM command */\n    uint16_t setxcmd; /* Set X coordinate command */\n    uint16_t setycmd; /* Set Y coordinate command */\n    uint16_t wr;      /* Command/Data IO */\n    uint16_t cs;      /* Chip select IO */\n    uint16_t bl;      /* Backlight */\n    uint16_t rst;     /* Reset */\n} lcd_obj_t;\n\n/* LCD buffer size settings - modify with caution!\n   Changing these values may affect lcd_clear/lcd_fill/lcd_draw_line functions */\n#define LCD_TOTAL_BUF_SIZE (160 * 80 * 2) /* Total buffer size */\n#define LCD_BUF_SIZE 2560                 /* Partial buffer size */\n\n/* Exported variables */\nextern lcd_obj_t lcd_self;\nextern uint8_t lcd_buf[LCD_TOTAL_BUF_SIZE];\n\n/* Function declarations */\nvoid lcd_init(void);                                                                                                  /* Initialize the LCD */\nvoid lcd_clear(uint16_t color);                                                                                       /* Clear the screen */\nvoid lcd_scan_dir(uint8_t dir);                                                                                       /* Set the LCD auto scan direction */\nvoid lcd_write_data(const uint8_t *data, int len);                                                                    /* Write data to the LCD */\nvoid lcd_write_data16(uint16_t data);                                                                                 /* Write 16-bit data to the LCD */\nvoid lcd_set_cursor(uint16_t xpos, uint16_t ypos);                                                                    /* Set the cursor position */\nvoid lcd_set_window(uint16_t xstar, uint16_t ystar, uint16_t xend, uint16_t yend);                                    /* Set the display window size */\nvoid lcd_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint16_t color);                                    /* Fill a specific area with a single color */\nvoid lcd_show_num(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint16_t color);                   /* Display a number with len digits */\nvoid lcd_show_xnum(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint8_t mode, uint16_t color);    /* Display an extended number with len digits */\nvoid lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color); /* Display a string */\nvoid lcd_draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);                          /* Draw a rectangle */\nvoid lcd_draw_hline(uint16_t x, uint16_t y, uint16_t len, uint16_t color);                                            /* Draw a horizontal line */\nvoid lcd_draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);                               /* Draw a straight or slanted line */\nvoid lcd_draw_pixel(uint16_t x, uint16_t y, uint16_t color);                                                          /* Draw a pixel */\nvoid lcd_show_char(uint16_t x, uint16_t y, uint8_t chr, uint8_t size, uint8_t mode, uint16_t color);                  /* Display a character at a specified position */\n\n#endif /* __LCD_H__ */\n</code></pre>"},{"location":"INTERFACING/LCD/lcd/#lcdc","title":"lcd.c","text":"<pre><code>/**\n * @file lcd.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief  LCD driver source file\n * @version 1.0\n * @date 2024-11-18\n * @ref Alientek LCD Driver\n * @copyright Copyright (c) 2024\n * \n */\n\n#include \"lcd.h\"\n#include \"lcdfont.h\"\n\n\nspi_device_handle_t MY_LCD_Handle;\nuint8_t lcd_buf[LCD_TOTAL_BUF_SIZE];\nlcd_obj_t lcd_self;\n\n\n/* The LCD requires a set of initialization commands/parameters. \n   They are stored in this structure. */\ntypedef struct\n{\n    uint8_t cmd;           /* Command byte */\n    uint8_t data[16];      /* Data array for the command */\n    uint8_t databytes;     /* Number of data bytes; Bit 7 = post-command delay; 0xFF = end of commands */\n} lcd_init_cmd_t;\n\n/**\n * @brief       Sends a command to the LCD using polling mode. \n *              Blocks until the transmission is complete.\n *              (Since the data transmission is minimal, polling mode improves speed. \n *              The overhead of interrupt handling exceeds that of polling in this case.)\n * @param       cmd 8-bit command data to be transmitted\n * @retval      None\n */\nvoid lcd_write_cmd(const uint8_t cmd)\n{\n    LCD_WR(0);                    // Set write signal to 0\n    spi2_write_cmd(MY_LCD_Handle, cmd); // Transmit the command via SPI\n}\n\n/**\n * @brief       Sends data to the LCD using polling mode. \n *              Blocks until the transmission is complete.\n *              (Since the data transmission is minimal, polling mode improves speed. \n *              The overhead of interrupt handling exceeds that of polling in this case.)\n * @param       data Pointer to the 8-bit data to be transmitted\n * @param       len  Length of the data to be transmitted\n * @retval      None\n */\nvoid lcd_write_data(const uint8_t *data, int len)\n{\n    LCD_WR(1);                          // Set write signal to 1\n    spi2_write_data(MY_LCD_Handle, data, len); // Transmit the data via SPI\n}\n\n\n/**\n * @brief       Sends 16-bit data to the LCD using polling mode. \n *              Blocks until the transmission is complete.\n *              (Since the data transmission is minimal, polling mode improves speed. \n *              The overhead of interrupt handling exceeds that of polling in this case.)\n * @param       data 16-bit data to be transmitted\n * @retval      None\n */\nvoid lcd_write_data16(uint16_t data)\n{\n    uint8_t dataBuf[2] = {0, 0};\n    dataBuf[0] = data &gt;&gt; 8;              // Extract the high byte\n    dataBuf[1] = data &amp; 0xFF;            // Extract the low byte\n    LCD_WR(1);                           // Set write signal to 1\n    spi2_write_data(MY_LCD_Handle, dataBuf, 2); // Transmit the 16-bit data via SPI\n}\n\n/**\n * @brief       Set the window size\n * @param       xstar: Top-left corner x-axis coordinate\n * @param       ystar: Top-left corner y-axis coordinate\n * @param       xend: Bottom-right corner x-axis coordinate\n * @param       yend: Bottom-right corner y-axis coordinate\n * @retval      None\n */\nvoid lcd_set_window(uint16_t xstar, uint16_t ystar, uint16_t xend, uint16_t yend)\n{\n    uint8_t databuf[4] = {0, 0, 0, 0};\n\n    if (lcd_self.dir == 1)                  /* Landscape orientation */\n    {\n        databuf[0] = (xstar + 1) &gt;&gt; 8;\n        databuf[1] = 0xFF &amp; (xstar + 1);\n        databuf[2] = (xend + 1) &gt;&gt; 8;\n        databuf[3] = 0xFF &amp; (xend + 1);\n        lcd_write_cmd(lcd_self.setxcmd);\n        lcd_write_data(databuf, 4);\n\n        databuf[0] = (ystar + 26) &gt;&gt; 8;\n        databuf[1] = 0xFF &amp; (ystar + 26);\n        databuf[2] = (yend + 26) &gt;&gt; 8;\n        databuf[3] = 0xFF &amp; (yend + 26);\n        lcd_write_cmd(lcd_self.setycmd);\n        lcd_write_data(databuf, 4);\n    }\n    else                                    /* Portrait orientation */\n    {\n        databuf[0] = (xstar + 26) &gt;&gt; 8;\n        databuf[1] = 0xFF &amp; (xstar + 26);\n        databuf[2] = (xend + 26) &gt;&gt; 8;\n        databuf[3] = 0xFF &amp; (xend + 26);\n        lcd_write_cmd(lcd_self.setxcmd);\n        lcd_write_data(databuf, 4);\n\n        databuf[0] = (ystar + 1) &gt;&gt; 8;\n        databuf[1] = 0xFF &amp; (ystar + 1);\n        databuf[2] = (yend + 26) &gt;&gt; 8;\n        databuf[3] = 0xFF &amp; (yend + 26);\n        lcd_write_cmd(lcd_self.setycmd);\n        lcd_write_data(databuf, 4);\n    }\n\n    lcd_write_cmd(lcd_self.wramcmd);        /* Begin writing to GRAM */\n}\n\n/**\n * @brief       Clear the LCD screen with a specified color\n * @param       color The color to use for clearing the screen\n * @retval      None\n */\nvoid lcd_clear(uint16_t color)\n{\n    uint16_t i, j;\n    uint8_t data[2] = {0};\n\n    data[0] = color &gt;&gt; 8;  // High byte of the color\n    data[1] = color;       // Low byte of the color\n\n    lcd_set_window(0, 0, lcd_self.width - 1, lcd_self.height - 1); // Set the full screen as the window\n\n    for (j = 0; j &lt; LCD_BUF_SIZE / 2; j++) // Prepare buffer with the color data\n    {\n        lcd_buf[j * 2] = data[0];\n        lcd_buf[j * 2 + 1] = data[1];\n    }\n\n    for (i = 0; i &lt; (LCD_TOTAL_BUF_SIZE / LCD_BUF_SIZE); i++) // Write the buffer repeatedly to cover the entire screen\n    {\n        lcd_write_data(lcd_buf, LCD_BUF_SIZE);\n    }\n}\n\n/**\n * @brief       Fill a specified area with a single color\n * @param       (sx, sy), (ex, ey): Coordinates of the opposite corners of the rectangle to fill. \n *              The region size is: (ex - sx + 1) * (ey - sy + 1).\n * @param       color: The color to fill the area with (16-bit color for compatibility with LTDC)\n * @retval      None\n */\nvoid lcd_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint16_t color)\n{\n    uint16_t i;\n    uint16_t j;\n    uint16_t width;\n    uint16_t height;\n\n    width = ex - sx + 1;    // Calculate the width of the fill area\n    height = ey - sy + 1;   // Calculate the height of the fill area\n    lcd_set_window(sx, sy, ex, ey); // Set the fill area as the active window\n\n    for (i = 0; i &lt; height; i++)    // Iterate over the height of the area\n    {\n        for (j = 0; j &lt; width; j++) // Iterate over the width of the area\n        {\n            lcd_write_data16(color); // Write the color data to the LCD\n        }\n    }\n    lcd_set_window(sx, sy, ex, ey); // Reset the window to the original fill area\n}\n\n\n/**\n * @brief       Set the position of the cursor\n * @param       xpos: X-axis coordinate of the top-left corner\n * @param       ypos: Y-axis coordinate of the top-left corner\n * @retval      None\n */\nvoid lcd_set_cursor(uint16_t xpos, uint16_t ypos)\n{\n    lcd_set_window(xpos, ypos, xpos, ypos); // Set the window to a single pixel at the cursor position\n}\n\n/**\n * @brief       Set the auto-scan direction of the LCD (not applicable for RGB screens)\n * @param       dir: 0~7, representing 8 directions (specific definitions can be found in lcd.h)\n * @retval      None\n */\nvoid lcd_scan_dir(uint8_t dir)\n{\n    uint8_t regval = 0;\n    uint8_t dirreg = 0;\n    uint16_t temp;\n\n    /* For landscape mode, the 1963 IC does not change scan direction, other ICs do. \n       For portrait mode, the 1963 IC changes direction, other ICs do not. */\n    if (lcd_self.dir == 1)\n    {\n        dir = 1;\n    }\n    else\n    {\n        dir = 0;\n    }\n\n    switch (dir)\n    {\n        case 0:                /* Portrait mode, top-right corner is (0, 0) */\n            regval |= 0x08;\n            break;\n\n        case 1:                /* Landscape mode, top-left corner is (0, 0) */\n            regval |= 0xA8;\n            break;\n\n        case 2:                /* Portrait mode, bottom-left corner is (0, 0) */\n            regval |= 0xC8;\n            break;\n\n        case 3:                /* Landscape mode, bottom-right corner is (0, 0) */\n            regval |= 0x78;\n            break;\n    }\n\n    dirreg = 0x36;                              /* For most driver ICs, the 0x36 register controls this setting */\n\n    uint8_t data_send[1] = {regval};            // Data to be sent to the register\n\n    lcd_write_cmd(dirreg);                      // Write command to set direction\n    lcd_write_data(data_send, 1);               // Send the direction data\n\n    if (regval &amp; 0x20)\n    {\n        if (lcd_self.width &lt; lcd_self.height)   /* Swap X and Y dimensions */\n        {\n            temp = lcd_self.width;\n            lcd_self.width = lcd_self.height;\n            lcd_self.height = temp;\n        }\n    }\n    else\n    {\n        if (lcd_self.width &gt; lcd_self.height)   /* Swap X and Y dimensions */\n        {\n            temp = lcd_self.width;\n            lcd_self.width = lcd_self.height;\n            lcd_self.height = temp;\n        }\n    }\n\n    lcd_set_window(0, 0, lcd_self.width, lcd_self.height); // Reset the window size\n}\n\n/**\n * @brief       Set the display orientation of the LCD\n * @param       dir: 0 for portrait mode; 1 for landscape mode\n * @retval      None\n */\nvoid lcd_display_dir(uint8_t dir)\n{\n    lcd_self.dir = dir;\n\n    if (lcd_self.dir == 0)                  /* Portrait mode */\n    {\n        lcd_self.width      = 80;          // Default width for portrait\n        lcd_self.height     = 160;         // Default height for portrait\n        lcd_self.wramcmd    = 0x2C;        // Write RAM command\n        lcd_self.setxcmd    = 0x2A;        // Set X coordinate command\n        lcd_self.setycmd    = 0x2B;        // Set Y coordinate command\n    }\n    else                                    /* Landscape mode */\n    {\n        lcd_self.width      = 160;         // Default width for landscape\n        lcd_self.height     = 80;          // Default height for landscape\n        lcd_self.wramcmd    = 0x2C;        // Write RAM command\n        lcd_self.setxcmd    = 0x2A;        // Set X coordinate command\n        lcd_self.setycmd    = 0x2B;        // Set Y coordinate command\n    }\n\n    lcd_scan_dir(lcd_self.dir);             // Set default scan direction\n}\n\n/**\n * @brief       Perform a hardware reset on the LCD\n * @param       None\n * @retval      None\n */\nvoid lcd_hard_reset(void)\n{\n    /* Reset the display */\n    LCD_RST(0);          // Pull the reset pin low\n    vTaskDelay(200);      // Delay for 200ms\n    LCD_RST(1);          // Pull the reset pin high\n    vTaskDelay(200);      // Delay for 200ms\n}\n\n/**\n * @brief       Draw a single pixel on the LCD\n * @param       x: X-axis coordinate of the pixel\n * @param       y: Y-axis coordinate of the pixel\n * @param       color: Color value of the pixel\n * @retval      None\n */\nvoid lcd_draw_pixel(uint16_t x, uint16_t y, uint16_t color)\n{\n    lcd_set_cursor(x, y);       // Set the cursor to the specified coordinates\n    lcd_write_data16(color);    // Write the color data for the pixel\n}\n\n/**\n * @brief       Draw a line (straight or diagonal) on the LCD\n * @param       x1, y1: Starting point coordinates\n * @param       x2, y2: Ending point coordinates\n * @param       color: Color value to fill the line\n * @retval      None\n */\nvoid lcd_draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)\n{\n    uint16_t t; \n    int xerr = 0, yerr = 0, delta_x, delta_y, distance; \n    int incx, incy, urow, ucol; \n\n    delta_x = x2 - x1;                      /* Calculate the x-coordinate increment */\n    delta_y = y2 - y1;                      /* Calculate the y-coordinate increment */\n    urow = x1;                              /* Initialize the current x-coordinate */\n    ucol = y1;                              /* Initialize the current y-coordinate */\n\n    if (delta_x &gt; 0)\n    {\n        incx = 1;                           /* Set step direction for x */\n    }\n    else if (delta_x == 0)\n    {\n        incx = 0;                           /* Vertical line */\n    }\n    else\n    {\n        incx = -1;\n        delta_x = -delta_x;\n    } \n    if (delta_y &gt; 0)\n    {\n        incy = 1;                           /* Set step direction for y */\n    }\n    else if (delta_y == 0)\n    {\n        incy = 0;                           /* Horizontal line */\n    }\n    else\n    {\n        incy = -1;\n        delta_y = -delta_y;\n    } \n\n    if (delta_x &gt; delta_y)\n    {\n        distance = delta_x;                 /* Use x as the primary axis */\n    }\n    else\n    {\n        distance = delta_y;                 /* Use y as the primary axis */\n    }\n\n    for (t = 0; t &lt;= distance + 1; t++)     /* Draw the line */\n    {\n        lcd_draw_pixel(urow, ucol, color);  /* Plot the pixel */ \n        xerr += delta_x; \n        yerr += delta_y; \n\n        if (xerr &gt; distance)\n        { \n            xerr -= distance; \n            urow += incx;                   /* Increment x */\n        } \n\n        if (yerr &gt; distance)\n        { \n            yerr -= distance; \n            ucol += incy;                   /* Increment y */\n        } \n    } \n}\n\n/**\n * @brief       Draw a horizontal line\n * @param       x: Starting x-coordinate\n * @param       y: Starting y-coordinate\n * @param       len: Length of the line\n * @param       color: Color of the line\n * @retval      None\n */\nvoid lcd_draw_hline(uint16_t x, uint16_t y, uint16_t len, uint16_t color)\n{\n    if ((len == 0) || (x &gt; lcd_self.width) || (y &gt; lcd_self.height)) return;\n\n    lcd_fill(x, y, x + len - 1, y, color); // Fill a rectangle with height 1 as the horizontal line\n}\n\n/**\n * @brief       Draw a rectangle\n * @param       x0, y0: Coordinates of the top-left corner\n * @param       x1, y1: Coordinates of the bottom-right corner\n * @param       color: Color of the rectangle\n * @retval      None\n */\nvoid lcd_draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)\n{\n    lcd_draw_line(x0, y0, x1, y0, color); // Top edge\n    lcd_draw_line(x0, y0, x0, y1, color); // Left edge\n    lcd_draw_line(x0, y1, x1, y1, color); // Bottom edge\n    lcd_draw_line(x1, y0, x1, y1, color); // Right edge\n}\n\n/**\n * @brief       Draw a circle\n * @param       x0, y0: Coordinates of the circle's center\n * @param       r: Radius of the circle\n * @param       color: Color of the circle\n * @retval      None\n */\nvoid lcd_draw_circle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color)\n{\n    int a, b;\n    int di;\n\n    a = 0;              // X-coordinate offset\n    b = r;              // Y-coordinate offset\n    di = 3 - (r &lt;&lt; 1);  // Decision parameter for midpoint algorithm\n\n    while (a &lt;= b)\n    {\n        lcd_draw_pixel(x0 - b, y0 - a, color); // 8-way symmetry\n        lcd_draw_pixel(x0 + b, y0 - a, color);\n        lcd_draw_pixel(x0 - a, y0 + b, color);\n        lcd_draw_pixel(x0 - b, y0 - a, color);\n        lcd_draw_pixel(x0 - a, y0 - b, color);\n        lcd_draw_pixel(x0 + b, y0 + a, color);\n        lcd_draw_pixel(x0 + a, y0 - b, color);\n        lcd_draw_pixel(x0 + a, y0 + b, color);\n        lcd_draw_pixel(x0 - b, y0 + a, color);\n        a++;\n\n        if (di &lt; 0) // Update decision parameter\n        {\n            di += 4 * a + 6;\n        }\n        else\n        {\n            di += 10 + 4 * (a - b);\n            b--;\n        }\n\n        lcd_draw_pixel(x0 + a, y0 + b, color); // Draw additional point due to symmetry\n    }\n}\n\n/**\n * @brief       Display a character at a specified position\n * @param       x, y  : Coordinates where the character will be displayed\n * @param       chr   : Character to display, from \" \" to \"~\"\n * @param       size  : Font size, options: 12/16/24/32\n * @param       mode  : Overlay mode (1) or non-overlay mode (0)\n * @param       color : Color of the character\n * @retval      None\n */\nvoid lcd_show_char(uint16_t x, uint16_t y, uint8_t chr, uint8_t size, uint8_t mode, uint16_t color)\n{\n    uint8_t temp = 0, t1 = 0, t = 0;\n    uint8_t *pfont = 0;\n    uint8_t csize = 0;                                      /* Number of bytes for the font matrix of one character */\n    uint16_t colortemp = 0;\n    uint8_t sta = 0;\n\n    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* Calculate font matrix byte size for one character */\n    chr = chr - ' ';                                        /* Offset value (ASCII font starts at space character) */\n\n    if ((x &gt; (lcd_self.width - size / 2)) || (y &gt; (lcd_self.height - size)))\n    {\n        return;\n    }\n\n    lcd_set_window(x, y, x + size / 2 - 1, y + size - 1);   /* Set the window area for the character */\n\n    switch (size)\n    {\n        case 12:\n            pfont = (uint8_t *)asc2_1206[chr];              /* Use 12x6 font */\n            break;\n\n        case 16:\n            pfont = (uint8_t *)asc2_1608[chr];              /* Use 16x8 font */\n            break;\n\n        case 24:\n            pfont = (uint8_t *)asc2_2412[chr];              /* Use 24x12 font */\n            break;\n\n        case 32:\n            pfont = (uint8_t *)asc2_3216[chr];              /* Use 32x16 font */\n            break;\n\n        default:\n            return;\n    }\n\n    if (size != 24)\n    {\n        csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);\n\n        for (t = 0; t &lt; csize; t++)\n        {\n            temp = pfont[t];                                /* Retrieve font matrix data */\n\n            for (t1 = 0; t1 &lt; 8; t1++)\n            {\n                if (temp &amp; 0x80)\n                {\n                    colortemp = color;\n                }\n                else if (mode == 0)                         /* Transparent point, do not display */\n                {\n                    colortemp = 0xFFFF;\n                }\n\n                lcd_write_data16(colortemp);\n                temp &lt;&lt;= 1;\n            }\n        }\n    }\n    else\n    {\n        csize = (size * 16) / 8;\n\n        for (t = 0; t &lt; csize; t++)\n        {\n            temp = asc2_2412[chr][t];\n\n            if (t % 2 == 0)\n            {\n                sta = 8;\n            }\n            else\n            {\n                sta = 4;\n            }\n\n            for (t1 = 0; t1 &lt; sta; t1++)\n            {\n                if (temp &amp; 0x80)\n                {\n                    colortemp = color;\n                }\n                else if (mode == 0)                         /* Transparent point, do not display */\n                {\n                    colortemp = 0xFFFF;\n                }\n\n                lcd_write_data16(colortemp);\n                temp &lt;&lt;= 1;\n            }\n        }\n    }\n}\n\n/**\n * @brief       Function to calculate m raised to the power of n (m^n)\n * @param       m: Base value\n * @param       n: Exponent value\n * @retval      Result of m raised to the power of n (m^n)\n */\nuint32_t lcd_pow(uint8_t m, uint8_t n)\n{\n    uint32_t result = 1;\n\n    while (n--) result *= m; // Multiply the result by m, n times\n\n    return result;\n}\n\n/**\n * @brief       Display a number with a specified length\n * @param       x, y : Starting coordinates\n * @param       num  : Number to display (0 ~ 2^32)\n * @param       len  : Number of digits to display\n * @param       size : Font size (12/16/24/32)\n * @param       color: Color of the number\n * @retval      None\n */\nvoid lcd_show_num(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint16_t color)\n{\n    uint8_t t, temp;\n    uint8_t enshow = 0;\n\n    for (t = 0; t &lt; len; t++)                                               /* Loop through the number of digits to display */\n    {\n        temp = (num / lcd_pow(10, len - t - 1)) % 10;                       /* Extract the digit at the current position */\n\n        if (enshow == 0 &amp;&amp; t &lt; (len - 1))                                   /* If display not enabled and there are more digits */\n        {\n            if (temp == 0)\n            {\n                lcd_show_char(x + (size / 2) * t, y, ' ', size, 0, color);  /* Display a space as a placeholder */\n                continue;                                                   /* Skip to the next digit */\n            }\n            else\n            {\n                enshow = 1;                                                 /* Enable display */\n            }\n        }\n\n        lcd_show_char(x + (size / 2) * t, y, temp + '0', size, 0, color);   /* Display the digit as a character */\n    }\n}\n\n/**\n * @brief       Extended display of a number with a specified length (including leading zeros)\n * @param       x, y : Starting coordinates\n * @param       num  : Number to display (0 ~ 2^32)\n * @param       len  : Number of digits to display\n * @param       size : Font size (12/16/24/32)\n * @param       mode : Display mode\n *              [7]: 0, no padding; 1, pad with zeros.\n *              [6:1]: Reserved\n *              [0]: 0, non-overlay display; 1, overlay display.\n * @param       color: Color of the number\n * @retval      None\n */\nvoid lcd_show_xnum(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint8_t mode, uint16_t color)\n{\n    uint8_t t, temp;\n    uint8_t enshow = 0;\n\n    for (t = 0; t &lt; len; t++)                                                           /* Loop through the number of digits to display */\n    {\n        temp = (num / lcd_pow(10, len - t - 1)) % 10;                                   /* Extract the digit at the current position */\n\n        if (enshow == 0 &amp;&amp; t &lt; (len - 1))                                               /* If display not enabled and there are more digits */\n        {\n            if (temp == 0)\n            {\n                if (mode &amp; 0x80)                                                        /* Pad with zero if enabled */\n                {\n                    lcd_show_char(x + (size / 2) * t, y, '0', size, mode &amp; 0x01, color); /* Display '0' as placeholder */\n                }\n                else\n                {\n                    lcd_show_char(x + (size / 2) * t, y, ' ', size, mode &amp; 0x01, color); /* Display space as placeholder */\n                }\n                continue;\n            }\n            else\n            {\n                enshow = 1;                                                             /* Enable display */\n            }\n        }\n        lcd_show_char(x + (size / 2) * t, y, temp + '0', size, mode &amp; 0x01, color);     /* Display the digit as a character */\n    }\n}\n\n/**\n * @brief       Display a string within a specified area\n * @param       x, y         : Starting coordinates\n * @param       width, height: Dimensions of the display area\n * @param       size         : Font size (12/16/24/32)\n * @param       p            : Pointer to the string\n * @param       color        : Color of the string\n * @retval      None\n */\nvoid lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)\n{\n    uint8_t x0 = x;          // Save the initial x-coordinate\n    width += x;              // Calculate the maximum x-boundary\n    height += y;             // Calculate the maximum y-boundary\n\n    while ((*p &lt;= '~') &amp;&amp; (*p &gt;= ' '))  /* Check if the character is valid */\n    {\n        if (x &gt;= width)      // If the x-coordinate exceeds the width\n        {\n            x = x0;          // Reset to the initial x-coordinate\n            y += size;       // Move to the next line\n        }\n\n        if (y &gt;= height)     // If the y-coordinate exceeds the height, exit\n            break;\n\n        lcd_show_char(x, y, *p, size, 0, color); // Display the current character\n        x += size / 2;       // Move to the next character position\n        p++;                 // Advance the string pointer\n    }\n}\n\n/**\n * @brief       Turn on the LCD\n * @param       None\n * @retval      None (Initialization successful)\n */\nvoid lcd_on(void)\n{\n    LCD_PWR(1);          // Power on the LCD\n    vTaskDelay(10);       // Delay for 10 ms\n}\n\n/**\n * @brief       Turn off the LCD\n * @param       None\n * @retval      None (Initialization successful)\n */\nvoid lcd_off(void)\n{\n    LCD_PWR(0);          // Power off the LCD\n    vTaskDelay(10);       // Delay for 10 ms\n}\n\n/**\n * @brief       Initialize the LCD\n * @param       None\n * @retval      None\n */\nvoid lcd_init(void)\n{\n    int cmd = 0;\n    esp_err_t ret = 0;\n\n    lcd_self.dir = 0;\n    lcd_self.wr = LCD_NUM_WR;                                       /* Configure WR pin */\n    lcd_self.cs = LCD_NUM_CS;                                       /* Configure CS pin */\n    lcd_self.bl = LCD_NUM_BL;                                       /* Configure BL pin */\n    lcd_self.rst = LCD_NUM_RST;                                     /* Configure RST pin */\n\n    gpio_config_t gpio_init_struct;\n\n    /* SPI driver interface configuration */\n    spi_device_interface_config_t devcfg = {\n        .clock_speed_hz = 60 * 1000 * 1000,                         /* SPI clock frequency */\n        .mode = 0,                                                  /* SPI mode 0 */\n        .spics_io_num = lcd_self.cs,                                /* SPI device pin */\n        .queue_size = 7,                                            /* Transaction queue size */\n    };\n\n    /* Add SPI device to the bus */\n    ret = spi_bus_add_device(SPI2_HOST, &amp;devcfg, &amp;MY_LCD_Handle);   /* Configure SPI bus device */\n    ESP_ERROR_CHECK(ret);\n\n    /* Configure WR pin */\n    gpio_init_struct.intr_type = GPIO_INTR_DISABLE;                 /* Disable pin interrupt */\n    gpio_init_struct.mode = GPIO_MODE_OUTPUT;                       /* Set as output mode */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; lcd_self.wr;            /* Configure pin bit mask */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_DISABLE;          /* Disable pull-down */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_ENABLE;               /* Enable pull-up */\n    gpio_config(&amp;gpio_init_struct);                                 /* Apply pin configuration */\n    /* Configure BL pin */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; lcd_self.bl;            /* Configure pin bit mask */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_ENABLE;           /* Enable pull-down */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_DISABLE;              /* Disable pull-up */\n    gpio_config(&amp;gpio_init_struct);                                 /* Apply pin configuration */\n    /* Configure RST pin */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; lcd_self.rst;           /* Configure pin bit mask */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_DISABLE;          /* Disable pull-down */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_ENABLE;               /* Enable pull-up */\n    gpio_config(&amp;gpio_init_struct);                                 /* Apply pin configuration */\n\n    lcd_off();                                                      /* Turn off the LCD */\n    lcd_hard_reset();                                               /* Perform hardware reset */\n\n    /* Initialization sequence for 0.96 inch LCD */\n    lcd_init_cmd_t ili_init_cmds[] =\n    {\n        {0x11, {0}, 0x80},\n        {0x21, {0}, 0x80},\n        {0xB1, {0x05, 0x3A, 0x3A}, 3},\n        {0xB2, {0x05, 0x3A, 0x3A}, 3},\n        {0xB3, {0x05, 0x3A, 0x3A, 0x05, 0x3A, 0x3A}, 6},\n        {0xB4, {0x03}, 1},\n        {0xC0, {0x62, 0x02, 0x04}, 3},\n        {0xC1, {0xC0}, 1},\n        {0xC2, {0x0D, 0x00}, 2},\n        {0xC3, {0x8D, 0x6A}, 2},\n        {0xC4, {0x8D, 0xEE}, 2},\n        {0xC5, {0x0E}, 1},\n        {0xE0, {0x10, 0x0E, 0x02, 0x03, 0x0E, 0x07, 0x02, 0x07, 0x0A, 0x12, 0x27, 0x37, 0x00, 0x0D, 0x0E, 0x10}, 16},\n        {0xE1, {0x10, 0x0E, 0x03, 0x03, 0x0F, 0x06, 0x02, 0x08, 0x0A, 0x13, 0x26, 0x36, 0x00, 0x0D, 0x0E, 0x10}, 16},\n        {0x3A, {0x05}, 1},\n        {0x36, {0xA8}, 1},\n        {0x29, {0}, 0x80},\n        {0, {0}, 0xFF},\n    };\n\n    /* Send initialization sequence */\n    while (ili_init_cmds[cmd].databytes != 0xFF)\n    {\n        lcd_write_cmd(ili_init_cmds[cmd].cmd);\n        lcd_write_data(ili_init_cmds[cmd].data, ili_init_cmds[cmd].databytes &amp; 0x1F);\n\n        if (ili_init_cmds[cmd].databytes &amp; 0x80)\n        {\n            vTaskDelay(120);\n        }\n\n        cmd++;\n    }\n\n    lcd_display_dir(1);                                             /* Set screen orientation */\n    lcd_clear(WHITE);                                               /* Clear the screen */\n    lcd_on();                                                       /* Turn on the LCD */\n}\n</code></pre>"},{"location":"INTERFACING/LCD/lcd/#mainc","title":"main.c","text":"<pre><code>/**\n * @file main.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief \n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"rgb.h\"\n#include \"key.h\"\n#include \"exit.h\"\n#include \"lcd.h\"\n#include \"spi.h\"\n\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    uint8_t x = 0;\n    esp_err_t ret;\n\n\n    ret = nvs_flash_init();\n\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n\n    led_init();\n    spi2_init();\n    lcd_init();\n    vTaskDelay(500);\n\n    while (1)\n    {\n        switch (x)\n        {\n            case 0:\n            {\n                lcd_clear(WHITE);\n                break;\n            }\n            case 1:\n            {\n                lcd_clear(BLACK);\n                break;\n            }\n            case 2:\n            {\n                lcd_clear(BLUE);\n                break;\n            }\n            case 3:\n            {\n                lcd_clear(RED);\n                break;\n            }\n            case 4:\n            {\n                lcd_clear(MAGENTA);\n                break;\n            }\n            case 5:\n            {\n                lcd_clear(GREEN);\n                break;\n            }\n            case 6:\n            {\n                lcd_clear(CYAN);\n                break;\n            }\n            case 7:\n            {\n                lcd_clear(YELLOW);\n                break;\n            }\n            case 8:\n            {\n                lcd_clear(BRRED);\n                break;\n            }\n            case 9:\n            {\n                lcd_clear(GRAY);\n                break;\n            }\n            case 10:\n            {\n                lcd_clear(LGRAY);\n                break;\n            }\n            case 11:\n            {\n                lcd_clear(BROWN);\n                break;\n            }\n        }\n\n        lcd_show_string(0, 0, 240, 32, 32, \"ESP32\", RED);\n        lcd_show_string(0, 33, 240, 24, 24, \"SPILCD TEST\", RED);\n        lcd_show_string(0, 60, 240, 16, 16, \"CSW@NTU\", RED);\n        x++;\n\n        if (x == 12)\n        {\n            x = 0;\n        }\n\n        rgb_toggle();\n        vTaskDelay(500);\n    }\n}\n</code></pre>"},{"location":"INTERFACING/LED/led/","title":"LED","text":""},{"location":"INTERFACING/LED/led/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we will talk about the onboard LED light on the DNESP32S3M development board.</p> <p></p>"},{"location":"INTERFACING/LED/led/#overview","title":"Overview","text":"<p>In the project, we created a new directory named <code>LED</code> under the <code>components</code> directory to store the LED driver code, including the <code>led.h</code> and <code>led.c</code> files.</p>"},{"location":"INTERFACING/LED/led/#pin-configuration","title":"Pin Configuration","text":"<p>According to the schematic, the onboard LED light is connected to GPIO1.</p> <p></p>"},{"location":"INTERFACING/LED/led/#code","title":"Code","text":""},{"location":"INTERFACING/LED/led/#ledh","title":"LED.h","text":"<pre><code>/**\n * @file led.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief The led here indicates the onboard red led on the Alientek DNESP32S3M minimal development board.\n * @version 1.0\n * @date 2024-11-16\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __LED_H__\n#define __LED_H__\n\n/* Dependencies */\n#include \"driver/gpio.h\"\n\n/* GPIO Pin Definition */\n#define LED_GPIO_PIN    GPIO_NUM_1  /* GPIO port connected to LED */\n\n/* GPIO States */\n#define LED_PIN_RESET       0\n#define LED_PIN_SET         1\n\n/**\n * @brief       Initialize the LED\n * @param       None\n * @retval      None\n */\nvoid led_init(void);\n\n/**\n * @brief       Control the LED\n * @param       x: 1 for on, 0 for off\n * @retval      None\n */\nvoid led(int x);\n\n/**\n * @brief       Toggle the LED\n * @param       None\n * @retval      None\n */\nvoid led_toggle(void);\n\n#endif /* __LED_H__ */\n</code></pre>"},{"location":"INTERFACING/LED/led/#ledc","title":"LED.c","text":"<pre><code>/**\n * @file led.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief The led here indicates the onboard red led on the Alientek DNESP32S3M minimal development board.\n * @version 1.0\n * @date 2024-11-16\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n#include \"led.h\"\n\n/**\n * @brief       Initialize the LED\n * @param       None\n * @retval      None\n */\nvoid led_init(void)\n{\n    gpio_config_t gpio_init_struct = {0};\n\n    gpio_init_struct.intr_type = GPIO_INTR_DISABLE;         /* Disable GPIO interrupt */\n    gpio_init_struct.mode = GPIO_MODE_INPUT_OUTPUT;         /* Set GPIO mode to input-output */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_ENABLE;       /* Enable pull-up resistor */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_DISABLE;  /* Disable pull-down resistor */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; LED_GPIO_PIN;   /* Set pin bit mask for the configured pin */\n    gpio_config(&amp;gpio_init_struct);                         /* Configure GPIO */\n\n    led(1); /* Turn on the LED */\n}\n\n/**\n * @brief       Control the LED\n * @param       x: 1 for on, 0 for off\n * @retval      None\n */\nvoid led(int x)\n{\n    if(x)\n    {\n        gpio_set_level(LED_GPIO_PIN, LED_PIN_RESET);\n    }\n    else\n    {\n        gpio_set_level(LED_GPIO_PIN, LED_PIN_SET);\n    }\n}\n\n/**\n * @brief       Toggle the LED\n * @param       None\n * @retval      None\n */\nvoid led_toggle(void)\n{\n    gpio_set_level(LED_GPIO_PIN, !gpio_get_level(LED_GPIO_PIN));\n}\n</code></pre>"},{"location":"INTERFACING/LED/led/#core-functions","title":"Core Functions","text":""},{"location":"INTERFACING/LED/led/#led_init","title":"led_init()","text":"<p>Note</p> <p>\u521d\u59cb\u5316LED\u706f\u3002</p>"},{"location":"INTERFACING/LED/led/#led_1","title":"led()","text":"<p>Note</p> <p>\u63a7\u5236LED\u706f\u3002</p>"},{"location":"INTERFACING/LED/led/#led_toggle","title":"led_toggle()","text":"<p>Note</p> <p>\u7ffb\u8f6cLED\u706f\u3002</p>"},{"location":"INTERFACING/LED/led/#test-program","title":"Test Program","text":"<p>Replace the content of the <code>main</code> function in the <code>main.c</code> file with the following code:</p> <pre><code>/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    // BSP\n    led_init(); \n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        led_toggle();\n        vTaskDelay(1000);\n    }\n}\n</code></pre>"},{"location":"INTERFACING/RGB/rgb/","title":"RGB LED","text":""},{"location":"INTERFACING/RGB/rgb/#introduction","title":"Introduction","text":"<p>Note</p> <p>In this section, we will talk about the onboard RGB LED light on the DNESP32S3M development board.</p>"},{"location":"INTERFACING/RGB/rgb/#overview","title":"Overview","text":"<p>In the project, we created a new directory named <code>RGB</code> under the <code>components</code> directory to store the RGB LED driver code, including the <code>rgb.h</code> and <code>rgb.c</code> files.</p>"},{"location":"INTERFACING/RGB/rgb/#pin-configuration","title":"Pin Configuration","text":"<p>Please refer to the following table for the connection.</p> RGB LED Module Pin Main Control Pin R GPIO_NUM_19 G GPIO_NUM_20 B GPIO_NUM_21 GND GND <p></p>"},{"location":"INTERFACING/RGB/rgb/#code","title":"Code","text":""},{"location":"INTERFACING/RGB/rgb/#rgbh","title":"RGB.h","text":"<pre><code>/**\n * @file rgb.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This driver can be used for external RGB LED modules.\n * @version 1.0\n * @date 2024-11-16\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __RGB_H__\n#define __RGB_H__\n\n/* Dependencies */\n#include \"driver/gpio.h\"\n\n/* GPIO Pin Definition */\n#define RGB_R_GPIO_PIN  GPIO_NUM_19  /* GPIO port connected to RGB Red */\n#define RGB_G_GPIO_PIN  GPIO_NUM_20  /* GPIO port connected to RGB Green */\n#define RGB_B_GPIO_PIN  GPIO_NUM_21  /* GPIO port connected to RGB Blue */\n\n/* GPIO States */\n#define RGB_PIN_RESET   0\n#define RGB_PIN_SET     1\n\n/**\n * @brief       Initialize the RGB LED\n * @param       None\n * @retval      None\n */\nvoid rgb_init(void);\n\n/**\n * @brief       Control the RGB LED\n * @param       r: 1 for on, 0 for off\n * @param       g: 1 for on, 0 for off\n * @param       b: 1 for on, 0 for off\n * @retval      None\n */\nvoid rgb(int r, int g, int b);\n\n/**\n * @brief       Toggle the RGB LED\n * @param       None\n * @retval      None\n */\nvoid rgb_toggle(void);\n\n#endif /* __RGB_H__ */\n</code></pre>"},{"location":"INTERFACING/RGB/rgb/#rgbc","title":"RGB.c","text":"<pre><code>/**\n * @file rgb.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This driver can be used for external RGB LED modules.\n * @version 1.0\n * @date 2024-11-16\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n#include \"rgb.h\"\n\n/**\n * @brief       Initialize the RGB LED\n * @param       None\n * @retval      None\n */\nvoid rgb_init(void)\n{\n    gpio_config_t gpio_init_struct = {0};\n\n    gpio_init_struct.intr_type = GPIO_INTR_DISABLE;         /* Disable GPIO interrupt */\n    gpio_init_struct.mode = GPIO_MODE_INPUT_OUTPUT;         /* Set GPIO mode to input-output */\n    gpio_init_struct.pull_up_en = GPIO_PULLUP_ENABLE;       /* Enable pull-up resistor */\n    gpio_init_struct.pull_down_en = GPIO_PULLDOWN_DISABLE;  /* Disable pull-down resistor */\n    gpio_init_struct.pin_bit_mask = 1ull &lt;&lt; RGB_R_GPIO_PIN; /* Set pin bit mask for the configured pin */\n    gpio_init_struct.pin_bit_mask |= 1ull &lt;&lt; RGB_G_GPIO_PIN; /* Set pin bit mask for the configured pin */\n    gpio_init_struct.pin_bit_mask |= 1ull &lt;&lt; RGB_B_GPIO_PIN; /* Set pin bit mask for the configured pin */\n    gpio_config(&amp;gpio_init_struct);                         /* Configure GPIO */\n\n    rgb(1, 1, 1); /* Turn on the RGB LED */\n}\n\n/**\n * @brief       Control the RGB LED\n * @param       r: 1 for on, 0 for off\n * @param       g: 1 for on, 0 for off\n * @param       b: 1 for on, 0 for off\n * @retval      None\n */\nvoid rgb(int r, int g, int b)\n{\n    if(r)\n    {\n        gpio_set_level(RGB_R_GPIO_PIN, RGB_PIN_SET);\n    }\n    else\n    {\n        gpio_set_level(RGB_R_GPIO_PIN, RGB_PIN_RESET);\n    }\n\n    if(g)\n    {\n        gpio_set_level(RGB_G_GPIO_PIN, RGB_PIN_SET);\n    }\n    else\n    {\n        gpio_set_level(RGB_G_GPIO_PIN, RGB_PIN_RESET);\n    }\n\n    if(b)\n    {\n        gpio_set_level(RGB_B_GPIO_PIN, RGB_PIN_SET);\n    }\n    else\n    {\n        gpio_set_level(RGB_B_GPIO_PIN, RGB_PIN_RESET);\n    }\n}\n\n/**\n * @brief       Toggle the RGB LED\n * @param       None\n * @retval      None\n */\nvoid rgb_toggle(void)\n{\n    gpio_set_level(RGB_R_GPIO_PIN, !gpio_get_level(RGB_R_GPIO_PIN));\n    gpio_set_level(RGB_G_GPIO_PIN, !gpio_get_level(RGB_G_GPIO_PIN));\n    gpio_set_level(RGB_B_GPIO_PIN, !gpio_get_level(RGB_B_GPIO_PIN));\n}\n</code></pre>"},{"location":"INTERFACING/RGB/rgb/#core-functions","title":"Core Functions","text":""},{"location":"INTERFACING/RGB/rgb/#rgb_init","title":"rgb_init()","text":"<p>Note</p> <p>Initialize the RGB LED.</p>"},{"location":"INTERFACING/RGB/rgb/#rgbint-r-int-g-int-b","title":"rgb(int r, int g, int b)","text":"<p>Note</p> <p>Control the RGB LED.</p>"},{"location":"INTERFACING/RGB/rgb/#rgb_toggle","title":"rgb_toggle()","text":"<p>Note</p> <p>Toggle the RGB LED.</p>"},{"location":"INTERFACING/RGB/rgb/#test-program","title":"Test Program","text":"<p>Replace the content of the <code>main</code> function in the <code>main.c</code> file with the following code:</p> <pre><code>/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"rgb.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    // BSP\n    led_init(); \n    rgb_init();\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        led_toggle();\n        rgb(1, 0, 0);\n        vTaskDelay(200);\n        rgb(0, 1, 0);\n        vTaskDelay(200);\n        rgb(0, 0, 1);\n        vTaskDelay(200);\n        rgb(1, 1, 0);\n        vTaskDelay(200);\n        rgb(1, 0, 1);\n        vTaskDelay(200);\n        rgb(0, 1, 1);\n        vTaskDelay(200);\n        rgb(1, 1, 1);\n        vTaskDelay(200);\n    }\n}\n</code></pre>"},{"location":"MAIN-CONTROL/RNG/rng/","title":"RNG (Random Number Generator)","text":"<p>Info</p> <p>ESP32-S3 features a true random number generator (RNG) that generates 32-bit random numbers, which can serve as a basis for operations such as encryption. Unlike algorithm-based generators, the ESP32-S3 RNG produces true random numbers through physical processes, ensuring an equal probability of occurrence for all numbers within a specific range.</p>"},{"location":"MAIN-CONTROL/RNG/rng/#rng-features","title":"RNG Features","text":"<p>To better understand the RNG, let's first examine its noise sources. Familiarizing yourself with the noise sources provides a solid foundation for programming and offers a clearer perspective on its workings. The noise sources of the ESP32-S3 RNG are illustrated below:</p> <p></p> <p>The ESP32 RNG generates 32-bit true random numbers via the RNG_DATA_REG register. Its noise sources mainly include thermal noise and asynchronous clocks: - Thermal noise originates from the SAR ADC or high-speed ADC. When these modules are active, they generate bitstreams that are processed through an XOR operation to serve as random seeds for the RNG. - When the RC_FAST_CLK (20MHz) is enabled for the digital core, the RNG samples the clock, leveraging its metastable characteristics to increase entropy.</p> <p>For maximum entropy, it is recommended to enable at least one ADC (SAR ADC or high-speed ADC) as a random seed source in conjunction with the RC_FAST_CLK.</p>"},{"location":"MAIN-CONTROL/RNG/rng/#rng-random-number-register","title":"RNG Random Number Register","text":"<p>RNG_DATA_REG Random Number Data 0x0110 Read-only</p> <p></p>"},{"location":"MAIN-CONTROL/RNG/rng/#example","title":"Example","text":"<p>This example demonstrates how to use the ESP32-S3 built-in hardware random number generator (RNG) to obtain random numbers and display them on an LCD screen. Pressing the BOOT button retrieves a random number. Additionally, the program continuously generates random numbers in the range of 0 to 9 and displays them on the screen. The LED blinks to indicate that the program is running.</p>"},{"location":"MAIN-CONTROL/RNG/rng/#resources-used","title":"Resources Used","text":"<p>LED: IO1 Independent Button: BOOT button 0.96-inch LCD RNG: Hardware Random Number Generator</p>"},{"location":"MAIN-CONTROL/RNG/rng/#key-modules-and-functions","title":"Key Modules and Functions","text":"<p>Begin by importing the header file:</p> <pre><code>#include \"esp_random.h\"\n</code></pre> <p>Key function:</p> <pre><code>uint32_t esp_random(void);\n</code></pre>"},{"location":"MAIN-CONTROL/RNG/rng/#code","title":"Code","text":""},{"location":"MAIN-CONTROL/RNG/rng/#rngh","title":"rng.h","text":"<pre><code>/**\n * @file rng.h\n * @author \n * @brief This is the header file for the RNG component.\n * @version 1.0\n * @date 2024-11-19\n * @ref Alientek RNG Driver\n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __RNG_H__\n#define __RNG_H__\n\n#include &lt;stdint.h&gt;\n#include &lt;stddef.h&gt;\n#include &lt;string.h&gt;\n#include &lt;sys/param.h&gt;\n#include \"esp_attr.h\"\n#include \"esp_cpu.h\"\n#include \"soc/wdev_reg.h\"\n#include \"esp_random.h\"\n#include \"esp_private/esp_clk.h\"\n\n\n/* Function Declarations */\n\n/**\n * @brief       Get a random number\n * @param       None\n * @retval      Random number (32-bit)\n */\nuint32_t rng_get_random_num(void);          /* Get a random number */\n\n/**\n * @brief       Get a random number within a specific range\n * @param       min,max: Minimum and maximum values\n * @retval      Random number (rval), satisfying: min &lt;= rval &lt;= max\n */\nint rng_get_random_range(int min, int max); /* Get a random number within a specific range */\n\n#endif\n</code></pre>"},{"location":"MAIN-CONTROL/RNG/rng/#rngc","title":"rng.c","text":"<pre><code>/**\n * @file rng.c\n * @author \n * @brief This is the source file for the RNG component.\n * @version 1.0\n * @date 2024-11-19\n * @ref Alientek RNG Driver\n * @copyright Copyright (c) 2024\n * \n */\n\n#include \"rng.h\"\n\n/**\n * @brief       Get a random number\n * @param       None\n * @retval      Random number (32-bit)\n */\nuint32_t rng_get_random_num(void)\n{\n    uint32_t randomnum;\n\n    randomnum = esp_random();\n\n    return randomnum;\n}\n\n/**\n * @brief       Get a random number within a specific range\n * @param       min,max: Minimum and maximum values\n * @retval      Random number (rval), satisfying: min &lt;= rval &lt;= max\n */\nint rng_get_random_range(int min, int max)\n{ \n    uint32_t randomnum;\n\n    randomnum = esp_random();\n\n    return randomnum % (max - min + 1) + min;\n}\n</code></pre> <p>Tip</p> <p>\u8bf7\u5c06rng.h\u548crng.c\u6dfb\u52a0\u5230CMakelists.txt\u4e2d\u5bf9\u5e94\u533a\u57df\u3002</p>"},{"location":"MAIN-CONTROL/RNG/rng/#mainc","title":"main.c","text":"<pre><code>/**\n * @file main.c\n * @author\n * @brief Main application to demonstrate the use of ESP32 internal temperature sensor\n * @version 1.0\n * @date 2024-11-17\n *\n * @copyright Copyright (c) 2024\n *\n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"rgb.h\"\n#include \"key.h\"\n#include \"exit.h\"\n#include \"lcd.h\"\n#include \"spi.h\"\n#include \"esp_rtc.h\"\n#include \"temp.h\"\n#include \"rng.h\"\n\nvoid app_main(void)\n{\n    uint8_t key;\n    uint32_t random;\n    uint8_t t = 0;\n    esp_err_t ret;\n\n    ret = nvs_flash_init();                                         /* Initialize NVS */\n\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n\n    led_init();                                                     /* Initialize LED */\n    spi2_init();                                                    /* Initialize SPI2 */\n    lcd_init();                                                     /* Initialize LCD */\n    key_init();                                                     /* Initialize keys */\n\n    lcd_show_string(0, 0, 200, 16, 16, \"RNG Test\", RED);\n    lcd_show_string(0, 20, 200, 16, 16, \"BOOT:Get Random Num\", RED);\n    lcd_show_string(0, 40, 200, 16, 16, \"Num:\", RED);\n    lcd_show_string(0, 60, 200, 16, 16, \"Num[0-9]:\", RED);\n\n    while(1)\n    {\n        key = key_scan(0);\n\n        if (key == BOOT)                                            /* Get a random number and display on LCD */\n        {\n            random = rng_get_random_num();\n            lcd_show_num(30 + 8 * 5, 40, random, 10, 16, BLUE);\n        }\n\n        if ((t % 20) == 0)                                          /* Get a random number [0,9] and display on LCD */\n        {\n            led_toggle();                                           /* Toggle LED every 200ms */\n            random = rng_get_random_range(0, 9);                    /* Generate a random number in [0,9] range */\n            lcd_show_num(32 + 8 * 11, 60, random, 1, 16, BLUE);     /* Display the random number */\n        }\n\n        vTaskDelay(10);\n        t++;\n    }\n}\n</code></pre>"},{"location":"MAIN-CONTROL/RTC/rtc/","title":"Real Time Clock (RTC)","text":"<p>Note</p> <p>This chapter introduces the use of the ESP32-S3 real-time clock (RTC). The real-time clock can provide an accurate time for the system. Even if the system is reset or the main power is cut off, the RTC can still run. Therefore, the RTC is often used in various low-power scenarios.</p> <p>Real Time Clock</p> <p>RTC (Real Time Clock) refers to a clock installed on an electronic device or an IC (integrated circuit) that implements its functions.</p> <p>When you call it a \"clock\" in digital circuits, you may think of a periodic signal, but in English, \"clock\" also means \"clock\". So why do we need a separate RTC?</p> <p>The reason is that the CPU's timer clock function only runs when it is \"started\" or \"powered on\" and stops when it is powered off. Of course, if the clock cannot continuously track time, you must manually set the time.</p> <p>Usually, the RTC is equipped with a separate power source, such as a button battery (backup battery). Even if the power of the DNESP32S3M minimum system board is turned off, it can still operate and display the time in real-time. Then, when the DNESP32S3M minimum system board is turned on again, the built-in timer clock of the computer reads the current time from the RTC and displays the time based on its own mechanism while being powered. By the way, since the button battery is relatively cheap and has a long service life, the RTC can operate at a very low cost. Based on this function, it can also be used as memory.</p> <p>Note</p> <p>In the ESP32-S3, there is no RTC peripheral like the STM32 chip, but there is a system time. By using the system time, the function of a real-time clock can also be realized. The ESP32-S3 uses two hardware clock sources to establish and maintain system time. Depending on the application purpose and the accuracy requirements of the system time, you can use only one of the clock sources or both clock sources at the same time. These two hardware clock sources are the RTC timer and the high-resolution timer. By default, both timers are used. We will introduce them one by one below.</p>"},{"location":"MAIN-CONTROL/RTC/rtc/#use-cases","title":"Use Cases","text":"<ol> <li>Display the RTC time in real-time through the LCD</li> <li>The LED blinks to indicate that the program is running</li> </ol>"},{"location":"MAIN-CONTROL/RTC/rtc/#involved-resources","title":"Involved Resources","text":"<ol> <li>LED</li> <li>0.96-inch LCD</li> <li>RTC</li> </ol>"},{"location":"MAIN-CONTROL/RTC/rtc/#dependencies","title":"Dependencies","text":"<p>newlib</p>"},{"location":"MAIN-CONTROL/RTC/rtc/#code","title":"Code","text":""},{"location":"MAIN-CONTROL/RTC/rtc/#esp_rtch","title":"esp_rtc.h","text":"<pre><code>/**\n * @file esp_rtc.h\n * ! Do not name as rtc.h, as it will conflict with the built-in rtc.h\n * @author \n * @brief Header file for the RTC driver\n * @version 1.0\n * @date 2024-11-18\n * @ref Alienteck RTC Driver\n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __ESP_RTC_H__\n#define __ESP_RTC_H__\n\n#include \"driver/spi_master.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include &lt;sys/time.h&gt;\n\n/* Time structure, including year, month, day, week, hour, minute, and second */\ntypedef struct\n{\n    uint8_t hour;       /* Hour */\n    uint8_t min;        /* Minute */\n    uint8_t sec;        /* Second */\n    /* Gregorian year, month, day, and week */\n    uint16_t year;      /* Year */\n    uint8_t  month;     /* Month */\n    uint8_t  date;      /* Day */\n    uint8_t  week;      /* Weekday */\n} _calendar_obj;\n\nextern _calendar_obj calendar;      /* Time structure */\n\n/* Function declarations */\n/**\n * @brief       Set the RTC time\n * @param       year    : Year\n * @param       mon     : Month\n * @param       mday    : Day\n * @param       hour    : Hour\n * @param       min     : Minute\n * @param       sec     : Second\n * @retval      None\n */\nvoid rtc_set_time(int year, int mon, int mday, int hour, int min, int sec);  /* Set time */\n\n/**\n * @brief       Get the current time\n * @param       None\n * @retval      None\n */\nvoid rtc_get_time(void);                                                     /* Get time */\n\n/**\n * @brief       Convert year, month, and day to the day of the week\n * @note        Calculates the weekday based on the Gregorian calendar.\n *              Utilizes the Kim Larson formula for calculation.\n *              For more details, refer to:\n *              https://www.cnblogs.com/fengbohello/p/3264300.html\n * @param       year : Year\n * @param       month: Month\n * @param       day  : Day\n * @retval      0: Sunday; 1 ~ 6: Monday ~ Saturday\n */\nuint8_t rtc_get_week(uint16_t year, uint8_t month, uint8_t day);             /* Get the weekday */\n\n#endif /* __RTC_H__ */\n</code></pre>"},{"location":"MAIN-CONTROL/RTC/rtc/#esp_rtcc","title":"esp_rtc.c","text":"<pre><code>/**\n * @file esp_rtc.c\n * ! Do not name as rtc.c, as it will conflict with the built-in rtc.c\n * @author \n * @brief This file contains the implementation of the RTC driver\n * @version 1.0\n * @date 2024-11-18\n * @ref Alienteck RTC Driver\n * \n */\n\n#include \"esp_rtc.h\"\n\n_calendar_obj calendar;         /* Time structure */\n\n/**\n * @brief       Set the RTC time\n * @param       year    : Year\n * @param       mon     : Month\n * @param       mday    : Day\n * @param       hour    : Hour\n * @param       min     : Minute\n * @param       sec     : Second\n * @retval      None\n */\nvoid rtc_set_time(int year, int mon, int mday, int hour, int min, int sec)\n{\n    struct tm datetime;\n    /* Set time */\n    datetime.tm_year = year - 1900;\n    datetime.tm_mon = mon - 1;\n    datetime.tm_mday = mday;\n    datetime.tm_hour = hour;\n    datetime.tm_min = min;\n    datetime.tm_sec = sec;\n    datetime.tm_isdst = -1;\n    /* Get total seconds since 1970-01-01 */\n    time_t second = mktime(&amp;datetime);\n    struct timeval val = { .tv_sec = second, .tv_usec = 0 };\n    /* Set current time */\n    settimeofday(&amp;val, NULL);\n}\n\n/**\n * @brief       Get the current time\n * @param       None\n * @retval      None\n */\nvoid rtc_get_time(void)\n{\n    struct tm *datetime;\n    time_t second;\n    /* Get the time elapsed since (1970-01-01 00:00:00 UTC) in seconds */\n    time(&amp;second);\n    datetime = localtime(&amp;second);\n\n    calendar.hour = datetime-&gt;tm_hour;          /* Hour */\n    calendar.min = datetime-&gt;tm_min;            /* Minute */\n    calendar.sec = datetime-&gt;tm_sec;            /* Second */\n    /* Gregorian year, month, day, and week */\n    calendar.year = datetime-&gt;tm_year + 1900;   /* Year */\n    calendar.month = datetime-&gt;tm_mon + 1;      /* Month */\n    calendar.date = datetime-&gt;tm_mday;          /* Day */\n    /* Weekday */\n    calendar.week = rtc_get_week(calendar.year, calendar.month, calendar.date);\n}\n\n/**\n * @brief       Convert year, month, and day to the day of the week\n * @note        Calculates the weekday based on the Gregorian calendar.\n *              Utilizes the Kim Larson formula for calculation.\n *              For more details, refer to:\n *              https://www.cnblogs.com/fengbohello/p/3264300.html\n * @param       year : Year\n * @param       month: Month\n * @param       day  : Day\n * @retval      0: Sunday; 1 ~ 6: Monday ~ Saturday\n */\nuint8_t rtc_get_week(uint16_t year, uint8_t month, uint8_t day)\n{\n    uint8_t week = 0;\n\n    if (month &lt; 3)\n    {\n        month += 12;\n        --year;\n    }\n\n    week = (day + 1 + 2 * month + 3 * (month + 1) / 5 + year + (year &gt;&gt; 2) - year / 100 + year / 400) % 7;\n    return week;\n}\n</code></pre> <p>Tip</p> <p>CMakelists.txt \u4e2d\u6dfb\u52a0 rtc.h, rtc.c\u6240\u5728\u8def\u5f84\uff0c\u5206\u522b\u6dfb\u52a0\u5230\u5934\u6587\u4ef6\u548c\u6e90\u6587\u4ef6\u5bf9\u5e94\u4f4d\u7f6e\u3002\u6b64\u5916\uff0c\u5728\u4f9d\u8d56\u4e2d\u6dfb\u52a0 newlib\u3002</p>"},{"location":"MAIN-CONTROL/RTC/rtc/#mainc","title":"main.c","text":"<pre><code>/**\n * @file main.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief \n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"rgb.h\"\n#include \"key.h\"\n#include \"exit.h\"\n#include \"lcd.h\"\n#include \"spi.h\"\n#include \"esp_rtc.h\"\n\n/* Global variables */\nchar* weekdays[]={\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\n                  \"Thursday\",\"Friday\",\"Saterday\"};\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint8_t tbuf[40];\n    uint8_t t = 0;\n\n\n    ret = nvs_flash_init();             \n\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n\n    led_init();                         \n    spi2_init();                        \n    lcd_init();                         \n    rtc_set_time(2024,10,18,00,00,00);   \n\n    while (1)\n    {\n        t++;\n\n        if ((t % 10) == 0)              \n        {\n            rtc_get_time();\n            sprintf((char *)tbuf, \"Time:%02d:%02d:%02d\", calendar.hour, calendar.min, calendar.sec);\n            printf(\"Time:%02d:%02d:%02d\\r\\n\", calendar.hour, calendar.min, calendar.sec);\n            lcd_show_string(0, 0, 210, 16, 16, (char *)tbuf,BLUE);\n            sprintf((char *)tbuf, \"Date:%04d-%02d-%02d\", calendar.year, calendar.month, calendar.date);\n            printf(\"Date:%02d-%02d-%02d\\r\\n\",  calendar.year,  calendar.month,  calendar.date);\n            lcd_show_string(0, 30, 210, 16, 16, (char *)tbuf,BLUE);\n            sprintf((char *)tbuf, \"Week:%s\", weekdays[calendar.week - 1]);\n            lcd_show_string(0, 60, 210, 16, 16, (char *)tbuf,BLUE);\n        }\n\n        if ((t % 20) == 0)\n        {\n            led_toggle();               \n        }\n\n        vTaskDelay(10);\n    }\n}\n</code></pre>"},{"location":"MAIN-CONTROL/SPI/spi/","title":"SPI","text":""},{"location":"MAIN-CONTROL/SPI/spi/#spi-introduction","title":"SPI INTRODUCTION","text":"<p>Serial Peripheral Interface</p> <p>SPI (Serial Peripheral Interface) is, as the name suggests, a serial communication interface for peripheral devices. It was originally defined by Motorola for its MC68HCXX series processors. SPI is a high-speed, full-duplex, synchronous serial communication bus and has been widely used in communication between many MCUs, storage chips, AD converters, and LCDs. Similar to I2C communication, SPI allows one master device and one or more slave devices on the communication bus. To communicate with a slave device, the master device requires at least four data lines:</p> <ul> <li> <p>MOSI (Master Out / Slave In): Master data output, slave data input, used for the master to send data to the slave.</p> </li> <li> <p>MISO (Master In / Slave Out): Master data input, slave data output, used for the slave to send data to the master.</p> </li> <li> <p>SCLK (Serial Clock): Clock signal generated by the master device to determine the communication rate.</p> </li> <li> <p>CS (Chip Select): Slave device chip select signal generated by the master device; the slave device is selected when the signal is low.</p> </li> </ul> <p>Multiple slave SPI communication networks are connected as shown in the diagram below:</p> <p></p> <p>From the diagram, it can be observed that the MOSI, MISO, and SCLK pins are connected to every device on the SPI bus. If the CS pin is set to low, the slave device listens to and communicates with the master. The SPI master can communicate with only one slave at a time. To communicate with another slave device, the master must terminate the current communication before starting a new one.</p> <p>SPI communication operates in four different modes. Some slave devices may be pre-configured at the factory to operate in a specific mode, which cannot be changed. Both the master and slave must operate in the same mode for successful communication. The SPI mode is determined by configuring CPOL (Clock Polarity) and CPHA (Clock Phase).</p> <ul> <li>CPOL (Clock Polarity): Refers to the idle state of the clock signal when no data is being transmitted. If the idle state is high, CPOL = 1; if the idle state is low, CPOL = 0.</li> <li>CPHA (Clock Phase): Refers to the clock edge at which data is sampled. CPHA = 0 means data is sampled on the first edge (odd edge), determined by CPOL (either rising or falling edge). CPHA = 1 means data is sampled on the second edge (even edge).</li> </ul> <p></p> <p>1) Mode 0 (CPOL=0, CPHA=0):    In idle state, SCLK is low. Data is sampled on the first edge, which is the rising edge (SCLK transitions from low to high). Data is transmitted on the falling edge.</p> <p>2) Mode 1 (CPOL=0, CPHA=1):    In idle state, SCLK is low. Data is sampled on the second edge, which is the falling edge (SCLK transitions from high to low). Data is transmitted on the rising edge.</p> <p>3) Mode 2 (CPOL=1, CPHA=0):    In idle state, SCLK is high. Data is sampled on the first edge, which is the falling edge (SCLK transitions from high to low). Data is transmitted on the rising edge.</p> <p>4) Mode 3 (CPOL=1, CPHA=1):    In idle state, SCLK is high. Data is sampled on the second edge, which is the rising edge (SCLK transitions from low to high). Data is transmitted on the falling edge.</p>"},{"location":"MAIN-CONTROL/SPI/spi/#esp32-s3-spi-controller","title":"ESP32-S3 SPI Controller","text":"<p>The ESP32-S3 chip integrates four SPI controllers: SPI0, SPI1, SPI2, and SPI3. Among these, SPI0 and SPI1 are primarily used internally to access external FLASH and PSRAM, leaving SPI2 and SPI3 available for general use. SPI2 is also known as HSPI, and SPI3 is referred to as VSPI. Both are classified as GP-SPI (General Purpose SPI).</p>"},{"location":"MAIN-CONTROL/SPI/spi/#gp-spi-features","title":"GP-SPI Features:","text":"<ul> <li>Supports both master and slave modes.</li> <li>Supports half-duplex and full-duplex communication.</li> <li>Supports multiple data modes:</li> <li>SPI2: 1-bit SPI mode, 2-bit Dual SPI mode, 4-bit Quad SPI mode, QPI mode, 8-bit Octal mode, and OPI mode.</li> <li>SPI3: 1-bit SPI mode, 2-bit Dual SPI mode, 4-bit Quad SPI mode, and QPI mode.</li> <li>Configurable clock frequency:</li> <li>In master mode: Up to 80 MHz.</li> <li>In slave mode: Up to 60 MHz.</li> <li>Configurable read/write order for data bits.</li> <li>Configurable clock polarity (CPOL) and phase (CPHA).</li> <li>Supports four SPI clock modes (Mode 0 to Mode 3).</li> <li>Provides multiple CS (Chip Select) lines in master mode:</li> <li>SPI2: CS0 ~ CS5.</li> <li>SPI3: CS0 ~ CS2.</li> <li>Supports interfacing with SPI-connected devices such as sensors, display controllers, flash, or RAM chips.</li> </ul> <p>The SPI2 and SPI3 interface signal lines can be mapped to chip pins through the GPIO matrix and IO_MUX, offering great flexibility in pin assignment.</p>"},{"location":"MAIN-CONTROL/SPI/spi/#test-case","title":"Test Case","text":"<p>This section demonstrates using SPI to control an LCD display. Please refer to the LCD chapter for detailed guidance. The test case is as follows:</p> <p>\"After pressing reset, the SPI LCD module will continuously display some information and switch background colors. The blinking LED indicates that the program is running.\"</p>"},{"location":"MAIN-CONTROL/SPI/spi/#circuit-diagram","title":"Circuit Diagram","text":""},{"location":"MAIN-CONTROL/SPI/spi/#dependencies","title":"Dependencies","text":"<p>ESP-IDF provides a set of APIs to use SPI. To enable this functionality, the necessary header files must be included:</p> <pre><code>#include \"driver/spi_master.h\"\n</code></pre>"},{"location":"MAIN-CONTROL/SPI/spi/#key-function-analysis","title":"Key Function Analysis","text":""},{"location":"MAIN-CONTROL/SPI/spi/#initialization-and-configuration","title":"Initialization and Configuration","text":"<p>This function initializes the SPI bus and configures its GPIO pins, clock parameters, and master mode settings. The function prototype is as follows:</p> <pre><code>esp_err_t spi_bus_initialize(spi_host_device_t host_id,\n                    const spi_bus_config_t *bus_config,\n                                spi_dma_chan_t dma_chan);\n</code></pre> <p>The parameters of this function are described in the table below:</p> Parameter Description host_id Specifies the host device ID of the SPI bus bus_config Pointer to a <code>spi_bus_config_t</code> structure used to configure the SPI bus pins (SCLK, MISO, MOSI) and other parameters dma_chan Specifies which DMA channel to use. Valid values are: <code>SPI_DMA_CH_AUTO</code>, <code>SPI_DMA_DISABLED</code>, or a number between 1 and 2 <p>Return Value: <code>ESP_OK</code> indicates successful configuration. Other values indicate configuration failure.</p> <p>This function uses a <code>spi_bus_config_t</code> structure as an input parameter. Below is the definition of the <code>spi_bus_config_t</code> structure relevant to our use case:</p> <p><pre><code>typedef struct {\n    int miso_io_num;     /* MISO pin number */\n    int mosi_io_num;     /* MOSI pin number */\n    int sclk_io_num;     /* Clock pin number */\n    int quadwp_io_num;   /* WP pin number for Quad mode, set to -1 if unused */\n    int quadhd_io_num;   /* HD pin number for Quad mode, set to -1 if unused */\n    int max_transfer_sz; /* Maximum transfer size */\n    \u2026                    /* Other specific configuration parameters */\n} spi_bus_config_t;\n</code></pre> After completing the configuration of the above structure parameters, the structure can be passed to the <code>spi_bus_initialize</code> function to instantiate the SPI bus.</p>"},{"location":"MAIN-CONTROL/SPI/spi/#device-configuration","title":"Device Configuration","text":"<p>This function is used to allocate a device on the SPI bus. The function prototype is as follows:</p> <p><pre><code>esp_err_t spi_bus_add_device(spi_host_device_t host_id,\n       const spi_device_interface_config_t *dev_config,\n                           spi_device_handle_t *handle);\n</code></pre> | Parameter | Description | |-----------|-------------| | host_id | Specifies the host device ID of the SPI bus. | | dev_config | A pointer to an <code>spi_device_interface_config_t</code> structure, used to configure the communication parameters of the SPI device, such as clock rate and SPI mode. | | handle | Returns the created device handle. |</p> <p>Return Value: - ESP_OK: Configuration was successful. - Other values indicate a configuration failure.</p> <p>This function uses <code>spi_host_device_t</code> and <code>spi_device_interface_config_t</code> structured variables to pass configuration parameters to the SPI peripheral device. The definition of the structure is shown as follows:</p> <pre><code>/**\n * @brief Enumeration of three SPI peripheral devices accessible via software\n */\ntypedef enum {\n    /* SPI1 can only be used as GPSPI on ESP32 */\n    SPI1_HOST = 0, /* SPI1 */\n    SPI2_HOST = 1, /* SPI2 */\n#if SOC_SPI_PERIPH_NUM &gt; 2\n    SPI3_HOST = 2, /* SPI3 */\n#endif\n    SPI_HOST_MAX, /* Invalid host value */\n} spi_host_device_t;\n\ntypedef struct {\n    uint32_t command_bits; /* Number of bits in the command phase */\n    uint32_t address_bits; /* Number of bits in the address phase */\n    uint32_t dummy_bits;   /* Number of bits in the dummy phase */\n    int clock_speed_hz;    /* Clock speed in Hz */\n    uint32_t mode;         /* SPI mode (0-3) */\n    int spics_io_num;      /* CS pin number */\n    ...                    /* Other device-specific configuration parameters */\n} spi_device_interface_config_t;\n</code></pre>"},{"location":"MAIN-CONTROL/SPI/spi/#data-transmission","title":"Data Transmission","text":"<p>Based on their functionality, the following functions can be categorized together. Below is a table introducing each function's purpose and parameters.</p> Function Description spi_device_transmit() This function sends an SPI transaction, waits for it to complete, and returns the result.  handle: The handle of the device.  trans_desc: A pointer to an <code>spi_transaction_t</code> structure, describing the details of the transaction to be sent. spi_device_polling_transmit() This function sends a polling transaction, waits for it to complete, and returns the result.  handle: The handle of the device.  trans_desc: A pointer to an <code>spi_transaction_t</code> structure, describing the details of the transaction to be sent."},{"location":"MAIN-CONTROL/SPI/spi/#code","title":"Code","text":""},{"location":"MAIN-CONTROL/SPI/spi/#spih","title":"spi.h","text":"<pre><code>/**\n * @file spi.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief \n * @version 1.0\n * @date 2024-11-18\n * @ref Alientek SPI driver\n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __SPI_H__\n#define __SPI_H__\n\n/* Dependencies */\n#include &lt;string.h&gt;\n#include \"esp_log.h\"\n#include \"driver/spi_master.h\"\n#include \"driver/gpio.h\"\n\n/* GPIO Definitions */\n#define SPI_MOSI_GPIO_PIN   GPIO_NUM_11         /* SPI2_MOSI */\n#define SPI_CLK_GPIO_PIN    GPIO_NUM_12         /* SPI2_CLK */\n#define SPI_MISO_GPIO_PIN   GPIO_NUM_13         /* SPI2_MISO */\n\n/* Function Prototypes */\n\n/**\n * @brief       Initialize SPI\n * @param       None\n * @retval      None\n */\nvoid spi2_init(void);\n\n/**\n * @brief       Send command via SPI\n * @param       handle : SPI handle\n * @param       cmd    : Command to send\n * @retval      None\n */\nvoid spi2_write_cmd(spi_device_handle_t handle, uint8_t cmd);\n\n/**\n * @brief       Send data via SPI\n * @param       handle : SPI handle\n * @param       data   : Data to send\n * @param       len    : Length of data to send\n * @retval      None\n */\nvoid spi2_write_data(spi_device_handle_t handle, const uint8_t *data, int len); \n\n/**\n * @brief       Process data via SPI\n * @param       handle       : SPI handle\n * @param       data         : Data to send\n * @retval      t.rx_data[0] : Received data\n */\nuint8_t spi2_transfer_byte(spi_device_handle_t handle, uint8_t byte);        \n\n#endif\n</code></pre>"},{"location":"MAIN-CONTROL/SPI/spi/#spic","title":"spi.c","text":"<p><pre><code>/**\n * @file spi.c\n * @author \n * @brief \n * @version 1.0\n * @date 2024-11-18\n * @ref Alientek SPI driver\n * \n */\n\n#include \"spi.h\"\n\n/**\n * @brief       Initialize SPI\n * @param       None\n * @retval      None\n */\nvoid spi2_init(void)\n{\n    esp_err_t ret = 0;\n    spi_bus_config_t spi_bus_conf = {0};\n\n    /* SPI bus configuration */\n    spi_bus_conf.miso_io_num = SPI_MISO_GPIO_PIN;                               /* SPI_MISO pin */\n    spi_bus_conf.mosi_io_num = SPI_MOSI_GPIO_PIN;                               /* SPI_MOSI pin */\n    spi_bus_conf.sclk_io_num = SPI_CLK_GPIO_PIN;                                /* SPI_SCLK pin */\n    spi_bus_conf.quadwp_io_num = -1;                                            /* SPI write protection signal pin, not enabled */\n    spi_bus_conf.quadhd_io_num = -1;                                            /* SPI hold signal pin, not enabled */\n    spi_bus_conf.max_transfer_sz = 160 * 80 * 2;                                /* Configure maximum transfer size in bytes */\n\n    /* Initialize SPI bus */\n    ret = spi_bus_initialize(SPI2_HOST, &amp;spi_bus_conf, SPI_DMA_CH_AUTO);        /* SPI bus initialization */\n    ESP_ERROR_CHECK(ret);                                                       /* Check parameter values */\n}\n\n/**\n * @brief       Send command via SPI\n * @param       handle : SPI handle\n * @param       cmd    : Command to send\n * @retval      None\n */\nvoid spi2_write_cmd(spi_device_handle_t handle, uint8_t cmd)\n{\n    esp_err_t ret;\n    spi_transaction_t t = {0};\n\n    t.length = 8;                                       /* Number of bits to transmit (1 byte = 8 bits) */\n    t.tx_buffer = &amp;cmd;                                 /* Fill the command */\n    ret = spi_device_polling_transmit(handle, &amp;t);      /* Start transmission */\n    ESP_ERROR_CHECK(ret);                               /* Usually no issues */\n}\n\n/**\n * @brief       Send data via SPI\n * @param       handle : SPI handle\n * @param       data   : Data to send\n * @param       len    : Length of data to send\n * @retval      None\n */\nvoid spi2_write_data(spi_device_handle_t handle, const uint8_t *data, int len)\n{\n    esp_err_t ret;\n    spi_transaction_t t = {0};\n\n    if (len == 0)\n    {\n        return;                                     /* No data to transmit if length is 0 */\n    }\n\n    t.length = len * 8;                             /* Number of bits to transmit (1 byte = 8 bits) */\n    t.tx_buffer = data;                             /* Fill the data */\n    ret = spi_device_polling_transmit(handle, &amp;t);  /* Start transmission */\n    ESP_ERROR_CHECK(ret);                           /* Usually no issues */\n}\n\n/**\n * @brief       Process data via SPI\n * @param       handle       : SPI handle\n * @param       data         : Data to send\n * @retval      t.rx_data[0] : Received data\n */\nuint8_t spi2_transfer_byte(spi_device_handle_t handle, uint8_t data)\n{\n    spi_transaction_t t;\n\n    memset(&amp;t, 0, sizeof(t));\n\n    t.flags = SPI_TRANS_USE_TXDATA | SPI_TRANS_USE_RXDATA;\n    t.length = 8;\n    t.tx_data[0] = data;\n    spi_device_transmit(handle, &amp;t);\n\n    return t.rx_data[0];\n}\n</code></pre> In the <code>spi2_init()</code> function, the primary task is the configuration of SPI parameters, such as SPI pin configuration, data transfer size, and SPI bus settings. This function completes the initialization of the SPI.</p> <p>Tip</p> <p>For LCD-related code, please refer to the LCD section.</p>"},{"location":"MAIN-CONTROL/SPI/spi/#mainc","title":"main.c","text":"<pre><code>/**\n * @file main.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief \n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"rgb.h\"\n#include \"key.h\"\n#include \"exit.h\"\n#include \"lcd.h\"\n#include \"spi.h\"\n\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    uint8_t x = 0;\n    esp_err_t ret;\n\n\n    ret = nvs_flash_init();\n\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n\n    led_init();\n    spi2_init();\n    lcd_init();\n    vTaskDelay(500);\n\n    while (1)\n    {\n        switch (x)\n        {\n            case 0:\n            {\n                lcd_clear(WHITE);\n                break;\n            }\n            case 1:\n            {\n                lcd_clear(BLACK);\n                break;\n            }\n            case 2:\n            {\n                lcd_clear(BLUE);\n                break;\n            }\n            case 3:\n            {\n                lcd_clear(RED);\n                break;\n            }\n            case 4:\n            {\n                lcd_clear(MAGENTA);\n                break;\n            }\n            case 5:\n            {\n                lcd_clear(GREEN);\n                break;\n            }\n            case 6:\n            {\n                lcd_clear(CYAN);\n                break;\n            }\n            case 7:\n            {\n                lcd_clear(YELLOW);\n                break;\n            }\n            case 8:\n            {\n                lcd_clear(BRRED);\n                break;\n            }\n            case 9:\n            {\n                lcd_clear(GRAY);\n                break;\n            }\n            case 10:\n            {\n                lcd_clear(LGRAY);\n                break;\n            }\n            case 11:\n            {\n                lcd_clear(BROWN);\n                break;\n            }\n        }\n\n        lcd_show_string(0, 0, 240, 32, 32, \"ESP32\", RED);\n        lcd_show_string(0, 33, 240, 24, 24, \"SPILCD TEST\", RED);\n        lcd_show_string(0, 60, 240, 16, 16, \"CSW@NTU\", RED);\n        x++;\n\n        if (x == 12)\n        {\n            x = 0;\n        }\n\n        rgb_toggle();\n        vTaskDelay(500);\n    }\n}\n</code></pre>"},{"location":"MAIN-CONTROL/TF-CARD/tf-card/","title":"TF CARD (SD CARD) Operation - SPI Mode","text":""},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#introduction","title":"Introduction","text":"<p>SD Card Overview</p> <p>Many microcontroller systems require high-capacity storage devices to store data. Common options include USB drives, FLASH chips, and SD cards. Each has its advantages, but overall, SD cards are the most suitable for microcontroller systems. They offer large capacities (over 32GB), support SPI/SDIO interfaces, and come in various sizes (standard SD card and Micro SD card sizes), meeting the requirements of different applications.</p> <p>With just a few IO pins, you can extend storage capacity to 32GB or more, with a wide range of choices from tens of megabytes to tens of gigabytes. They are easy to replace, simple to program, and are the preferred choice for large-capacity external storage in microcontroller systems.</p> <p>The ZD Atom ESP32-S3 minimal system board uses a Micro SD card interface with a self-locking card slot. The SD SPI host driver is implemented based on the SPI Master Driver. With the SPI host driver, the SD card and other SPI devices can share the same SPI bus. The SPI host driver handles exclusive access from different tasks.</p> <p>Info</p> <p>A complete SD card operation process involves the host (e.g., a microcontroller) initiating a \"command.\" The SD card determines whether to send a response or data based on the command's content. For read/write operations, the host must also send a command to stop reading/writing data to end the operation. This means that after the host sends a command, the SD card may not respond or provide data, depending on the command's meaning.</p> <p>Card Modes</p> <p>SD cards have two effective operation modes: \"Card Identification Mode\" and \"Data Transfer Mode.\" Based on the operation method, there are SD mode and SPI mode. The ZD Atom ESP32-S3 minimal system board uses SPI mode.</p>"},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#key-steps","title":"Key Steps","text":"<ol> <li>SD card initialization (SPI mode/SDIO mode)</li> <li>SD card read/write operations</li> </ol> <p>Warning</p> <p>The ESP32's SDIO driver mode and SPI driver mode are not compatible. You can only choose one driver mode.</p>"},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#use-case","title":"Use Case","text":"<p>This experiment introduces the following functionality: After a series of initializations, an SD card initialization condition is used within a <code>while</code> loop to check whether the SD card is successfully initialized. If initialization succeeds, SD card parameters will be output to the serial terminal or VSCode terminal, and the total capacity and remaining capacity will be displayed on the LCD. The LED blinks to indicate the program is running.</p>"},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#resources-used","title":"Resources Used","text":"<ol> <li>LED</li> <li>LED: IO0</li> <li>0.96-inch LCD</li> <li>SD Card</li> <li>CS: IO2</li> <li>SCK: IO12</li> <li>MOSI: IO11</li> <li>MISO: IO13</li> </ol>"},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#connection-diagram","title":"Connection Diagram","text":"<p>This experiment connects the SD card to the ESP32-S3 using the SPI interface. The DNESP32S3M minimal system board has an onboard Micro SD card slot for connecting the SD card. The schematic for connecting the SD card to the ESP32-S3 is shown below.</p> <p></p>"},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#esp-idf-api","title":"ESP-IDF API","text":"<p>To use SD card-related functionality, you must first import the required files.</p> <pre><code>#include \"driver/sdspi_host.h\"\n#include \"driver/spi_common.h\"\n#include \"sdmmc_cmd.h\"\n#include \"driver/sdmmc_host.h\"\n#include \"spi.h\"\n</code></pre>"},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#key-functions","title":"Key Functions","text":""},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#mount-sd-card","title":"Mount SD Card","text":"<pre><code>esp_err_t esp_vfs_fat_sdspi_mount(const char* base_path,\n                                  const sdmmc_host_t* host_config_input,\n                                  const sdspi_device_config_t* slot_config,\n                                  const esp_vfs_fat_mount_config_t*mount_config,\n                                  sdmmc_card_t** out_card);\n</code></pre> Parameter Description <code>base_path</code> Mount point, the path where the partition should be registered (e.g., \"/sdcard\"). <code>host_config_input</code> SDMMC host configuration, a pointer to a structure describing the SDMMC host. This structure can be initialized using the <code>SDSPI_HOST_DEFAULT</code> macro. <code>slot_config</code> SD card configuration, a pointer to a structure with slot configuration. For SPI peripherals, pass a pointer to an <code>sdspi_device_config_t</code> structure initialized using <code>sdspi_device_config_DEFAULT</code>. <code>mount_config</code> Mount configuration, a pointer to an <code>esp_vfs_fat_mount_config_t</code> structure to configure the FAT file system mount options. <code>out_card</code> If not <code>NULL</code>, a pointer to the card information structure will be returned through this parameter. Return Value Description <code>ESP_OK</code> Operation succeeded. <code>ESP_ERR_INVALID_STATE</code> Invalid state, if <code>esp_vfs_fat_sdmmc_mount</code> has already been called. <code>ESP_ERR_NO_MEM</code> Memory allocation failure. <code>ESP_FAIL</code> If the partition cannot be mounted, other error codes from the SDMMC or SPI driver, SDMMC protocol, or FATFS driver."},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#unmount-sd-card","title":"Unmount SD Card","text":"<pre><code>esp_err_t esp_vfs_fat_sdspi_unmount(const char* base_path, sdmmc_card_t* card);\n</code></pre>"},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#parameter-description","title":"Parameter Description","text":"Parameter Description <code>base_path</code> Mount point, the path where the partition should be registered (e.g., \"/sdcard\"). <code>card</code> SD/MMC card structure."},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#return-value-description","title":"Return Value Description","text":"Return Value Description <code>ESP_OK</code> Operation succeeded. <code>ESP_ERR_INVALID_ARG</code> If the <code>card</code> parameter is not registered. <code>ESP_ERR_INVALID_STATE</code> If <code>esp_vfs_fat_sdmmc_mount</code> has not been called yet."},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#driver-code","title":"Driver Code","text":""},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#spi_sdcardh","title":"spi_sdcard.h","text":"<pre><code>/**\n * @file spi_sdcard.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This file is for SD card initialization and related functions\n * @version 1.0\n * @date 2024-11-19\n * @ref Alientek SD card driver.\n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __SPI_SDCARD_H__\n#define __SPI_SDCARD_H__\n\n#include &lt;unistd.h&gt;\n#include \"esp_vfs_fat.h\"\n#include \"driver/sdspi_host.h\"\n#include \"driver/spi_common.h\"\n#include \"sdmmc_cmd.h\"\n#include \"driver/sdmmc_host.h\"\n#include \"spi.h\"\n\n\n/* Pin definitions */\n#define SD_NUM_CS       GPIO_NUM_2\n#define MOUNT_POINT     \"/0:\"\n\n/* Function declarations */\nesp_err_t sd_spi_init(void);                                                /* Initialize SD card */\nvoid sd_get_fatfs_usage(size_t *out_total_bytes, size_t *out_free_bytes);   /* Get SD card usage information */\n\n#endif\n</code></pre>"},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#spi_sdcardc","title":"spi_sdcard.c","text":"<pre><code>/**\n * @file spi_sdcard.c\n * @author SHUAIWEN CUI\n * @brief This file is for SD card initialization and related functions\n * @version 1.0\n * @date 2024-11-19\n * @ref Alientek SD card driver.\n */\n\n#include \"spi_sdcard.h\"\n\nspi_device_handle_t MY_SD_Handle = NULL;                            /* SD card handle */\nsdmmc_card_t *card;                                                 /* SD/MMC card structure */\nconst char mount_point[] = MOUNT_POINT;                             /* Mount point/root directory */\nesp_err_t ret = ESP_OK;\nesp_err_t mount_ret = ESP_OK;\n\n/**\n * @brief       Initialize SD card\n * @param       None\n * @retval      esp_err_t\n */\nesp_err_t sd_spi_init(void)\n{\n    if (MY_SD_Handle != NULL)                                       /* Re-mount or reinitialize SD card */\n    {\n        spi_bus_remove_device(MY_SD_Handle);                        /* Remove SD card device from SPI bus */\n\n        if (mount_ret == ESP_OK)\n        {\n            esp_vfs_fat_sdcard_unmount(mount_point, card);          /* Unmount file system */\n        }\n    }\n\n    /* SPI driver interface configuration. SPI SD card clock is 20-25MHz */\n    spi_device_interface_config_t devcfg = {\n        .clock_speed_hz = 20 * 1000 * 1000,                         /* SPI clock speed */\n        .mode = 0,                                                  /* SPI mode 0 */\n        .spics_io_num = SD_NUM_CS,                                  /* Chip select pin */\n        .queue_size = 7,                                            /* Queue size: 7 transactions */\n    };\n\n    /* Add SPI bus device */\n    ret = spi_bus_add_device(SPI2_HOST, &amp;devcfg, &amp;MY_SD_Handle);\n\n    /* File system mount configuration */\n    esp_vfs_fat_sdmmc_mount_config_t mount_config = {\n        .format_if_mount_failed = false,                            /* If mounting fails: true to reformat, false otherwise */\n        .max_files = 5,                                             /* Maximum number of open files */\n        .allocation_unit_size = 4 * 1024 * sizeof(uint8_t)          /* Allocation unit size of disk clusters */\n    };\n\n    /* SD card host configuration */\n    sdmmc_host_t host = SDSPI_HOST_DEFAULT();\n\n    /* SD card pin configuration */\n    sdspi_device_config_t slot_config = {0};\n    slot_config.host_id   = host.slot;\n    slot_config.gpio_cs   = SD_NUM_CS;\n    slot_config.gpio_cd   = GPIO_NUM_NC;\n    slot_config.gpio_wp   = GPIO_NUM_NC;\n    slot_config.gpio_int  = GPIO_NUM_NC;\n\n    mount_ret = esp_vfs_fat_sdspi_mount(mount_point, &amp;host, &amp;slot_config, &amp;mount_config, &amp;card);      /* Mount file system */\n    ret |= mount_ret;\n\n    return ret;\n}\n\n/**\n * @brief       Get SD card usage information\n * @param       out_total_bytes: Total size\n * @param       out_free_bytes: Free size\n * @retval      None\n */\nvoid sd_get_fatfs_usage(size_t *out_total_bytes, size_t *out_free_bytes)\n{\n    FATFS *fs;\n    size_t free_clusters;\n    int res = f_getfree(\"0:\", (DWORD *)&amp;free_clusters, &amp;fs);\n    assert(res == FR_OK);\n    size_t total_sectors = (fs-&gt;n_fatent - 2) * fs-&gt;csize;\n    size_t free_sectors = free_clusters * fs-&gt;csize;\n\n    size_t sd_total = total_sectors / 1024;\n    size_t sd_total_KB = sd_total * fs-&gt;ssize;\n    size_t sd_free = free_sectors / 1024;\n    size_t sd_free_KB = sd_free * fs-&gt;ssize;\n\n    /* Assuming total size is less than 4GiB, which should be true for SPI flash */\n    if (out_total_bytes != NULL)\n    {\n        *out_total_bytes = sd_total_KB;\n    }\n\n    if (out_free_bytes != NULL)\n    {\n        *out_free_bytes = sd_free_KB;\n    }\n}\n</code></pre>"},{"location":"MAIN-CONTROL/TF-CARD/tf-card/#mainc","title":"main.c","text":"<pre><code>/**\n * @file main.c\n * @author\n * @brief Main application to demonstrate the use of ESP32 internal temperature sensor\n * @version 1.0\n * @date 2024-11-17\n *\n * @copyright Copyright (c) 2024\n *\n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"rgb.h\"\n#include \"key.h\"\n#include \"exit.h\"\n#include \"lcd.h\"\n#include \"spi.h\"\n#include \"esp_rtc.h\"\n#include \"temp.h\"\n#include \"rng.h\"\n#include \"spi_sdcard.h\"\n\nvoid app_main(void)\n{\n    esp_err_t ret;\n    size_t bytes_total, bytes_free;                     /* Total and free space of the SD card */\n\n    ret = nvs_flash_init();                             /* Initialize NVS */\n\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n\n    led_init();                                         /* Initialize LED */\n    spi2_init();                                        /* Initialize SPI */\n    lcd_init();                                         /* Initialize LCD */\n\n    while (sd_spi_init())                               /* SD card not detected */\n    {\n        lcd_show_string(0, 0, 200, 16, 16, \"SD Card Error!\", RED);\n        vTaskDelay(500);\n        lcd_show_string(0, 20, 200, 16, 16, \"Please Check!\", RED);\n        vTaskDelay(500);\n    }\n\n    lcd_show_string(0, 0, 200, 16, 16, \"SD Card OK!\", RED);\n    lcd_show_string(0, 20, 200, 16, 16, \"Total:       MB\", RED);\n    lcd_show_string(0, 40, 200, 16, 16, \"Free :       MB\", RED);\n    sd_get_fatfs_usage(&amp;bytes_total, &amp;bytes_free);\n\n    lcd_show_num(60, 20, (int)bytes_total / 1024, 5, 16, BLUE);\n    lcd_show_num(60, 40, (int)bytes_free / 1024, 5, 16, BLUE);\n\n    while (1)\n    {\n        led_toggle();\n        vTaskDelay(500);\n    }\n}\n</code></pre>"},{"location":"MAIN-CONTROL/TIMER/timer/","title":"TIMER","text":""},{"location":"MAIN-CONTROL/TIMER/timer/#introduction","title":"Introduction","text":"<p>This document introduces the use of the ESP32 timer.</p> <p>Timer</p> <p>The timer is an integrated function of the microcontroller, which can be flexibly controlled by programming. The timing function of the microcontroller depends on the internal counter. Whenever the microcontroller experiences a machine cycle and generates a pulse, the counter will increase. The main function of the timer is to time. When the set time is reached, it will trigger an interrupt to notify the system that the timing is complete. In the interrupt service function, we can write specific programs to achieve the desired function.</p> <p>What can a timer do</p> <ul> <li> <p>Execute scheduled tasks: Timers are often used to periodically execute specific tasks. For example, if a task needs to be executed every 500 milliseconds, the timer can accurately meet this requirement.</p> </li> <li> <p>Time measurement: The timer can accurately measure time, whether it is the execution time of a code segment or the interval time of an event, it can be accurately measured by the timer.</p> </li> <li> <p>Accurate delay: For delay scenarios that require microsecond accuracy, the timer can provide a reliable   solution to ensure the accuracy of the delay.</p> </li> <li> <p>PWN signal generation: Through the precise control of the timer, we can generate PWM (pulse width modulation) signals, which is crucial for applications such as driving motors and adjusting LED brightness.</p> </li> <li> <p>Event triggering and monitoring: The timer is not only used to trigger interrupts and implement event-driven logic, but also to implement watchdog functions, monitor system status, and perform reset operations when necessary to ensure stable operation of the system.</p> </li> </ul> <p>Types of Timers</p> <p>Timers can be implemented either in hardware or software, each with its unique characteristics suited for different scenarios:</p> <p>Hardware Timers rely on the built-in hardware mechanisms of microcontrollers, utilizing dedicated timing/counter circuits to achieve timing functionality. Their key advantages are high precision and reliability because hardware timers operate independently of software tasks and operating system scheduling, remaining unaffected by them. In scenarios demanding extremely high timing accuracy, such as generating PWM signals or performing precise time measurements, hardware timers are undoubtedly the best choice. Their design ensures that even if the main CPU is occupied with other tasks, the timer can still accurately trigger the designated operation at the preset time.</p> <p>Software Timers, on the other hand, simulate timing functionality through the operating system or software libraries. The performance of these timers is affected by the system's current load and task scheduling strategies, resulting in slightly lower precision compared to hardware timers. However, software timers excel in flexibility, allowing the creation of numerous timers, making them ideal for scenarios where strict timing control is not required. It is important to note that software timers may encounter timing accuracy issues, especially under heavy system loads or when there are many high-priority tasks. Nevertheless, for simple delays where high precision is not critical, software timers are typically sufficient to meet the requirements.</p>"},{"location":"MAIN-CONTROL/TIMER/timer/#esp32-s3-timer-overview","title":"ESP32-S3 Timer Overview","text":"<p>The system timer has two built-in counters UNIT0 and UNIT1 (as shown in the figure) and three comparators COMP0, COMP1, and COMP2 (as shown in the figure). The comparators are used to monitor whether the counter's count value reaches the alarm value.</p> <p>(1) Counter</p> <p>UNIT0 and UNIT1 are 52-bit counters built into the ESP32-S3 system timer. The counters use XTAL_CLK as the clock source (40MHz). After XTAL_CLK is divided, a clock signal with a frequency of fXTAL_CLK/3 is generated in one counting cycle, and then a clock signal with a frequency of fXTAL_CLK/2 is generated in another counting cycle. Therefore, the clock CNT_CLK used by the counter has an actual average frequency of fXTAL_CLK/2.5, which is 16MHz, as shown in Figure 14.1.2. For each CNT_CLK clock cycle, the count increases by 1/16\u00b5s, that is, 16 cycles increase by 1\u00b5s. Users can control the counter UNITn by configuring the following three bits in register SYSTIMER_CONF_REG. These three bits are: \u2460: SYSTIMER_TIMER_UNITn_WORK_EN \u2461: SYSTIMER_TIMER_UNITn_CORE0_STALL_EN \u2462: SYSTIMER_TIMER_UNITn_CORE1_STALL_EN For the configuration of these three bits, please refer to the \"esp32-s3_technical_reference_manual_en\".</p> <p>(2) Comparator</p> <p>COMP0, COMP1, and COMP2 are 52-bit comparators built into the ESP32-S3 system timer. The comparators also use XTAL_CLK as the clock source (40MHz).</p> <p></p> <p>The above figure shows the process of the system timer generating an alarm. In the above process, a counter (Timer Countern) and a comparator (Timer Comparatorx) are used to generate an alarm interrupt based on the comparison result.</p>"},{"location":"MAIN-CONTROL/TIMER/timer/#use-case","title":"Use Case","text":"<p>Let's design a program that configures a high-resolution timer to enable interrupts and toggle the LED status in the interrupt callback function. Since we are using on-board resources, no wiring is required.</p>"},{"location":"MAIN-CONTROL/TIMER/timer/#code","title":"Code","text":""},{"location":"MAIN-CONTROL/TIMER/timer/#timh","title":"tim.h","text":"<pre><code>/**\n * @file tim.h\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This file contains the function prototypes for the TIM component.\n * @version 1.0\n * @date 2024-11-18\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __TIM_H__\n#define __TIM_H__\n\n/* Dependencies */\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"driver/gpio.h\"\n#include \"esp_timer.h\"\n#include \"led.h\"\n\n\n/* Function Prototypes */\n\n/**\n * @brief       Initialize a high-precision timer (ESP_TIMER)\n * @param       tps: Timer period in microseconds (\u03bcs). For example, to execute the timer interrupt once every second, \n *                   set tps = 1s = 1000000\u03bcs.\n * @retval      None\n */\nvoid esptim_int_init(uint64_t tps);\n\n/**\n * @brief       Timer callback function\n * @param       arg: No arguments passed\n * @retval      None\n */\nvoid esptim_callback(void *arg); \n\n#endif /*__TIM_H__*/\n</code></pre>"},{"location":"MAIN-CONTROL/TIMER/timer/#timc","title":"tim.c","text":"<pre><code>/**\n * @file tim.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This file contains the implementation of the TIM component.\n * @version 1.0\n * @date 2024-11-18\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n#include \"esptim.h\"\n\n/**\n * @brief       Initialize a high-precision timer (ESP_TIMER)\n * @param       tps: Timer period in microseconds (\u03bcs). For example, to execute the timer interrupt once every second, \n *                   set tps = 1s = 1000000\u03bcs.\n * @retval      None\n */\nvoid esptim_int_init(uint64_t tps)\n{\n    esp_timer_handle_t esp_tim_handle;                      /* Timer callback function handle */\n\n    /* Define a timer configuration structure */\n    esp_timer_create_args_t tim_periodic_arg = {\n        .callback = &amp;esptim_callback,                       /* Set the callback function */\n        .arg = NULL,                                        /* No arguments passed */\n    };\n\n    esp_timer_create(&amp;tim_periodic_arg, &amp;esp_tim_handle);   /* Create a timer event */\n    esp_timer_start_periodic(esp_tim_handle, tps);          /* Trigger periodically based on the timer period */\n}\n\n/**\n * @brief       Timer callback function\n * @param       arg: No arguments passed\n * @retval      None\n */\nvoid esptim_callback(void *arg)\n{\n    led_toggle();\n}\n</code></pre> <p>Warning</p> <p>Make sure that you add the tim.c and tim.h paths to the CMakeLists.txt file. Also, add the esp_timer library to the dependencies.</p>"},{"location":"MAIN-CONTROL/TIMER/timer/#mainc","title":"main.c","text":"<p>\u5c06\u4e3b\u7a0b\u5e8fmain.c\u4e2d\u7684\u5185\u5bb9\u66ff\u6362\u4e3a\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <pre><code>/**\n * @file main.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief \n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"rgb.h\"\n#include \"key.h\"\n#include \"exit.h\"\n#include \"tim.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // uint8_t key;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    // BSP\n    led_init();\n    rgb_init();\n    // key_init();\n    exit_init();\n    esptim_int_init(1000000); // 1s enable timer, of which the callback function toggles the LED\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        vTaskDelay(1000);\n    }\n\n}\n</code></pre>"},{"location":"MAIN-CONTROL/TIMER/timer/#summary","title":"Summary","text":"<p>Note</p> <p>This chapter introduces the use of ESP32 timers. By designing a program, the configuration of high-resolution timers is realized, interrupts are enabled, and the state of LEDs is flipped in the interrupt callback function. Several key points:</p> <ul> <li> <p>How to add timer files to the project, source files, header files, path dependencies, etc.</p> </li> <li> <p>How to construct the timer initialization function.</p> </li> <li> <p>How to construct the timer callback function.</p> </li> <li> <p>How to call the timer initialization function at the application layer.</p> </li> </ul>"},{"location":"MATH-DSP-AI/math-dsp-ai/","title":"MATH DSP AI","text":"<ul> <li> <p> ESP-DSP</p> <p>  Online Doc </p> </li> <li> <p> ESP-DL</p> <p>  Online Doc </p> </li> </ul>"},{"location":"PERCEPTION/BUILT-IN-THERMOMETER/built-in-thermometer/","title":"ESP32 BUILT-IN THERMOMETER","text":""},{"location":"PERCEPTION/BUILT-IN-THERMOMETER/built-in-thermometer/#introduction","title":"INTRODUCTION","text":"<p>Info</p> <p>The ESP32 chip has a built-in temperature sensor that can be used to measure the temperature of the chip.</p>"},{"location":"PERCEPTION/BUILT-IN-THERMOMETER/built-in-thermometer/#use-cases","title":"USE CASES","text":"<p>Measure the internal temperature of the ESP32 chip and display it on the LCD.</p>"},{"location":"PERCEPTION/BUILT-IN-THERMOMETER/built-in-thermometer/#involved-resources","title":"INVOLVED RESOURCES","text":"<ul> <li>ESP32 built-in temperature sensor</li> <li>0.96-inch LCD</li> <li>LED (optional)</li> </ul>"},{"location":"PERCEPTION/BUILT-IN-THERMOMETER/built-in-thermometer/#code","title":"CODE","text":""},{"location":"PERCEPTION/BUILT-IN-THERMOMETER/built-in-thermometer/#temph","title":"temp.h","text":"<pre><code>/**\n * @file temp.h\n * @author \n * @brief This file is to drive the built-in temperature sensor of ESP32\n * @version 1.0\n * @date 2024-11-19\n * @ref Alientek Driver\n * @copyright Copyright (c) 2024\n * \n */\n\n#ifndef __SENSOR_H__\n#define __SENSOR_H__\n\n#include \"esp_err.h\"\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;inttypes.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"driver/temperature_sensor.h\"\n\n/* Parameter definitions */\n#define SENSOR_RANGE_MIN    -10      /* Minimum temperature to be tested */\n#define SENSOR_RANGE_MAX    80      /* Maximum temperature to be tested */\n\n/* Function declarations */\nvoid temperature_sensor_init(void); /* Initialize the internal temperature sensor */\nshort sensor_get_temperature(void); /* Get the temperature value from the internal temperature sensor */\n\n#endif\n</code></pre>"},{"location":"PERCEPTION/BUILT-IN-THERMOMETER/built-in-thermometer/#tempc","title":"temp.c","text":"<pre><code>/**\n * @file temp.c\n * @author \n * @brief This file is to drive the built-in temperature sensor of ESP32\n * @version 1.0\n * @date 2024-11-19\n * @ref Alientek Driver\n * @copyright Copyright (c) 2024\n * \n */\n\n#include \"temp.h\"\n\nesp_err_t rev_flag;\ntemperature_sensor_handle_t temp_handle = NULL; /* Temperature sensor handle */\n\n/**\n * @brief       Initialize the internal temperature sensor\n * @param       None\n * @retval      None\n */\nvoid temperature_sensor_init(void)\n{\n    temperature_sensor_config_t temp_sensor;\n\n    temp_sensor.range_min = SENSOR_RANGE_MIN;   /* Minimum temperature to be tested */\n    temp_sensor.range_max = SENSOR_RANGE_MAX;   /* Maximum temperature to be tested */\n\n    rev_flag |= temperature_sensor_install(&amp;temp_sensor, &amp;temp_handle);\n    ESP_ERROR_CHECK(rev_flag);\n}\n\n/**\n * @brief       Get the temperature value from the internal temperature sensor\n * @param       None\n * @retval      Returns the internal temperature value\n */\nshort sensor_get_temperature(void)\n{\n    float temp;\n\n    /* Enable the temperature sensor */\n    rev_flag |= temperature_sensor_enable(temp_handle);\n\n    /* Retrieve sensor data */\n    rev_flag |= temperature_sensor_get_celsius(temp_handle, &amp;temp);\n\n    /* Disable the temperature sensor after use to save power */\n    rev_flag |= temperature_sensor_disable(temp_handle);\n    ESP_ERROR_CHECK(rev_flag);\n\n    return temp;\n}\n</code></pre> <p>Tip</p> <p>\u5728CMakelists.txt\u4e2d\u6dfb\u52a0temp.h, temp.c\u6240\u5728\u8def\u5f84\uff0c\u5206\u522b\u6dfb\u52a0\u5230\u5934\u6587\u4ef6\u548c\u6e90\u6587\u4ef6\u5bf9\u5e94\u4f4d\u7f6e\u3002</p>"},{"location":"PERCEPTION/BUILT-IN-THERMOMETER/built-in-thermometer/#main","title":"main","text":"<pre><code>/**\n * @file main.c\n * @author\n * @brief Main application to demonstrate the use of ESP32 internal temperature sensor\n * @version 1.0\n * @date 2024-11-17\n *\n * @copyright Copyright (c) 2024\n *\n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"rgb.h\"\n#include \"key.h\"\n#include \"exit.h\"\n#include \"lcd.h\"\n#include \"spi.h\"\n#include \"esp_rtc.h\"\n#include \"temp.h\"\n\nvoid app_main(void)\n{\n    int16_t temp;\n    esp_err_t ret;\n\n    ret = nvs_flash_init(); /* Initialize NVS */\n\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n\n    led_init();                /* Initialize LED */\n    spi2_init();               /* Initialize SPI2 */\n    lcd_init();                /* Initialize LCD */\n    temperature_sensor_init(); /* Initialize internal temperature sensor */\n\n    lcd_show_string(0, 0, 200, 16, 16, \"TEMPERATURE: 00.00C\", BLUE);\n\n    while (1)\n    {\n        temp = sensor_get_temperature(); /* Get temperature value as float */\n\n        /* Display negative sign if temperature is below zero */\n        if (temp &lt; 0)\n        {\n            temp = -temp;\n            lcd_show_string(0 + 10 * 8, 0, 16, 16, 16, \"-\", BLUE); /* Display '-' sign */\n        }\n        else\n        {\n            lcd_show_string(0 + 10 * 8, 0, 16, 16, 16, \" \", BLUE); /* No sign for positive values */\n        }\n\n        /* Display integer part */\n        lcd_show_xnum(0 + 11 * 8, 0, (int)temp, 2, 16, 0, BLUE); /* Convert temp to int for integer part */\n\n        /* Display decimal point */\n        lcd_show_string(0 + 13 * 8, 0, 16, 16, 16, \".\", BLUE); /* Display decimal point */\n\n        /* Display fractional part */\n        lcd_show_xnum(0 + 14 * 8, 0, (int)(temp * 100) % 100, 2, 16, 0, BLUE); /* Multiply by 100 to shift two decimal places */\n\n        led_toggle(); /* Toggle LED to indicate program is running */\n        vTaskDelay(250);\n    }\n}\n</code></pre>"},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/","title":"DURUOFU SERIES","text":"<ul> <li> <p> DURUOFU ESP32-GUIDE \ud83c\udfaf\ud83c\udfc6</p> <p>  New Version </p> <p>  Old Version </p> </li> </ul>"},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/#tutorial-progress","title":"TUTORIAL PROGRESS","text":""},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/#c0-common-questions","title":"C0 COMMON QUESTIONS","text":"<ul> <li> 0.1 COMMON QUESTIONS</li> </ul>"},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/#c1-get-to-know-esp32","title":"C1 GET TO KNOW ESP32","text":"<ul> <li> 1.1 ESP32 INTRODUCTION</li> <li> 1.2 ESP32 DEVELOPMENT ENVIRONMENT</li> <li> 1.3 ESP32 idf.py BASIC COMMANDS</li> </ul>"},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/#c2-esp32-idf-basics","title":"C2 ESP32-IDF BASICS","text":"<ul> <li> 2.1 ESP32-IDF PROJECT STRUCTURE</li> <li> 2.2 ESP32-IDF PROJECT CONFIGURATION</li> <li> 2.3 ESP32-IDF CUSTOM COMPONENTS</li> <li> 2.4 ESP32-IDF COMPONENTS REGISTRY</li> </ul>"},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/#c3-freertos-basics","title":"C3 FreeRTOS BASICS","text":"<ul> <li> 3.1 FreeRTOS INTRODUCTION</li> <li> 3.2 FreeRTOS MULTITASKING AND TASK MANAGEMENT</li> <li> 3.3 FreeRTOS TASK WATCHDOG</li> </ul>"},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/#c4-esp32-idf-peripherals","title":"C4 ESP32-IDF PERIPHERALS","text":""},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/#41-basic-peripherals","title":"4.1 BASIC PERIPHERALS","text":"<ul> <li> 4.1.1 GPIO</li> <li> 4.1.2 UART</li> <li> 4.1.3 TIMER</li> <li> 4.1.4 ADC</li> <li> 4.1.5 DAC</li> <li> 4.1.6 LED_PWM</li> <li> 4.1.7 I2C</li> <li> 4.1.8 SPI</li> <li> 4.1.9 I2S</li> </ul>"},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/#42-storage-peripherals","title":"4.2 STORAGE PERIPHERALS","text":"<ul> <li> 4.2.1 PARTITION TABLE</li> <li> 4.2.2 NVS</li> <li> 4.2.3 FATFS</li> <li> 4.2.4 SPIFFS</li> <li> 4.2.5 SD CARD</li> </ul>"},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/#c5-freertos-advanced","title":"C5 FreeRTOS ADVANCED","text":"<ul> <li> 5.1 FreeRTOS QUEUE</li> <li> 5.2 FreeRTOS SEMAPHORE</li> <li> 5.3 FreeRTOS MUTEX</li> <li> 5.4 FreeRTOS EVENT GROUP</li> <li> 5.5 FreeRTOS TASK NOTIFICATION</li> </ul>"},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/#c6-wifi","title":"C6 WIFI","text":"<ul> <li> 6.1 WIFI KICKSTART<ul> <li> Wi-Fi Mode and Introduction</li> <li> Wi-Fi STA and AP Configuration</li> </ul> </li> <li> 6.2 NETWORK PROTOCOL APPLICATION<ul> <li> TCP </li> <li> UDP </li> <li> HTTP </li> <li> WEBSOCKET </li> <li> MQTT </li> <li> ESP-NOW</li> </ul> </li> </ul>"},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/#c7-ble","title":"C7 BLE","text":"<ul> <li> 7.1 BLE Basics</li> <li> 7.2 BLE Development Environment</li> <li> 7.3 BLE Classic Bluetooth Development</li> </ul>"},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/#c8-gui-development","title":"C8 GUI DEVELOPMENT","text":"<ul> <li> 8.1 LVGL Basics</li> <li> 8.2 Common Components and Layouts</li> <li> 8.3 GUI Project Development</li> </ul>"},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/#c9-practical-topics","title":"C9 PRACTICAL TOPICS","text":"<ul> <li> 9.1 WIFI NETWORK CONFIGURATION</li> <li> 9.2 Web Service Program</li> <li> 9.3 OTA</li> </ul>"},{"location":"TUTORIAL_STUDY/DURUOFU/duruofu/#c10-hands-on","title":"C10 HANDS ON","text":""},{"location":"TUTORIAL_STUDY/LICHUANG/lichuang/","title":"LICHUANG EDA ESP32S3+ESP-IDF Development Application Detailed Tutorial","text":"<ul> <li> <p> \u3010\u7acb\u521b\u5b9e\u6218\u6d3eESP32-S3\uff0c\u5634\u5bf9\u5634\u5e26\u4f60\u4ece\u5165\u95e8\u5230\u9879\u76ee\u5b9e\u6218\uff0110\u5e74\u5d4c\u5165\u5f0f\u5de5\u7a0b\u5e08\u503e\u56ca\u76f8\u6388 \ud83c\udfaf\ud83c\udfc6</p> <p>  Portal </p> </li> </ul>"},{"location":"TUTORIAL_STUDY/MORNINGCORE/morningcore/","title":"MORNINGCORE TUTORIAL SERIES","text":""},{"location":"TUTORIAL_STUDY/MORNINGCORE/morningcore/#tutorial-links","title":"Tutorial Links","text":"<p>Note</p> <p>This tutorial series is a tutorial on the use of the Morningcore ESP32 series development board, mainly for beginners, to help beginners quickly get started with the Morningcore ESP32 series development board. The related tutorial videos and example repositories are as follows:</p> <ul> <li> <p> \u3010ESP32S3+ESP-IDF\u5f00\u53d1\u5e94\u7528\u8be6\u7ec6\u6559\u7a0b \ud83c\udfaf\ud83c\udfc6</p> <p>  \u6587\u6863 </p> <p>  \u89c6\u9891 </p> </li> <li> <p> esp32-board</p> <p>Example repository</p> <p>  esp32 </p> <p>  esp32s3 </p> </li> </ul>"},{"location":"TUTORIAL_STUDY/MORNINGCORE/morningcore/#progress","title":"Progress","text":"<ul> <li> 1.0 ESP-IDF Tutorial Video and Kit Introduction</li> <li> 1.1 \u3010Basics\u3011Development Environment Setup</li> <li> 1.2 \u3010Basics\u3011Writing, Compiling, Flashing, and Running the First Program</li> <li> 1.3 \u3010Basics\u3011Project Directory Analysis</li> <li> 1.4 \u3010Basics\u3011Storage Distribution Analysis</li> <li> 1.5 \u3010Basics\u3011Program Partition Table and Boot Introduction</li> <li> 1.6 \u3010Basics\u3011C Language Knowledge Review</li> <li> 1.7 \u3010Basics\u3011Components and Component Manager</li> <li> 2.0 \u3010Peripherals\u3011Lighting up an LED</li> <li> 2.1 \u3010Peripherals\u3011I2C Driver Development</li> <li> 2.2 \u3010Peripherals\u3011XL9555 Driver</li> <li> 2.3 \u3010Peripherals\u3011Key Logic Design</li> <li> 2.4 \u3010Peripherals\u3011Key Logic Implementation</li> </ul>"},{"location":"TUTORIAL_STUDY/MORNINGCORE/01-helloworld/helloworld/","title":"HELLO WORLD","text":""},{"location":"TUTORIAL_STUDY/MORNINGCORE/01-helloworld/helloworld/#prepare-the-project","title":"Prepare the project","text":"<p>Copy the template project to the working directory</p>"},{"location":"TUTORIAL_STUDY/MORNINGCORE/01-helloworld/helloworld/#_1","title":"\u66ff\u6362\u4ee3\u7801","text":"<p>\u5c06main.c\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>#include &lt;stdio.h&gt;                     // Standard input-output library for basic I/O operations\n#include \"freertos/FreeRTOS.h\"         // FreeRTOS core library, providing real-time operating system features\n#include \"freertos/task.h\"             // FreeRTOS task management library, includes functions for creating, deleting, and delaying tasks\n#include \"esp_log.h\"                   // ESP32 logging library for debugging and information output\n\n// Define a log tag to identify the module where the log is coming from\nstatic const char* TAG = \"main\";\n\n// Main function, the entry point of the ESP32 program\nvoid app_main(void)\n{\n    // Infinite loop, the code inside the loop will be repeatedly executed\n    while(1)\n    {\n        // Log an informational message with the \"Hello world!\" string\n        // TAG identifies the log's source module, here it is \"main\"\n        ESP_LOGI(TAG,\"Hello world!\");\n\n        // Delay the task for 1 second before repeating the loop\n        // vTaskDelay pauses the task for the specified time, where pdMS_TO_TICKS(1000) converts 1000 milliseconds (1 second) to FreeRTOS ticks\n        vTaskDelay(pdMS_TO_TICKS(1000));\n    }\n}\n</code></pre>"},{"location":"TUTORIAL_STUDY/MORNINGCORE/01-helloworld/helloworld/#compiling-flashing-and-monitoring","title":"Compiling, Flashing, and Monitoring","text":"<p>In the serial monitor, you will see \"Hello world!\" printed every second.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"zh/","title":"ESP32 \u5b66\u4e60","text":"<p>\u8fd9\u4e2a\u9879\u76ee\u81f4\u529b\u4e8e\u57fa\u4e8eESP32\u5b66\u4e60\u548c\u5b9e\u8df5\u3002</p> <p></p>"},{"location":"zh/#esp-idf","title":"\u4e50\u946b\u79d1\u6280\u548c\u4e50\u946b\u7269\u8054\u7f51\u5f00\u53d1\u6846\u67b6 (ESP-IDF)","text":"<p>Info</p> <p>\u4e50\u946b\u79d1\u6280 \u662f\u4e00\u5bb6\u603b\u90e8\u4f4d\u4e8e\u4e2d\u56fd\u7684\u534a\u5bfc\u4f53\u516c\u53f8\uff0c\u4ee5\u5f00\u53d1\u4f4e\u529f\u8017\u65e0\u7ebf\u89e3\u51b3\u65b9\u6848\u95fb\u540d\uff0c\u5305\u62ecWi-Fi\u548c\u84dd\u7259\u6a21\u5757\u4ee5\u53ca\u7cfb\u7edf\u7ea7\u82af\u7247\uff08SoC\uff09\u3002\u5176\u4ea7\u54c1\uff0c\u5982ESP8266\u548cESP32\u7cfb\u5217\uff0c\u56e0\u5176\u4f4e\u6210\u672c\u3001\u8282\u80fd\u548c\u6613\u7528\u6027\u5728\u7269\u8054\u7f51\u3001\u5d4c\u5165\u5f0f\u7cfb\u7edf\u548c\u65e0\u7ebf\u901a\u4fe1\u9886\u57df\u5e7f\u53d7\u6b22\u8fce\u3002\u4e50\u946b\u79d1\u6280\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u5f00\u53d1\u5de5\u5177\u548c\u8f6f\u4ef6\u652f\u6301\uff0c\u4f7f\u5176\u4ea7\u54c1\u88ab\u4f17\u591a\u5f00\u53d1\u8005\u548c\u5de5\u7a0b\u5e08\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404\u7c7b\u884c\u4e1a\u4e2d\u3002</p> <p>Info</p> <p>ESP-IDF\uff08\u4e50\u946b\u7269\u8054\u7f51\u5f00\u53d1\u6846\u67b6\uff09 \u662f\u4e50\u946b\u79d1\u6280\u4e3aESP32\u7cfb\u5217\u82af\u7247\u63d0\u4f9b\u7684\u5b98\u65b9\u5f00\u53d1\u6846\u67b6\u3002\u5b83\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u6574\u5957\u5de5\u5177\u548c\u5e93\uff0c\u5e2e\u52a9\u521b\u5efa\u57fa\u4e8eESP32\u8bbe\u5907\u7684\u7a33\u5065\u5e94\u7528\u3002ESP-IDF\u652f\u6301FreeRTOS\u3001Wi-Fi\u3001\u84dd\u7259\u4ee5\u53ca\u591a\u79cd\u5916\u8bbe\u63a5\u53e3\u3002\u8be5\u6846\u67b6\u517c\u5bb9GCC\u5de5\u5177\u94fe\uff0c\u652f\u6301C\u548cC++\u7b49\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u5305\u542b\u7f51\u7edc\u3001\u5b89\u5168\u3001\u529f\u8017\u7ba1\u7406\u548c\u9a71\u52a8\u5f00\u53d1\u7b49\u7ec4\u4ef6\uff0c\u975e\u5e38\u9002\u5408\u5e7f\u6cdb\u7684\u7269\u8054\u7f51\u5e94\u7528\u5f00\u53d1\u3002</p> <p>Note</p> <p>\u4f7f\u7528ESP-IDF\u6709\u4e24\u79cd\u65b9\u5f0f\uff1aESP-IDF\u547d\u4ee4\u63d0\u793a\u7b26 \u548c \u57fa\u4e8eGUI\u7684IDE \uff0c\u5982Visual Studio Code\u3002\u540e\u8005\u662f\u4f7f\u7528ESP-IDF\u6700\u6d41\u884c\u7684\u65b9\u5f0f\u3002</p>"},{"location":"zh/#_1","title":"\u5f00\u53d1\u5de5\u5177\u94fe","text":"\u5de5\u5177\u94fe \u63cf\u8ff0 \u4f18\u52bf \u52a3\u52bf ESP_IDF\u2705 Espressif IoT Development Framework \u529f\u80fd\u4e30\u5bcc\uff0c\u6587\u6863\u5b8c\u5584 \u5b66\u4e60\u66f2\u7ebf\u9661 MICROPYTHON Python for microcontrollers \u6613\u5b66\uff0c\u5f00\u53d1\u8fc5\u901f \u8d44\u6e90\u6709\u9650 ARDUINO \u5f00\u6e90\u7535\u5b50\u5e73\u53f0 \u6613\u7528\uff0c\u793e\u533a\u5e9e\u5927 \u8d44\u6e90\u6709\u9650 <p>Note</p> <p>\u5bf9\u4e8e\u5feb\u901f\u539f\u578b\u8bbe\u8ba1\uff0c\u6211\u4eec\u4f7f\u7528 MICROPYTHON\uff1b\u5bf9\u4e8e\u9ad8\u6027\u80fd\u5e94\u7528\uff0c\u6211\u4eec\u4f7f\u7528 ESP_IDF\u3002</p>"},{"location":"zh/#_2","title":"\u5b89\u88c5","text":"<p>Note</p> <p>\u5728\u4f7f\u7528\u65b9\u5f0f\u4e0a\uff0c\u6709\u4e09\u79cd\u4f7f\u7528ESP-IDF\u7684\u65b9\u5f0f\uff1a</p> <ul> <li> <p>ESP-IDF\u547d\u4ee4\u63d0\u793a\u7b26\uff1a\u8fd9\u662f\u4f7f\u7528ESP-IDF\u7684\u9ed8\u8ba4\u65b9\u5f0f\u3002\u5b83\u662f\u4e00\u4e2a\u547d\u4ee4\u884c\u754c\u9762\uff0c\u63d0\u4f9b\u4e86ESP-IDF\u5f00\u53d1\u6240\u9700\u7684\u5de5\u5177\u548c\u5b9e\u7528\u7a0b\u5e8f\u3002</p> </li> <li> <p>ESP-IDF\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff1a\u8fd9\u662f\u4e00\u4e2a\u63d0\u4f9bESP-IDF\u5f00\u53d1\u56fe\u5f62\u754c\u9762\u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883\u3002\u5b83\u5305\u62ecESP-IDF\u547d\u4ee4\u63d0\u793a\u7b26\u3001\u6587\u672c\u7f16\u8f91\u5668\u548c\u9879\u76ee\u7ba1\u7406\u5668\u7b49\u5de5\u5177\u3002</p> </li> <li> <p>IDE\u63d2\u4ef6\uff1a\u8fd9\u4e9b\u63d2\u4ef6\u5c06ESP-IDF\u4e0e\u6d41\u884c\u7684IDE\uff08\u5982Visual Studio Code\u548cEclipse\uff09\u96c6\u6210\u3002\u5b83\u4eec\u63d0\u4f9b\u4ee3\u7801\u8865\u5168\u3001\u8bed\u6cd5\u9ad8\u4eae\u548c\u8c03\u8bd5\u652f\u6301\u7b49\u529f\u80fd\u3002\u8fd9\u662f\u4f7f\u7528ESP-IDF\u6700\u6d41\u884c\u7684\u65b9\u5f0f\u3002</p> </li> </ul> <ul> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011\uff5c\u4f7f\u7528\u4e00\u952e\u5b89\u88c5\u5de5\u5177\u5feb\u901f\u642d\u5efa ESP-IDF \u5f00\u53d1\u73af\u5883 (Windows) \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011\uff5c\u4f7f\u7528 VS Code \u5feb\u901f\u642d\u5efa ESP-IDF \u5f00\u53d1\u73af\u5883 (Windows\u3001Linux\u3001MacOS) \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>Recommended.</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/#_3","title":"\u5b98\u65b9\u6307\u5357","text":""},{"location":"zh/#_4","title":"\u5728\u7ebf\u6587\u6863","text":"<ul> <li> <p> ESP-IDF \u7f16\u7a0b\u6307\u5357 \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/#_5","title":"\u89c6\u9891\u6559\u7a0b","text":"<ul> <li> <p> DURUOFU ESP32-\u6559\u7a0b \ud83c\udfaf\ud83c\udfc6</p> <p>  \u65b0\u7248 </p> <p>  \u65e7\u7248 </p> </li> <li> <p> \u5bb8\u82afIOT \ud83c\udfaf\ud83c\udfc6</p> <p>  \u65b0\u7248 </p> <p>  \u65e7\u7248 </p> </li> <li> <p> \u5b64\u72ec\u7684\u4e8c\u8fdb\u5236 ESP-IDF \u6559\u7a0b \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> MCU AI</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/#freertos","title":"FREERTOS","text":"<p>\u7531\u4e8eESP-IDF\u662f\u57fa\u4e8eFreeRTOS\u7684\uff0c\u56e0\u6b64\u5b66\u4e60FreeRTOS\u5bf9\u4e8e\u7406\u89e3ESP-IDF\u975e\u5e38\u91cd\u8981\u3002</p> <ul> <li> <p> ESP32_freeRTOS\u6559\u7a0b \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> \u5b64\u72ec\u7684\u4e8c\u8fdb\u5236 FREERTOS \u6559\u7a0b</p> <p>\u57fa\u4e8eArduinoIDE</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/CHEATING_SHEET/cheating_sheet/","title":"ESP32\u7f16\u7a0b\u901f\u67e5\u8868","text":"<p>Note</p> <p>\u8be5\u6a21\u5757\u4f9bESP-IDF \u7f16\u7a0b\u4e2d\u5e38\u7528\u6a21\u5757\uff0c\u529f\u80fd\uff0c\u51fd\u6570\u7684\u7d22\u5f15\uff0c\u65b9\u4fbf\u67e5\u9605\u3002</p>"},{"location":"zh/CHEATING_SHEET/COMMAND/command/","title":"\u5e38\u7528\u547d\u4ee4","text":""},{"location":"zh/CHEATING_SHEET/COMMAND/command/#_2","title":"\u76ee\u5f55","text":"\u7528\u9014 \u547d\u4ee4 \u521b\u5efa\u9879\u76ee <code>idf.py create_project &lt;project_name&gt;</code> \u8bbe\u7f6e\u76ee\u6807 <code>idf.py set_target &lt;target&gt;</code> \u914d\u7f6e <code>idf.py menuconfig</code> \u521b\u5efa\u7ec4\u4ef6 <code>idf.py -C &lt;project_path&gt; create_component &lt;component_name&gt;</code> \u6dfb\u52a0\u6ce8\u518c\u8868\u7ec4\u4ef6 <code>idf.py add-dependency &lt;component_name&gt;</code> \u7f16\u8bd1 <code>idf.py build</code> \u70e7\u5199 <code>idf.py -p &lt;port&gt; flash</code> \u76d1\u89c6 <code>idf.py -p &lt;port&gt; monitor</code> Build &amp; Flash &amp; Monitor <code>idf.py build flash monitor</code>"},{"location":"zh/CHEATING_SHEET/COMMAND/command/#_3","title":"\u521b\u5efa\u9879\u76ee","text":"<p>\u547d\u4ee4\u539f\u578b</p> <pre><code>idf.py create_project &lt;project_name&gt;\n</code></pre> <p>\u793a\u4f8b</p> <pre><code>idf.py create_project my_project\n</code></pre>"},{"location":"zh/CHEATING_SHEET/COMMAND/command/#_4","title":"\u8bbe\u7f6e\u76ee\u6807","text":"<p>\u547d\u4ee4\u539f\u578b</p> <pre><code>idf.py set_target &lt;target&gt;\n</code></pre> <p>\u793a\u4f8b</p> <pre><code>idf.py set_target esp32s3\n</code></pre>"},{"location":"zh/CHEATING_SHEET/COMMAND/command/#_5","title":"\u914d\u7f6e","text":"<p>\u547d\u4ee4\u539f\u578b</p> <pre><code>idf.py menuconfig\n</code></pre> <p>\u793a\u4f8b</p> <pre><code>idf.py menuconfig\n</code></pre> <p>ESP32 \u914d\u7f6e\u4f53\u7cfb</p> <p>ESP32\u9879\u76ee\u4e2d\uff0c\u901a\u5e38\u6211\u4eec\u4f1a\u901a\u8fc7 <code>menuconfig</code> \u547d\u4ee4\u6765\u914d\u7f6e\u9879\u76ee\u3002<code>menuconfig</code> \u547d\u4ee4\u4f1a\u6253\u5f00\u4e00\u4e2a\u914d\u7f6e\u754c\u9762\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u754c\u9762\u4e2d\u914d\u7f6e\u9879\u76ee\u7684\u5404\u79cd\u9009\u9879\uff0c\u800c\u8fd9\u4e2a\u914d\u7f6e\u754c\u9762\u662f\u901a\u8fc7 <code>Kconfig</code> \u6587\u4ef6\u751f\u6210\u7684\u3002\u6211\u4eec\u5728\u9879\u76ee\u4e2d\u7684 <code>sdkconfig</code> \u6587\u4ef6\u4e2d\u4fdd\u5b58\u4e86\u8fd9\u4e9b\u914d\u7f6e\u9009\u9879\u7684\u503c\u3002</p> <p>\u7b80\u5355\u6765\u8bf4\uff0c\u914d\u7f6e\u4f53\u7cfb\u7684\u903b\u8f91\u5173\u7cfb\u662f\uff1a<code>Kconfig</code> -&gt; <code>menuconfig</code> -&gt; <code>sdkconfig</code>, \u6211\u4eec\u901a\u8fc7<code>Kconfig</code>\u6587\u4ef6\u5b9a\u4e49\u914d\u7f6e\u9009\u9879\uff0c\u901a\u8fc7<code>menuconfig</code>\u547d\u4ee4\u914d\u7f6e\u8fd9\u4e9b\u9009\u9879\uff0c\u7136\u540e\u901a\u8fc7<code>sdkconfig</code>\u6587\u4ef6\u4fdd\u5b58\u8fd9\u4e9b\u914d\u7f6e\u9009\u9879\u7684\u503c\u3002</p>"},{"location":"zh/CHEATING_SHEET/COMMAND/command/#_6","title":"\u521b\u5efa\u7ec4\u4ef6","text":"<p>\u547d\u4ee4\u539f\u578b</p> <pre><code>idf.py -C &lt;project_path&gt; create_component &lt;component_name&gt;\n</code></pre> <p>Note</p> <p><code>-C</code> \u9009\u9879\u7528\u4e8e\u6307\u5b9a\u9879\u76ee\u7684\u8def\u5f84\u3002</p> <p><code>&lt;project_path&gt;</code> \u662f\u9879\u76ee\u7684\u8def\u5f84\u3002</p> <p><code>&lt;component_name&gt;</code> \u662f\u7ec4\u4ef6\u7684\u540d\u79f0\u3002</p> <p>\u793a\u4f8b</p> <pre><code>idf.py -C /path/to/project create_component my_component\n</code></pre>"},{"location":"zh/CHEATING_SHEET/COMMAND/command/#_7","title":"\u6dfb\u52a0\u6ce8\u518c\u8868\u7ec4\u4ef6","text":"<p>\u547d\u4ee4\u539f\u578b</p> <pre><code>idf.py add-dependency &lt;component_name&gt;\n</code></pre> <p>\u793a\u4f8b</p> <pre><code>idf.py add-dependency \"joltwallet/littlefs^1.16.4\"\n</code></pre>"},{"location":"zh/CHEATING_SHEET/COMMAND/command/#_8","title":"\u7f16\u8bd1","text":"<p>\u547d\u4ee4\u539f\u578b</p> <pre><code>idf.py build\n</code></pre> <p>\u793a\u4f8b</p> <pre><code>idf.py build\n</code></pre>"},{"location":"zh/CHEATING_SHEET/COMMAND/command/#_9","title":"\u70e7\u5199","text":"<p>\u547d\u4ee4\u539f\u578b</p> <pre><code>idf.py -p &lt;port&gt; flash\n</code></pre> <p>\u793a\u4f8b</p> <pre><code>idf.py -p /dev/ttyUSB0 flash\n</code></pre> <p>Tip</p> <p>\u7b80\u77ed\u8d77\u89c1\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4f60\u90fd\u53ef\u4ee5\u4f7f\u7528 <code>idf.py flash</code> \u547d\u4ee4\uff0c\u7535\u8111\u4f1a\u81ea\u52a8\u68c0\u6d4b\u7aef\u53e3\u5e76\u70e7\u5199\u3002</p>"},{"location":"zh/CHEATING_SHEET/COMMAND/command/#_10","title":"\u76d1\u89c6","text":"<p>\u547d\u4ee4\u539f\u578b</p> <pre><code>idf.py -p &lt;port&gt; monitor\n</code></pre> <p>\u793a\u4f8b</p> <pre><code>idf.py -p /dev/ttyUSB0 monitor\n</code></pre> <p>Tip</p> <p>\u7b80\u77ed\u8d77\u89c1\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4f60\u90fd\u53ef\u4ee5\u4f7f\u7528 <code>idf.py monitor</code> \u547d\u4ee4\uff0c\u7535\u8111\u4f1a\u81ea\u52a8\u68c0\u6d4b\u7aef\u53e3\u5e76\u76d1\u89c6\u3002</p>"},{"location":"zh/CHEATING_SHEET/COMMAND/command/#_11","title":"\u7f16\u8bd1 &amp; \u70e7\u5199 &amp; \u76d1\u89c6","text":"<p>\u547d\u4ee4\u539f\u578b</p> <pre><code>idf.py build flash monitor\n</code></pre> <p>\u793a\u4f8b</p> <pre><code>idf.py build flash monitor\n</code></pre>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#_1","title":"\u4efb\u52a1\u521b\u5efa","text":""},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xtaskcreatepinnedtocore","title":"xTaskCreatePinnedToCore","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>BaseType_t xTaskCreatePinnedToCore(TaskFunction_t pxTaskCode, // \u4efb\u52a1\u51fd\u6570\u6307\u9488\n                                   const char * const pcName, // \u4efb\u52a1\u540d\u79f0\n                                   const uint32_t usStackDepth, // \u4efb\u52a1\u6808\u5927\u5c0f\n                                   void * const pvParameters, // \u4efb\u52a1\u53c2\u6570\n                                   UBaseType_t uxPriority, // \u4efb\u52a1\u4f18\u5148\u7ea7\n                                   TaskHandle_t * const pxCreatedTask, // \u4efb\u52a1\u53e5\u67c4\n                                   const BaseType_t xCoreID); // \u6838\u5fc3ID\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p>\u5728ESP-IDF\uff08ESP32\u5f00\u53d1\u6846\u67b6\uff09\u4e2d\uff0c<code>xTaskCreatePinnedToCore</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u4efb\u52a1\u5e76\u5c06\u4efb\u52a1\u56fa\u5b9a\u5230\u6307\u5b9aCPU\u6838\u5fc3\u7684\u51fd\u6570\u3002ESP32\u662f\u4e00\u6b3e\u53cc\u6838\u5fae\u63a7\u5236\u5668\uff08ESP32-S\u7cfb\u5217\u662f\u5355\u6838\uff09\uff0c\u5b83\u5177\u6709\u4e24\u4e2a\u5904\u7406\u6838\u5fc3\uff1aCore 0 \u548c Core 1\u3002\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1\u8005\u5c06\u4efb\u52a1\u56fa\u5b9a\u5728\u7279\u5b9a\u7684\u6838\u5fc3\u4e0a\u8fd0\u884c\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u7ba1\u7406CPU\u8d1f\u8f7d\u548c\u5b9e\u65f6\u6027\u80fd\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>pxTaskCode</code>\uff1a\u4efb\u52a1\u51fd\u6570\u6307\u9488\u3002\u5b83\u6307\u5411\u8981\u5728\u65b0\u4efb\u52a1\u4e2d\u6267\u884c\u7684\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u7684\u5b9a\u4e49\u683c\u5f0f\u901a\u5e38\u4e3a <code>void function_name(void *pvParameters)</code>\uff0c\u5176\u4e2d <code>pvParameters</code> \u662f\u4f20\u9012\u7ed9\u4efb\u52a1\u7684\u53c2\u6570\u3002</li> <li><code>pcName</code>\uff1a\u4efb\u52a1\u7684\u540d\u79f0\u5b57\u7b26\u4e32\uff0c\u901a\u5e38\u7528\u4e8e\u8c03\u8bd5\u548c\u76d1\u63a7\u3002\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u65b9\u4fbf\u8bc6\u522b\u7684\u5b57\u7b26\u4e32\u540d\u79f0\u3002</li> <li><code>usStackDepth</code>\uff1a\u4efb\u52a1\u6808\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\uff084\u5b57\u8282\uff09\u4e3a\u5355\u4f4d\u3002\u6808\u5927\u5c0f\u5e94\u6839\u636e\u4efb\u52a1\u4e2d\u9700\u8981\u7684\u6808\u7a7a\u95f4\u6765\u8bbe\u7f6e\u3002</li> <li><code>pvParameters</code>\uff1a\u4f20\u9012\u7ed9\u4efb\u52a1\u51fd\u6570\u7684\u53c2\u6570\u6307\u9488\u3002\u5982\u679c\u4efb\u52a1\u51fd\u6570\u4e0d\u9700\u8981\u53c2\u6570\uff0c\u53ef\u4ee5\u8bbe\u4e3a <code>NULL</code>\u3002</li> <li><code>uxPriority</code>\uff1a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002\u6570\u503c\u8d8a\u5927\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002ESP-IDF\u4e2d\u4f18\u5148\u7ea7\u53ef\u4ee5\u8bbe\u7f6e\u7684\u8303\u56f4\u662f 0 \u5230 24\u3002</li> <li><code>pxCreatedTask</code>\uff1a\u4efb\u52a1\u53e5\u67c4\u7684\u6307\u9488\uff0c\u7528\u4e8e\u63a5\u6536\u521b\u5efa\u4efb\u52a1\u7684\u53e5\u67c4\u3002\u5982\u679c\u4e0d\u9700\u8981\u4efb\u52a1\u53e5\u67c4\uff0c\u53ef\u4ee5\u5c06\u5176\u8bbe\u4e3a<code>NULL</code>\u3002</li> <li><code>xCoreID</code>\uff1a<code>0</code>\uff1a\u7ed1\u5b9a\u5230\u6838\u5fc30\uff08\u4e3b\u6838\u5fc3\uff09\u3002<code>1</code>\uff1a\u7ed1\u5b9a\u5230\u6838\u5fc31\u3002<code>tskNO_AFFINITY</code>\uff1a\u4e0d\u7ed1\u5b9a\u5230\u7279\u5b9a\u6838\u5fc3\uff0c\u5141\u8bb8FreeRTOS\u5728\u4efb\u4e00\u6838\u5fc3\u4e0a\u8c03\u5ea6\u4efb\u52a1\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li><code>pdPASS</code>\uff1a\u4efb\u52a1\u521b\u5efa\u6210\u529f\u3002</li> <li><code>pdFAIL</code>\uff1a\u4efb\u52a1\u521b\u5efa\u5931\u8d25\u3002</li> </ul> <p>\u793a\u4f8b</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// \u5b9a\u4e49\u4efb\u52a1\u51fd\u6570\nvoid myTask(void *pvParameters)\n{\n    while(1)\n    {\n        printf(\"Hello from myTask on Core 0\\n\");\n        vTaskDelay(pdMS_TO_TICKS(1000));  // \u5ef6\u65f61\u79d2\n    }\n}\n\nvoid app_main(void)\n{\n    // \u521b\u5efa\u4efb\u52a1\u5e76\u5c06\u5176\u56fa\u5b9a\u5728\u6838\u5fc30\n    xTaskCreatePinnedToCore(\n        myTask,          // \u4efb\u52a1\u51fd\u6570\n        \"MyTask\",        // \u4efb\u52a1\u540d\u79f0\n        2048,            // \u4efb\u52a1\u6808\u5927\u5c0f\n        NULL,            // \u4efb\u52a1\u53c2\u6570\n        5,               // \u4efb\u52a1\u4f18\u5148\u7ea7\n        NULL,            // \u4efb\u52a1\u53e5\u67c4\n        0                // \u6838\u5fc3ID\uff080\u8868\u793a\u7ed1\u5b9a\u5230\u6838\u5fc30\uff09\n    );\n}\n</code></pre>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xtaskcreatestaticpinnedtocore","title":"xTaskCreateStaticPinnedToCore","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>TaskHandle_t xTaskCreateStaticPinnedToCore(TaskFunction_t pxTaskCode, // \u4efb\u52a1\u51fd\u6570\u6307\u9488\n                                           const char * const pcName, // \u4efb\u52a1\u540d\u79f0\n                                           const uint32_t ulStackDepth, // \u4efb\u52a1\u6808\u5927\u5c0f\n                                           void * const pvParameters, // \u4efb\u52a1\u53c2\u6570\n                                           UBaseType_t uxPriority, // \u4efb\u52a1\u4f18\u5148\u7ea7\n                                           StackType_t * const puxStackBuffer, // \u6307\u5411\u6808\u7a7a\u95f4\u7684\u53ef\u7528\u5185\u5b58\u533a\u57df\n                                           StaticTask_t * const pxTaskBuffer, // \u6307\u5411\u4efb\u52a1\u63cf\u8ff0\u7684\u53ef\u7528\u5185\u5b58\u533a\u57df\n                                           const BaseType_t xCoreID); // \u6838\u5fc3ID\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xTaskCreateStaticPinnedToCore</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u4efb\u52a1\u5e76\u5c06\u4efb\u52a1\u56fa\u5b9a\u5230\u6307\u5b9aCPU\u6838\u5fc3\u7684\u51fd\u6570\u3002\u4e0e <code>xTaskCreatePinnedToCore</code> \u4e0d\u540c\u7684\u662f\uff0c<code>xTaskCreateStaticPinnedToCore</code> \u5141\u8bb8\u7528\u6237\u63d0\u4f9b\u4efb\u52a1\u7684\u6808\u7a7a\u95f4\u548c\u4efb\u52a1\u63cf\u8ff0\u7b26\u7684\u5185\u5b58\u533a\u57df\u3002\u8fd9\u6837\u53ef\u4ee5\u66f4\u597d\u5730\u63a7\u5236\u4efb\u52a1\u7684\u5185\u5b58\u5206\u914d\u548c\u7ba1\u7406\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>pxTaskCode</code>\uff1a\u4efb\u52a1\u51fd\u6570\u6307\u9488\u3002\u5b83\u6307\u5411\u8981\u5728\u65b0\u4efb\u52a1\u4e2d\u6267\u884c\u7684\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u7684\u5b9a\u4e49\u683c\u5f0f\u901a\u5e38\u4e3a <code>void function_name(void *pvParameters)</code>\uff0c\u5176\u4e2d <code>pvParameters</code> \u662f\u4f20\u9012\u7ed9\u4efb\u52a1\u7684\u53c2\u6570\u3002</li> <li><code>pcName</code>\uff1a\u4efb\u52a1\u7684\u540d\u79f0\u5b57\u7b26\u4e32\uff0c\u901a\u5e38\u7528\u4e8e\u8c03\u8bd5\u548c\u76d1\u63a7\u3002\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u65b9\u4fbf\u8bc6\u522b\u7684\u5b57\u7b26\u4e32\u540d\u79f0\u3002</li> <li><code>ulStackDepth</code>\uff1a\u4efb\u52a1\u6808\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\uff084\u5b57\u8282\uff09\u4e3a\u5355\u4f4d\u3002\u6808\u5927\u5c0f\u5e94\u6839\u636e\u4efb\u52a1\u4e2d\u9700\u8981\u7684\u6808\u7a7a\u95f4\u6765\u8bbe\u7f6e\u3002</li> <li><code>pvParameters</code>\uff1a\u4f20\u9012\u7ed9\u4efb\u52a1\u51fd\u6570\u7684\u53c2\u6570\u6307\u9488\u3002\u5982\u679c\u4efb\u52a1\u51fd\u6570\u4e0d\u9700\u8981\u53c2\u6570\uff0c\u53ef\u4ee5\u8bbe\u4e3a <code>NULL</code>\u3002</li> <li><code>uxPriority</code>\uff1a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002\u6570\u503c\u8d8a\u5927\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002ESP-IDF\u4e2d\u4f18\u5148\u7ea7\u53ef\u4ee5\u8bbe\u7f6e\u7684\u8303\u56f4\u662f 0 \u5230 24\u3002</li> <li><code>puxStackBuffer</code>\uff1a\u6307\u5411\u9759\u6001\u5206\u914d\u7684\u4efb\u52a1\u6808\u7684\u6307\u9488\u3002\u6808\u5185\u5b58\u9700\u63d0\u524d\u5206\u914d\u5e76\u4f20\u5165\u51fd\u6570\uff0c\u4efb\u52a1\u4f1a\u4f7f\u7528\u8fd9\u5757\u5185\u5b58\u800c\u4e0d\u662f\u52a8\u6001\u5206\u914d\u6808\u7a7a\u95f4\u3002</li> <li><code>pxTaskBuffer</code>\uff1a\u6307\u5411\u9759\u6001\u4efb\u52a1\u63a7\u5236\u5757\u7684\u6307\u9488\u3002\u63a7\u5236\u5757\u7528\u4e8eFreeRTOS\u7ba1\u7406\u4efb\u52a1\u4fe1\u606f\uff08\u4f8b\u5982\u72b6\u6001\u3001\u4f18\u5148\u7ea7\u3001\u6808\u6307\u9488\u7b49\uff09\u3002\u6b64\u63a7\u5236\u5757\u4e5f\u9700\u63d0\u524d\u5206\u914d\u3002</li> <li><code>xCoreID</code>\uff1a<code>0</code>\uff1a\u7ed1\u5b9a\u5230\u6838\u5fc30\uff08\u4e3b\u6838\u5fc3\uff09\u3002<code>1</code>\uff1a\u7ed1\u5b9a\u5230\u6838\u5fc31\u3002<code>tskNO_AFFINITY</code>\uff1a\u4e0d\u7ed1\u5b9a\u5230\u7279\u5b9a\u6838\u5fc3\uff0c\u5141\u8bb8FreeRTOS\u5728\u4efb\u4e00\u6838\u5fc3\u4e0a\u8c03\u5ea6\u4efb\u52a1\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li><code>pdPASS</code>\uff1a\u4efb\u52a1\u521b\u5efa\u6210\u529f\u3002</li> <li><code>pdFAIL</code>\uff1a\u4efb\u52a1\u521b\u5efa\u5931\u8d25\u3002</li> </ul> <p>\u793a\u4f8b</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// \u5b9a\u4e49\u4efb\u52a1\u6808\u548c\u4efb\u52a1\u63a7\u5236\u5757\u7684\u9759\u6001\u5185\u5b58\nstatic StackType_t myTaskStack[2048];      // \u4efb\u52a1\u6808\u5927\u5c0f\u4e3a2048\u5b57\u8282\nstatic StaticTask_t myTaskBuffer;          // \u4efb\u52a1\u63a7\u5236\u5757\n\n// \u5b9a\u4e49\u4efb\u52a1\u51fd\u6570\nvoid myTask(void *pvParameters)\n{\n    while(1)\n    {\n        printf(\"Running myTask on Core 1\\n\");\n        vTaskDelay(pdMS_TO_TICKS(1000));  // \u5ef6\u65f61\u79d2\n    }\n}\n\nvoid app_main(void)\n{\n    // \u4f7f\u7528\u9759\u6001\u5185\u5b58\u521b\u5efa\u4efb\u52a1\u5e76\u5c06\u5176\u7ed1\u5b9a\u5230\u6838\u5fc30\n    xTaskCreateStaticPinnedToCore(\n        myTask,            // \u4efb\u52a1\u51fd\u6570\n        \"MyStaticTask\",    // \u4efb\u52a1\u540d\u79f0\n        2048,              // \u4efb\u52a1\u6808\u5927\u5c0f\n        NULL,              // \u4efb\u52a1\u53c2\u6570\n        5,                 // \u4efb\u52a1\u4f18\u5148\u7ea7\n        myTaskStack,       // \u9759\u6001\u6808\u5185\u5b58\n        &amp;myTaskBuffer,     // \u9759\u6001\u4efb\u52a1\u63a7\u5236\u5757\n        0                  // \u6838\u5fc3ID\uff080\u8868\u793a\u7ed1\u5b9a\u5230\u6838\u5fc30\uff09\n    );\n}\n</code></pre>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#_2","title":"\u5ef6\u65f6\u4e0e\u963b\u585e","text":""},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#vtaskdelay","title":"vTaskDelay","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>void vTaskDelay(const TickType_t xTicksToDelay);\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>vTaskDelay</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u5ef6\u65f6\u4efb\u52a1\u6267\u884c\u7684\u51fd\u6570\u3002\u5728\u4efb\u52a1\u4e2d\u8c03\u7528 <code>vTaskDelay</code> \u51fd\u6570\u540e\uff0c\u4efb\u52a1\u4f1a\u6682\u505c\u6267\u884c\u6307\u5b9a\u7684\u65f6\u95f4\uff0c\u7136\u540e\u518d\u7ee7\u7eed\u6267\u884c\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xTicksToDelay</code>\uff1a\u5ef6\u65f6\u7684\u65f6\u95f4\uff0c\u4ee5 FreeRTOS \u7684\u65f6\u949f\u8282\u62cd\uff08tick\uff09\u4e3a\u5355\u4f4d\u3002\u65f6\u949f\u8282\u62cd\u7684\u9891\u7387\u7531 <code>configTICK_RATE_HZ</code> \u5b8f\u5728 <code>FreeRTOSConfig.h</code> \u4e2d\u5b9a\u4e49\u3002</li> </ul> <p>\u793a\u4f8b</p> <pre><code>void myTask(void *pvParameters)\n{\n    while(1)\n    {\n        printf(\"Hello from myTask\\n\");\n        vTaskDelay(pdMS_TO_TICKS(1000));  // \u5ef6\u65f61\u79d2\n    }\n}\n</code></pre> <p>\u5c0f\u7ed3 <code>vTaskDelay</code></p> <ul> <li>\u529f\u80fd\uff1a<code>vTaskDelay</code> \u4f7f\u4efb\u52a1\u5ef6\u8fdf\u6307\u5b9a\u7684\u65f6\u95f4\uff0c\u4ece\u5f53\u524d\u65f6\u523b\u5f00\u59cb\u8ba1\u65f6\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u6b21\u8c03\u7528 <code>vTaskDelay</code> \u65f6\uff0c\u5ef6\u65f6\u7684\u8d77\u70b9\u90fd\u662f\u5f53\u524d\u65f6\u523b\u3002</li> <li>\u9002\u7528\u573a\u666f\uff1a\u9002\u5408\u4efb\u52a1\u9700\u8981\u6839\u636e\u4e0a\u4e00\u6b21\u7684\u8c03\u7528\u65f6\u95f4\uff08\u65e0\u8bba\u4f55\u65f6\u8c03\u7528\uff09\u6765\u5ef6\u8fdf\u56fa\u5b9a\u65f6\u95f4\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#vtaskdelayuntil","title":"vTaskDelayUntil","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>void vTaskDelayUntil(TickType_t *pxPreviousWakeTime, const TickType_t xTimeIncrement);\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>vTaskDelayUntil</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u5468\u671f\u6027\u4efb\u52a1\u6267\u884c\u7684\u51fd\u6570\u3002\u5728\u4efb\u52a1\u4e2d\u8c03\u7528 <code>vTaskDelayUntil</code> \u51fd\u6570\u540e\uff0c\u4efb\u52a1\u4f1a\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u5185\u5468\u671f\u6027\u6267\u884c\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>pxPreviousWakeTime</code>\uff1a\u6307\u5411\u4e0a\u4e00\u6b21\u5524\u9192\u65f6\u95f4\u7684\u6307\u9488\u3002\u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\uff0c\u5e94\u8be5\u4f20\u5165\u4e00\u4e2a\u6307\u5411 0 \u7684\u6307\u9488\u3002</li> <li><code>xTimeIncrement</code>\uff1a\u65f6\u95f4\u95f4\u9694\uff0c\u4ee5 FreeRTOS \u7684\u65f6\u949f\u8282\u62cd\uff08tick\uff09\u4e3a\u5355\u4f4d\u3002\u65f6\u949f\u8282\u62cd\u7684\u9891\u7387\u7531 <code>configTICK_RATE_HZ</code> \u5b8f\u5728 <code>FreeRTOSConfig.h</code> \u4e2d\u5b9a\u4e49\u3002</li> </ul> <p>\u793a\u4f8b</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"esp_log.h\"\n\nvoid taskA(void *param)\n{\n    TickType_t xLastWakeTime;\n    const TickType_t xFrequency = pdMS_TO_TICKS(500); // 500 ms\n    // Initialize last wakeup time\n    xLastWakeTime = xTaskGetTickCount();\n\n    while(1)\n    {\n        ESP_LOGI(\"main\",\"Hello world from CSW!\");\n\n        // Wait for next cycle\n        vTaskDelayUntil(&amp;xLastWakeTime, xFrequency);\n    }\n}\n\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    xTaskCreatePinnedToCore(taskA, \"helloworld\", 2048, NULL, 3, NULL, tskNO_AFFINITY);\n}\n</code></pre> <p>\u5c0f\u7ed3 <code>vTaskDelay</code></p> <ul> <li>\u529f\u80fd\uff1a<code>vTaskDelayUntil</code> \u4f7f\u7528\u4e00\u4e2a\u201c\u7edd\u5bf9\u65f6\u95f4\u201d\u6982\u5ff5\u8fdb\u884c\u5ef6\u65f6\uff0c\u5b83\u5141\u8bb8\u4efb\u52a1**\u7cbe\u786e\u63a7\u5236\u6267\u884c\u5468\u671f**\u3002\u5ef6\u65f6\u4ece\u4e00\u4e2a\u56fa\u5b9a\u7684\u57fa\u51c6\u70b9\u5f00\u59cb\u8ba1\u65f6\uff0c\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u4efb\u52a1\u6309\u56fa\u5b9a\u7684\u95f4\u9694\u65f6\u95f4\u6267\u884c\uff0c\u5373\u4f7f\u4efb\u52a1\u4e2d\u6709\u5176\u4ed6\u8ba1\u7b97\u5f00\u9500\u3002</li> <li>\u9002\u7528\u573a\u666f\uff1a\u9002\u5408\u5468\u671f\u6027\u4efb\u52a1\uff0c\u786e\u4fdd\u4efb\u52a1\u7cbe\u786e\u5730\u6bcf\u9694\u56fa\u5b9a\u5468\u671f\u6267\u884c\u4e00\u6b21\uff0c\u907f\u514d\u56e0\u5176\u4ed6\u4efb\u52a1\u6216\u4ee3\u7801\u9020\u6210\u7684\u5ef6\u65f6\u7d2f\u79ef\u3002</li> </ul> <p>Tip</p> <p>\u5728 FreeRTOS \u4e2d\uff0c\u65f6\u949f\u8282\u62cd\u7684\u9891\u7387\u7531 <code>configTICK_RATE_HZ</code> \u5b8f\u5b9a\u4e49\u3002\u4e14\u5ef6\u65f6\u51fd\u6570\u4e2d\u8f93\u5165\u65f6\u95f4\u5176\u5b9e\u662f\u7cfb\u7edf\u8282\u62cd\uff0c\u800c\u975e\u7269\u7406\u4e16\u754c\u65f6\u95f4\uff0c\u6240\u4ee5\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0cFreeRTOS \u63d0\u4f9b\u4e86 <code>pdMS_TO_TICKS</code> \u5b8f\u6765\u5c06\u6beb\u79d2\u8f6c\u6362\u4e3a\u8282\u62cd\u6570\u3002</p>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#_3","title":"\u4efb\u52a1\u95f4\u540c\u6b65","text":"<p>Note</p> <p>RTOS\u4e2d\u7684\u540c\u6b65\uff0c\u662f\u6307\u662f\u4e0d\u540c\u4efb\u52a1\u4e4b\u95f4\u6216\u8005\u4efb\u52a1\u4e0e\u5916\u90e8\u4e8b\u4ef6\u4e4b\u95f4\u7684\u534f\u540c\u5de5\u4f5c\u65b9\u5f0f\u786e\u4fdd\u591a\u4e2a\u5e76\u53d1\u6267\u884c\u7684\u4efb\u52a1\u6309\u7167\u9884\u671f\u7684\u987a\u5e8f\u6216\u65f6\u673a\u6267\u884c\u3002\"\u5b83\u6d89\u53ca\u5230\u7ebf\u7a0b\u6216\u4efb\u52a1\u95f4\u7684\u901a\u4fe1\u548c\u534f\u8c03\u673a\u5236\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u907f\u514d\u6570\u636e\u7ade\u4e89\u3001\u89e3\u51b3\u7ade\u6001\u6761\u4ef6\uff0c\u5e76\u786e\u4fdd\u7cfb\u7edf\u7684\u6b63\u786e\u884c\u4e3a\u3002</p> <p>Note</p> <p>\u4e92\u65a5\u662f\u6307\u67d0\u4e00\u8d44\u6e90\u540c\u65f6\u53ea\u5141\u8bb8\u4e00\u4e2a\u8bbf\u95ee\u8005\u5bf9\u5176\u8fdb\u884c\u8bbf\u95ee,\u5177\u6709\u552f\u4e00\u6027\u548c\u6392\u5b83\u6027\u3002</p> <p>Note</p> <p>\u961f\u5217\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u5728\u4efb\u52a1\u4e4b\u95f4\u4f20\u9012\u6570\u636e\u3002\u961f\u5217\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4efb\u52a1\u53ef\u4ee5\u5c06\u6570\u636e\u653e\u5165\u961f\u5217\uff0c\u4e5f\u53ef\u4ee5\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u6570\u636e\u3002</p>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#_4","title":"\u961f\u5217","text":""},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xqueuecreate","title":"xQueueCreate","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>QueueHandle_t xQueueCreate(const UBaseType_t uxQueueLength, // \u961f\u5217\u957f\u5ea6\n                           const UBaseType_t uxItemSize); // \u961f\u5217\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xQueueCreate</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u961f\u5217\u7684\u51fd\u6570\u3002\u961f\u5217\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u5728\u4efb\u52a1\u4e4b\u95f4\u4f20\u9012\u6570\u636e\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>uxQueueLength</code>\uff1a\u961f\u5217\u7684\u957f\u5ea6\uff0c\u5373\u961f\u5217\u4e2d\u53ef\u4ee5\u5b58\u653e\u7684\u5143\u7d20\u4e2a\u6570\u3002</li> <li><code>uxItemSize</code>\uff1a\u961f\u5217\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li>\u961f\u5217\u53e5\u67c4\uff1a\u961f\u5217\u521b\u5efa\u6210\u529f\u3002</li> <li><code>NULL</code>\uff1a\u961f\u5217\u521b\u5efa\u5931\u8d25\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xqueuesend","title":"xQueueSend","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>BaseType_t xQueueSend(QueueHandle_t xQueue, // \u961f\u5217\u53e5\u67c4\n                      const void *pvItemToQueue, // \u8981\u53d1\u9001\u5230\u961f\u5217\u7684\u6570\u636e\u6307\u9488\uff0c\u62f7\u8d1d\u5230\u961f\u5217\u4e2d\n                      TickType_t xTicksToWait); // \u7b49\u5f85\u65f6\u95f4\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xQueueSend</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u5411\u961f\u5217\u53d1\u9001\u6570\u636e\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xQueueSend</code> \u51fd\u6570\u540e\uff0c\u6570\u636e\u5c06\u88ab\u53d1\u9001\u5230\u961f\u5217\u4e2d\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xQueue</code>\uff1a\u961f\u5217\u53e5\u67c4\u3002</li> <li><code>pvItemToQueue</code>\uff1a\u8981\u53d1\u9001\u5230\u961f\u5217\u7684\u6570\u636e\u6307\u9488\u3002</li> <li><code>xTicksToWait</code>\uff1a\u7b49\u5f85\u65f6\u95f4\uff0c\u5373\u5728\u961f\u5217\u6ee1\u65f6\u7b49\u5f85\u7684\u65f6\u95f4\u3002\u5982\u679c\u961f\u5217\u5df2\u6ee1\uff0c\u4efb\u52a1\u5c06\u5728\u7b49\u5f85\u65f6\u95f4\u5185\u7b49\u5f85\u961f\u5217\u6709\u7a7a\u95f4\u53ef\u7528\u3002\u5982\u679c\u7b49\u5f85\u65f6\u95f4\u4e3a 0\uff0c\u5219\u4efb\u52a1\u5c06\u7acb\u5373\u8fd4\u56de\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xqueuesendtoback","title":"xQueueSendToBack","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>BaseType_t xQueueSendToBack(QueueHandle_t xQueue, // \u961f\u5217\u53e5\u67c4\n                            const void *pvItemToQueue, // \u8981\u53d1\u9001\u5230\u961f\u5217\u7684\u6570\u636e\u6307\u9488\uff0c\u62f7\u8d1d\u5230\u961f\u5217\u4e2d\n                            TickType_t xTicksToWait); // \u7b49\u5f85\u65f6\u95f4\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xQueueSendToBack</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u5411\u961f\u5217\u53d1\u9001\u6570\u636e\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xQueueSendToBack</code> \u51fd\u6570\u540e\uff0c\u6570\u636e\u5c06\u88ab\u53d1\u9001\u5230\u961f\u5217\u4e2d, \u4f4d\u7f6e\u4e3a\u961f\u5217\u7684\u5c3e\u90e8\u3002 \u9002\u5408\u660e\u786e\u9700\u8981\u53d1\u9001\u5230\u961f\u5217\u5c3e\u90e8\u7684\u60c5\u51b5\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xQueue</code>\uff1a\u961f\u5217\u53e5\u67c4\u3002</li> <li><code>pvItemToQueue</code>\uff1a\u8981\u53d1\u9001\u5230\u961f\u5217\u7684\u6570\u636e\u6307\u9488\u3002</li> <li><code>xTicksToWait</code>\uff1a\u7b49\u5f85\u65f6\u95f4\uff0c\u5373\u5728\u961f\u5217\u6ee1\u65f6\u7b49\u5f85\u7684\u65f6\u95f4\u3002\u5982\u679c\u961f\u5217\u5df2\u6ee1\uff0c\u4efb\u52a1\u5c06\u5728\u7b49\u5f85\u65f6\u95f4\u5185\u7b49\u5f85\u961f\u5217\u6709\u7a7a\u95f4\u53ef\u7528\u3002\u5982\u679c\u7b49\u5f85\u65f6\u95f4\u4e3a 0\uff0c\u5219\u4efb\u52a1\u5c06\u7acb\u5373\u8fd4\u56de\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xqueuereceive","title":"xQueueReceive","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>BaseType_t xQueueReceive(QueueHandle_t xQueue, // \u961f\u5217\u53e5\u67c4\n                         void *pvBuffer, // \u63a5\u6536\u6570\u636e\u7684\u7f13\u51b2\u533a\u6307\u9488\n                         TickType_t xTicksToWait); // \u7b49\u5f85\u65f6\u95f4\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xQueueReceive</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u4ece\u961f\u5217\u63a5\u6536\u6570\u636e\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xQueueReceive</code> \u51fd\u6570\u540e\uff0c\u6570\u636e\u5c06\u4ece\u961f\u5217\u4e2d\u63a5\u6536\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xQueue</code>\uff1a\u961f\u5217\u53e5\u67c4\u3002</li> <li><code>pvBuffer</code>\uff1a\u63a5\u6536\u6570\u636e\u7684\u7f13\u51b2\u533a\u6307\u9488\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xqueuesendfromisr","title":"xQueueSendFromISR","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>BaseType_t xQueueSendFromISR(QueueHandle_t xQueue, // \u961f\u5217\u53e5\u67c4\n                             const void *pvItemToQueue, // \u8981\u53d1\u9001\u5230\u961f\u5217\u7684\u6570\u636e\u6307\u9488\n                             BaseType_t *pxHigherPriorityTaskWoken); // \u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u5524\u9192\u6807\u5fd7\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xQueueSendFromISR</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u4ece\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\uff08ISR\uff09\u4e2d\u5411\u961f\u5217\u53d1\u9001\u6570\u636e\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xQueueSendFromISR</code> \u51fd\u6570\u540e\uff0c\u6570\u636e\u5c06\u88ab\u53d1\u9001\u5230\u961f\u5217\u4e2d\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xQueue</code>\uff1a\u961f\u5217\u53e5\u67c4\u3002</li> <li><code>pvItemToQueue</code>\uff1a\u8981\u53d1\u9001\u5230\u961f\u5217\u7684\u6570\u636e\u6307\u9488\u3002</li> <li><code>pxHigherPriorityTaskWoken</code>\uff1a\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u5524\u9192\u6807\u5fd7\u3002\u5982\u679c\u5728\u53d1\u9001\u6570\u636e\u65f6\u5524\u9192\u4e86\u4e00\u4e2a\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\uff0c\u5219\u5c06\u6b64\u53c2\u6570\u8bbe\u7f6e\u4e3a <code>pdTRUE</code>\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#_5","title":"\u4fe1\u53f7\u91cf","text":""},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xsemaphorecreatebinary","title":"xSemaphoreCreateBinary","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>SemaphoreHandle_t xSemaphoreCreateBinary(void);\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xSemaphoreCreateBinary</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u4e8c\u503c\u4fe1\u53f7\u91cf\u7684\u51fd\u6570\u3002\u4e8c\u503c\u4fe1\u53f7\u91cf\u662f\u4e00\u79cd\u53ea\u6709\u4e24\u79cd\u72b6\u6001\u7684\u4fe1\u53f7\u91cf\uff0c\u5373\u53ef\u7528\u548c\u4e0d\u53ef\u7528\u3002</p> <p>\u8fd4\u56de\u503c</p> <ul> <li>\u4fe1\u53f7\u91cf\u53e5\u67c4\uff1a\u4fe1\u53f7\u91cf\u521b\u5efa\u6210\u529f\u3002</li> <li><code>NULL</code>\uff1a\u4fe1\u53f7\u91cf\u521b\u5efa\u5931\u8d25\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xsemaphorecreatecounting","title":"xSemaphoreCreateCounting","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>SemaphoreHandle_t xSemaphoreCreateCounting(const UBaseType_t uxMaxCount, // \u6700\u5927\u8ba1\u6570\u503c\n                                           const UBaseType_t uxInitialCount); // \u521d\u59cb\u8ba1\u6570\u503c\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xSemaphoreCreateCounting</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u8ba1\u6570\u4fe1\u53f7\u91cf\u7684\u51fd\u6570\u3002\u8ba1\u6570\u4fe1\u53f7\u91cf\u662f\u4e00\u79cd\u53ef\u4ee5\u5b58\u50a8\u591a\u4e2a\u8ba1\u6570\u503c\u7684\u4fe1\u53f7\u91cf\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>uxMaxCount</code>\uff1a\u6700\u5927\u8ba1\u6570\u503c\u3002</li> <li><code>uxInitialCount</code>\uff1a\u521d\u59cb\u8ba1\u6570\u503c\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li>\u4fe1\u53f7\u91cf\u53e5\u67c4\uff1a\u4fe1\u53f7\u91cf\u521b\u5efa\u6210\u529f\u3002</li> <li><code>NULL</code>\uff1a\u4fe1\u53f7\u91cf\u521b\u5efa\u5931\u8d25\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xsemaphorecreatemutex","title":"xSemaphoreCreateMutex","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>SemaphoreHandle_t xSemaphoreCreateMutex(void);\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xSemaphoreCreateMutex</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u4e92\u65a5\u4fe1\u53f7\u91cf\u7684\u51fd\u6570\u3002\u4e92\u65a5\u4fe1\u53f7\u91cf\u662f\u4e00\u79cd\u7528\u4e8e\u5b9e\u73b0\u4e92\u65a5\u8bbf\u95ee\u7684\u4fe1\u53f7\u91cf\uff0c\u7528\u4e8e\u4fdd\u62a4\u5171\u4eab\u8d44\u6e90\u3002</p> <p>\u8fd4\u56de\u503c</p> <ul> <li>\u4fe1\u53f7\u91cf\u53e5\u67c4\uff1a\u4fe1\u53f7\u91cf\u521b\u5efa\u6210\u529f\u3002</li> <li><code>NULL</code>\uff1a\u4fe1\u53f7\u91cf\u521b\u5efa\u5931\u8d25\u3002</li> </ul> <p>\u4e92\u65a5\u9501</p> <p>\u4e92\u65a5\u9501\u662f\u4e00\u79cd\u7528\u4e8e\u5b9e\u73b0\u4e92\u65a5\u8bbf\u95ee\u7684\u540c\u6b65\u673a\u5236\u3002\u5728 FreeRTOS \u4e2d\uff0c\u4e92\u65a5\u9501\u662f\u901a\u8fc7\u4e92\u65a5\u4fe1\u53f7\u91cf\u5b9e\u73b0\u7684\u3002\u4e92\u65a5\u9501\u53ef\u4ee5\u786e\u4fdd\u5728\u4efb\u4f55\u65f6\u5019\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\u3002\u4e0e\u4e8c\u503c\u4fe1\u53f7\u91cf\u4e0d\u540c\uff0c\u4e92\u65a5\u9501\u5b9e\u73b0\u4e86\u4f18\u5148\u7ea7\u7ee7\u627f\u548c\u4f18\u5148\u7ea7\u53cd\u8f6c\u673a\u5236\uff0c\u4ee5\u786e\u4fdd\u4efb\u52a1\u80fd\u591f\u6309\u7167\u4f18\u5148\u7ea7\u987a\u5e8f\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\u3002</p> <p>\u4f18\u5148\u7ea7\u7ffb\u8f6c</p> <p>\u4f18\u5148\u7ea7\u7ffb\u8f6c\u662f\u6307\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u6682\u65f6\u5360\u7528\u8d44\u6e90\uff0c\u5bfc\u81f4\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u88ab\u963b\u585e\uff0c\u751a\u81f3\u88ab\u4e2d\u7b49\u4f18\u5148\u7ea7\u7684\u4efb\u52a1\u8fdb\u4e00\u6b65\u5ef6\u8fdf\u3002\u6700\u7ec8\uff0c\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u6267\u884c\u88ab\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u95f4\u63a5\u5730\u5ef6\u540e\u4e86\uff0c\u8fd9\u79cd\u73b0\u8c61\u88ab\u79f0\u4e3a\u4f18\u5148\u7ea7\u7ffb\u8f6c\u3002</p> <p>\u5178\u578b\u7684\u4f18\u5148\u7ea7\u7ffb\u8f6c\u573a\u666f\u5982\u4e0b\uff1a \u5047\u8bbe\u6709\u4e09\u4e2a\u4efb\u52a1\uff0c\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\u4f9d\u6b21\u662f \u4efb\u52a1A\u3001\u4efb\u52a1B \u548c \u4efb\u52a1C\uff0c\u4e14\u5b83\u4eec\u5171\u4eab\u4e00\u4e2a\u8d44\u6e90\uff08\u4f8b\u5982\u4e92\u65a5\u9501\uff09\u3002 \u6b65\u9aa4 1\uff1a\u4f4e\u4f18\u5148\u7ea7\u7684 \u4efb\u52a1C \u83b7\u5f97\u4e86\u8be5\u8d44\u6e90\uff08\u9501\uff09\u5e76\u6b63\u5728\u4f7f\u7528\u5b83\u3002 \u6b65\u9aa4 2\uff1a\u5728 \u4efb\u52a1C \u8fd8\u6ca1\u91ca\u653e\u8d44\u6e90\u65f6\uff0c\u9ad8\u4f18\u5148\u7ea7\u7684 \u4efb\u52a1A \u5f00\u59cb\u8fd0\u884c\uff0c\u5e76\u5c1d\u8bd5\u8bbf\u95ee\u76f8\u540c\u7684\u8d44\u6e90\u3002\u4f46\u662f\u56e0\u4e3a\u8d44\u6e90\u5df2\u7ecf\u88ab \u4efb\u52a1C \u5360\u7528\uff0c\u6240\u4ee5 \u4efb\u52a1A \u88ab\u963b\u585e\uff0c\u7b49\u5f85 \u4efb\u52a1C \u91ca\u653e\u8d44\u6e90\u3002 \u6b65\u9aa4 3\uff1a\u8fd9\u65f6\uff0c\u4f18\u5148\u7ea7\u4ecb\u4e8e\u4e24\u8005\u4e4b\u95f4\u7684 \u4efb\u52a1B \u5f00\u59cb\u8fd0\u884c\uff0c\u5e76\u4e14\u7531\u4e8e\u5b83\u7684\u4f18\u5148\u7ea7\u6bd4 \u4efb\u52a1C \u9ad8\uff0c\u56e0\u6b64 \u4efb\u52a1B \u4f1a\u62a2\u5360 \u4efb\u52a1C \u7684\u6267\u884c\u3002 \u7ed3\u679c\uff1a\u7531\u4e8e \u4efb\u52a1B \u7684\u6267\u884c\uff0c\u4efb\u52a1C \u7684\u8fdb\u7a0b\u88ab\u63a8\u8fdf\uff0c\u4ece\u800c\u5bfc\u81f4 \u4efb\u52a1A \u4e5f\u88ab\u5ef6\u8fdf\u3002\u5373\u4f7f \u4efb\u52a1A \u7684\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u5b83\u4e5f\u65e0\u6cd5\u7acb\u5373\u6267\u884c\uff0c\u56e0\u4e3a\u4e2d\u4f18\u5148\u7ea7\u7684 \u4efb\u52a1B \u95f4\u63a5\u963b\u788d\u4e86\u5b83\u7684\u6267\u884c\u3002 \u8fd9\u79cd\u60c5\u51b5\u79f0\u4e3a\u4f18\u5148\u7ea7\u7ffb\u8f6c\uff0c\u56e0\u4e3a\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1 \u4efb\u52a1C \u7684\u6267\u884c\u963b\u788d\u4e86\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1 \u4efb\u52a1A \u7684\u6267\u884c\uff0c\u800c \u4efb\u52a1B \u7684\u4ecb\u5165\u4f7f\u5f97\u7ffb\u8f6c\u6548\u679c\u66f4\u4e3a\u4e25\u91cd\u3002</p> <p>\u4f18\u5148\u7ea7\u7ffb\u8f6c\u4f1a\u9020\u6210\u5b9e\u65f6\u7cfb\u7edf\u7684\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u65e0\u6cd5\u6309\u65f6\u5b8c\u6210\uff0c\u5bfc\u81f4\u7cfb\u7edf\u6027\u80fd\u4e0b\u964d\u6216\u4e0d\u7a33\u5b9a\u3002\u5728\u5b9e\u65f6\u5e94\u7528\u4e2d\uff08\u5982\u63a7\u5236\u7cfb\u7edf\u6216\u901a\u4fe1\u7cfb\u7edf\uff09\uff0c\u4f18\u5148\u7ea7\u7ffb\u8f6c\u53ef\u80fd\u4f1a\u5e26\u6765\u4e25\u91cd\u7684\u540e\u679c\u3002</p> <p>FreeRTOS \u548c\u8bb8\u591a\u5176\u4ed6 RTOS \u4f7f\u7528\u4f18\u5148\u7ea7\u7ee7\u627f\uff08Priority Inheritance\uff09\u6765\u89e3\u51b3\u4f18\u5148\u7ea7\u7ffb\u8f6c\u95ee\u9898\u3002\u4f18\u5148\u7ea7\u7ee7\u627f\u673a\u5236\u7684\u539f\u7406\u5982\u4e0b\uff1a \u5f53\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u6301\u6709\u67d0\u4e2a\u8d44\u6e90\u5e76\u963b\u585e\u4e86\u4e00\u4e2a\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u65f6\uff0c\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u4f1a\u7ee7\u627f\u8be5\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\uff0c\u76f4\u5230\u8d44\u6e90\u88ab\u91ca\u653e\u3002 \u5728\u4e0a\u8ff0\u793a\u4f8b\u4e2d\uff0c\u4efb\u52a1C \u5728\u963b\u585e\u4e86\u9ad8\u4f18\u5148\u7ea7\u7684 \u4efb\u52a1A \u540e\uff0c\u4f1a\u4e34\u65f6\u63d0\u5347\u4e3a \u4efb\u52a1A \u7684\u4f18\u5148\u7ea7\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u4efb\u52a1C \u80fd\u591f\u4f18\u5148\u4e8e \u4efb\u52a1B \u7ee7\u7eed\u8fd0\u884c\u5e76\u5c3d\u5feb\u91ca\u653e\u8d44\u6e90\uff0c\u4ece\u800c\u8ba9 \u4efb\u52a1A \u80fd\u591f\u53ca\u65f6\u83b7\u53d6\u8d44\u6e90\u5e76\u6267\u884c\u3002 \u4e00\u65e6 \u4efb\u52a1C \u91ca\u653e\u8d44\u6e90\uff0c\u5b83\u7684\u4f18\u5148\u7ea7\u4f1a\u6062\u590d\u5230\u539f\u59cb\u6c34\u5e73\u3002</p>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xsemaphoretake","title":"xSemaphoreTake","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>BaseType_t xSemaphoreTake(SemaphoreHandle_t xSemaphore, // \u4fe1\u53f7\u91cf\u53e5\u67c4\n                          TickType_t xTicksToWait); // \u7b49\u5f85\u65f6\u95f4\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xSemaphoreTake</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u83b7\u53d6\u4fe1\u53f7\u91cf\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xSemaphoreTake</code> \u51fd\u6570\u540e\uff0c\u4efb\u52a1\u5c06\u5c1d\u8bd5\u83b7\u53d6\u4fe1\u53f7\u91cf\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xSemaphore</code>\uff1a\u4fe1\u53f7\u91cf\u53e5\u67c4\u3002</li> <li><code>xTicksToWait</code>\uff1a\u7b49\u5f85\u65f6\u95f4\uff0c\u5373\u5728\u4fe1\u53f7\u91cf\u4e0d\u53ef\u7528\u65f6\u7b49\u5f85\u7684\u65f6\u95f4\u3002\u5982\u679c\u4fe1\u53f7\u91cf\u4e0d\u53ef\u7528\uff0c\u4efb\u52a1\u5c06\u5728\u7b49\u5f85\u65f6\u95f4\u5185\u7b49\u5f85\u4fe1\u53f7\u91cf\u53ef\u7528\u3002\u5982\u679c\u7b49\u5f85\u65f6\u95f4\u4e3a 0\uff0c\u5219\u4efb\u52a1\u5c06\u7acb\u5373\u8fd4\u56de\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li><code>pdPASS</code>\uff1a\u83b7\u53d6\u4fe1\u53f7\u91cf\u6210\u529f\u3002</li> <li><code>pdFAIL</code>\uff1a\u83b7\u53d6\u4fe1\u53f7\u91cf\u5931\u8d25\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xsemaphoregive","title":"xSemaphoreGive","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>BaseType_t xSemaphoreGive(SemaphoreHandle_t xSemaphore); // \u4fe1\u53f7\u91cf\u53e5\u67c4\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xSemaphoreGive</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u91ca\u653e\u4fe1\u53f7\u91cf\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xSemaphoreGive</code> \u51fd\u6570\u540e\uff0c\u4fe1\u53f7\u91cf\u5c06\u88ab\u91ca\u653e\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xSemaphore</code>\uff1a\u4fe1\u53f7\u91cf\u53e5\u67c4\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li><code>pdPASS</code>\uff1a\u91ca\u653e\u4fe1\u53f7\u91cf\u6210\u529f\u3002</li> <li><code>pdFAIL</code>\uff1a\u91ca\u653e\u4fe1\u53f7\u91cf\u5931\u8d25\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xsemaphoredelete","title":"xSemaphoreDelete","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>void vSemaphoreDelete(SemaphoreHandle_t xSemaphore); // \u4fe1\u53f7\u91cf\u53e5\u67c4\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>vSemaphoreDelete</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u5220\u9664\u4fe1\u53f7\u91cf\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>vSemaphoreDelete</code> \u51fd\u6570\u540e\uff0c\u4fe1\u53f7\u91cf\u5c06\u88ab\u5220\u9664\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xSemaphore</code>\uff1a\u4fe1\u53f7\u91cf\u53e5\u67c4\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#_6","title":"\u4e8b\u4ef6\u7ec4\u548c\u76f4\u8fbe\u4efb\u52a1\u901a\u77e5","text":"<p>\u4e8b\u4ef6\u7ec4</p> <p>\u4e8b\u4ef6\u7ec4\u662f\u4e00\u79cd\u7528\u4e8e\u7ba1\u7406\u4efb\u52a1\u95f4\u4e8b\u4ef6\u901a\u77e5\u7684\u673a\u5236\u3002\u4e8b\u4ef6\u7ec4\u5141\u8bb8\u4efb\u52a1\u7b49\u5f85\u591a\u4e2a\u4e8b\u4ef6\u7684\u7ec4\u5408\uff0c\u4ee5\u4fbf\u5728\u4efb\u4f55\u4e8b\u4ef6\u53d1\u751f\u65f6\u5524\u9192\u4efb\u52a1\u3002\u4e8b\u4ef6\u7ec4\u901a\u5e38\u7528\u4e8e\u4efb\u52a1\u95f4\u7684\u540c\u6b65\u548c\u901a\u4fe1\uff0c\u4ee5\u4fbf\u4efb\u52a1\u80fd\u591f\u6839\u636e\u4e8b\u4ef6\u7684\u72b6\u6001\u6765\u51b3\u5b9a\u4e0b\u4e00\u6b65\u7684\u64cd\u4f5c\u3002</p> <p>Tip</p> <p>\u4e8b\u4ef6\u7ec4\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u90fd\u53ef\u4ee5\u66ff\u4ee3\u4fe1\u53f7\u91cf\u3002</p> <p>\u4e8b\u4ef6\u4f4d</p> <p>\u4e8b\u4ef6\u7ec4\u4e2d\u7684\u4e8b\u4ef6\u662f\u4ee5\u4f4d\u7684\u5f62\u5f0f\u8868\u793a\u7684\uff0c\u6bcf\u4e2a\u4e8b\u4ef6\u4f4d\u5bf9\u5e94\u4e00\u4e2a\u4e8b\u4ef6\u3002\u4e8b\u4ef6\u4f4d\u7684\u503c\u53ef\u4ee5\u662f 0 \u6216 1\uff0c\u8868\u793a\u4e8b\u4ef6\u672a\u53d1\u751f\u6216\u5df2\u53d1\u751f\u3002\u4e8b\u4ef6\u7ec4\u7684\u5927\u5c0f\u53d6\u51b3\u4e8e\u4e8b\u4ef6\u4f4d\u7684\u6570\u91cf\uff0c\u901a\u5e38\u662f 8\u300116 \u6216 32 \u4f4d\u3002</p> <p>\u76f4\u8fbe\u4efb\u52a1\u901a\u77e5</p> <p>\u76f4\u8fbe\u4efb\u52a1\u901a\u77e5\u662f\u4e00\u79cd\u7528\u4e8e\u5411\u4efb\u52a1\u53d1\u9001\u901a\u77e5\u7684\u673a\u5236\u3002\u4e0e\u4e8b\u4ef6\u7ec4\u4e0d\u540c\uff0c\u76f4\u8fbe\u4efb\u52a1\u901a\u77e5\u662f\u4e00\u5bf9\u4e00\u7684\u901a\u77e5\u673a\u5236\uff0c\u5373\u4e00\u4e2a\u901a\u77e5\u53ea\u80fd\u5524\u9192\u4e00\u4e2a\u4efb\u52a1\u3002\u76f4\u8fbe\u4efb\u52a1\u901a\u77e5\u901a\u5e38\u7528\u4e8e\u4efb\u52a1\u95f4\u7684\u540c\u6b65\u548c\u901a\u4fe1\uff0c\u4ee5\u4fbf\u4efb\u52a1\u80fd\u591f\u6839\u636e\u901a\u77e5\u7684\u72b6\u6001\u6765\u51b3\u5b9a\u4e0b\u4e00\u6b65\u7684\u64cd\u4f5c\u3002</p>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xeventgroupcreate","title":"xEventGroupCreate","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>EventGroupHandle_t xEventGroupCreate(void);\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xEventGroupCreate</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u4e8b\u4ef6\u7ec4\u7684\u51fd\u6570\u3002\u4e8b\u4ef6\u7ec4\u662f\u4e00\u79cd\u7528\u4e8e\u7ba1\u7406\u4efb\u52a1\u95f4\u4e8b\u4ef6\u901a\u77e5\u7684\u673a\u5236\u3002</p> <p>\u8fd4\u56de\u503c</p> <ul> <li>\u4e8b\u4ef6\u7ec4\u53e5\u67c4\uff1a\u4e8b\u4ef6\u7ec4\u521b\u5efa\u6210\u529f\u3002</li> <li><code>NULL</code>\uff1a\u4e8b\u4ef6\u7ec4\u521b\u5efa\u5931\u8d25\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xeventgroupwaitbits","title":"xEventGroupWaitBits","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>EventBits_t xEventGroupWaitBits(EventGroupHandle_t xEventGroup, // \u4e8b\u4ef6\u7ec4\u53e5\u67c4\n                                const EventBits_t uxBitsToWaitFor, // \u8981\u7b49\u5f85\u7684\u4e8b\u4ef6\u4f4d\n                                const BaseType_t xClearOnExit, // \u9000\u51fa\u65f6\u662f\u5426\u6e05\u9664\u4e8b\u4ef6\u4f4d\n                                const BaseType_t xWaitForAllBits, // \u662f\u5426\u7b49\u5f85\u6240\u6709\u4e8b\u4ef6\u4f4d\n                                TickType_t xTicksToWait); // \u7b49\u5f85\u65f6\u95f4\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xEventGroupWaitBits</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u7b49\u5f85\u4e8b\u4ef6\u7ec4\u4e2d\u4e8b\u4ef6\u4f4d\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xEventGroupWaitBits</code> \u51fd\u6570\u540e\uff0c\u4efb\u52a1\u5c06\u7b49\u5f85\u4e8b\u4ef6\u7ec4\u4e2d\u7684\u4e8b\u4ef6\u4f4d\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xEventGroup</code>\uff1a\u4e8b\u4ef6\u7ec4\u53e5\u67c4\u3002</li> <li><code>uxBitsToWaitFor</code>\uff1a\u8981\u7b49\u5f85\u7684\u4e8b\u4ef6\u4f4d\u3002</li> <li><code>xClearOnExit</code>\uff1a\u9000\u51fa\u65f6\u662f\u5426\u6e05\u9664\u4e8b\u4ef6\u4f4d\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a <code>pdTRUE</code>\uff0c\u5219\u5728\u9000\u51fa\u65f6\u6e05\u9664\u4e8b\u4ef6\u4f4d\uff1b\u5982\u679c\u8bbe\u7f6e\u4e3a <code>pdFALSE</code>\uff0c\u5219\u4e0d\u6e05\u9664\u4e8b\u4ef6\u4f4d\u3002</li> <li><code>xWaitForAllBits</code>\uff1a\u662f\u5426\u7b49\u5f85\u6240\u6709\u4e8b\u4ef6\u4f4d\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a <code>pdTRUE</code>\uff0c\u5219\u7b49\u5f85\u6240\u6709\u4e8b\u4ef6\u4f4d\uff1b\u5982\u679c\u8bbe\u7f6e\u4e3a <code>pdFALSE</code>\uff0c\u5219\u53ea\u7b49\u5f85\u4efb\u4e00\u4e8b\u4ef6\u4f4d\u3002</li> <li><code>xTicksToWait</code>\uff1a\u7b49\u5f85\u65f6\u95f4\uff0c\u5373\u5728\u4e8b\u4ef6\u4f4d\u672a\u53d1\u751f\u65f6\u7b49\u5f85\u7684\u65f6\u95f4\u3002\u5982\u679c\u4e8b\u4ef6\u4f4d\u672a\u53d1\u751f\uff0c\u4efb\u52a1\u5c06\u5728\u7b49\u5f85\u65f6\u95f4\u5185\u7b49\u5f85\u4e8b\u4ef6\u4f4d\u53d1\u751f\u3002\u5982\u679c\u7b49\u5f85\u65f6\u95f4\u4e3a 0\uff0c\u5219\u4efb\u52a1\u5c06\u7acb\u5373\u8fd4\u56de\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li>\u7b49\u5f85\u540e\u7684\u4e8b\u4ef6\u7ec4\u72b6\u6001\u3002</li> <li><code>NULL</code>\uff1a\u4e8b\u4ef6\u7ec4\u7b49\u5f85\u5931\u8d25\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xeventgroupsetbits","title":"xEventGroupSetBits","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>EventBits_t xEventGroupSetBits(EventGroupHandle_t xEventGroup, // \u4e8b\u4ef6\u7ec4\u53e5\u67c4\n                               const EventBits_t uxBitsToSet); // \u8981\u8bbe\u7f6e\u7684\u4e8b\u4ef6\u4f4d\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xEventGroupSetBits</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u8bbe\u7f6e\u4e8b\u4ef6\u7ec4\u4e2d\u4e8b\u4ef6\u4f4d\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xEventGroupSetBits</code> \u51fd\u6570\u540e\uff0c\u4e8b\u4ef6\u7ec4\u4e2d\u7684\u4e8b\u4ef6\u4f4d\u5c06\u88ab\u8bbe\u7f6e\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xEventGroup</code>\uff1a\u4e8b\u4ef6\u7ec4\u53e5\u67c4\u3002</li> <li><code>uxBitsToSet</code>\uff1a\u8981\u8bbe\u7f6e\u7684\u4e8b\u4ef6\u4f4d\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li>\u8bbe\u7f6e\u540e\u7684\u4e8b\u4ef6\u7ec4\u72b6\u6001\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xeventgroupclearbits","title":"xEventGroupClearBits","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>EventBits_t xEventGroupClearBits(EventGroupHandle_t xEventGroup, // \u4e8b\u4ef6\u7ec4\u53e5\u67c4\n                                 const EventBits_t uxBitsToClear); // \u8981\u6e05\u9664\u7684\u4e8b\u4ef6\u4f4d\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xEventGroupClearBits</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u6e05\u9664\u4e8b\u4ef6\u7ec4\u4e2d\u4e8b\u4ef6\u4f4d\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xEventGroupClearBits</code> \u51fd\u6570\u540e\uff0c\u4e8b\u4ef6\u7ec4\u4e2d\u7684\u4e8b\u4ef6\u4f4d\u5c06\u88ab\u6e05\u9664\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xEventGroup</code>\uff1a\u4e8b\u4ef6\u7ec4\u53e5\u67c4\u3002</li> <li><code>uxBitsToClear</code>\uff1a\u8981\u6e05\u9664\u7684\u4e8b\u4ef6\u4f4d\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li>\u6e05\u9664\u540e\u7684\u4e8b\u4ef6\u7ec4\u72b6\u6001\u3002</li> <li><code>NULL</code>\uff1a\u4e8b\u4ef6\u7ec4\u6e05\u9664\u5931\u8d25\u3002</li> </ul> <p>\u76f4\u8fbe\u4efb\u52a1\u901a\u77e5</p> <p>\u6bcf\u4e2aRTOS\u4efb\u52a1\u90fd\u6709\u4e00\u4e2a\u4efb\u52a1\u901a\u77e5\u6570\u7ec4\u3002\u6bcf\u6761\u4efb\u52a1\u901a\u77e5 \u90fd\u6709\u201c\u6302\u8d77\u201d\u6216\u201c\u975e\u6302\u8d77\u201d\u7684\u901a\u77e5\u72b6\u6001\uff0c \u4ee5\u53ca\u4e00\u4e2a 32 \u4f4d\u901a\u77e5\u503c\u3002\u76f4\u8fbe\u4efb\u52a1\u901a\u77e5\u662f\u76f4\u63a5\u53d1\u9001\u81f3\u4efb\u52a1\u7684\u4e8b\u4ef6\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u4e2d\u95f4\u5bf9\u8c61(\u5982\u961f\u5217\u3001\u4e8b\u4ef6\u7ec4\u6216\u4fe1\u53f7\u91cf)\u95f4\u63a5\u53d1\u9001\u81f3\u4efb\u52a1\u7684\u4e8b\u4ef6\u3002\u5411\u4efb\u52a1\u53d1\u9001\u201c\u76f4\u8fbe\u4efb\u52a1\u901a\u77e5\u201d\u4f1a\u5c06\u76ee\u6807\u4efb\u52a1\u901a\u77e5\u8bbe\u4e3a\u201c\u6302\u8d77\u201d\u72b6\u6001(\u6b64\u6302\u8d77\u4e0d\u662f\u6302\u8d77\u4efb\u52a1)\u3002</p>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xtasknotify","title":"xTaskNotify","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>BaseType_t xTaskNotify(TaskHandle_t xTaskToNotify, // \u8981\u901a\u77e5\u7684\u4efb\u52a1\u53e5\u67c4\n                       const uint32_t ulValue, // \u901a\u77e5\u503c\n                       eNotifyAction eAction); // \u901a\u77e5\u52a8\u4f5c\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xTaskNotify</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u5411\u4efb\u52a1\u53d1\u9001\u901a\u77e5\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xTaskNotify</code> \u51fd\u6570\u540e\uff0c\u901a\u77e5\u5c06\u88ab\u53d1\u9001\u5230\u4efb\u52a1\u4e2d\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xTaskToNotify</code>\uff1a\u8981\u901a\u77e5\u7684\u4efb\u52a1\u53e5\u67c4\u3002</li> <li><code>ulValue</code>\uff1a\u901a\u77e5\u503c\u3002</li> <li><code>eAction</code>\uff1a\u901a\u77e5\u52a8\u4f5c\u3002\u901a\u77e5\u52a8\u4f5c\u53ef\u4ee5\u662f\u4ee5\u4e0b\u503c\u4e4b\u4e00\uff1a</li> <li><code>eNoAction</code>\uff1a\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002</li> <li><code>eSetBits</code>\uff1a\u8bbe\u7f6e\u4efb\u52a1\u901a\u77e5\u503c\u3002</li> <li><code>eIncrement</code>\uff1a\u9012\u589e\u4efb\u52a1\u901a\u77e5\u503c\u3002</li> <li><code>eSetValueWithOverwrite</code>\uff1a\u8bbe\u7f6e\u4efb\u52a1\u901a\u77e5\u503c\uff0c\u5982\u679c\u4efb\u52a1\u5df2\u6709\u901a\u77e5\u503c\uff0c\u5219\u8986\u76d6\u3002</li> <li><code>eSetValueWithoutOverwrite</code>\uff1a\u8bbe\u7f6e\u4efb\u52a1\u901a\u77e5\u503c\uff0c\u5982\u679c\u4efb\u52a1\u5df2\u6709\u901a\u77e5\u503c\uff0c\u5219\u4e0d\u8986\u76d6\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li><code>pdPASS</code>\uff1a\u901a\u77e5\u53d1\u9001\u6210\u529f\u3002</li> <li><code>pdFAIL</code>\uff1a\u901a\u77e5\u53d1\u9001\u5931\u8d25\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xtasknotifywait","title":"xTaskNotifyWait","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>BaseType_t xTaskNotifyWait(uint32_t ulBitsToClearOnEntry, // \u8fdb\u5165\u65f6\u8981\u6e05\u9664\u7684\u4f4d\n                           uint32_t ulBitsToClearOnExit, // \u9000\u51fa\u65f6\u8981\u6e05\u9664\u7684\u4f4d\n                           uint32_t *pulNotificationValue, // \u901a\u77e5\u503c\n                           TickType_t xTicksToWait); // \u7b49\u5f85\u65f6\u95f4\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xTaskNotifyWait</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u7b49\u5f85\u4efb\u52a1\u901a\u77e5\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xTaskNotifyWait</code> \u51fd\u6570\u540e\uff0c\u4efb\u52a1\u5c06\u7b49\u5f85\u901a\u77e5\u7684\u5230\u6765\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>ulBitsToClearOnEntry</code>\uff1a\u8fdb\u5165\u65f6\u8981\u6e05\u9664\u7684\u4f4d\u3002</li> <li><code>ulBitsToClearOnExit</code>\uff1a\u9000\u51fa\u65f6\u8981\u6e05\u9664\u7684\u4f4d\u3002</li> <li><code>pulNotificationValue</code>\uff1a\u901a\u77e5\u503c\u3002</li> <li><code>xTicksToWait</code>\uff1a\u7b49\u5f85\u65f6\u95f4\uff0c\u5373\u5728\u901a\u77e5\u672a\u5230\u6765\u65f6\u7b49\u5f85\u7684\u65f6\u95f4\u3002\u5982\u679c\u901a\u77e5\u672a\u5230\u6765\uff0c\u4efb\u52a1\u5c06\u5728\u7b49\u5f85\u65f6\u95f4\u5185\u7b49\u5f85\u901a\u77e5\u5230\u6765\u3002\u5982\u679c\u7b49\u5f85\u65f6\u95f4\u4e3a 0\uff0c\u5219\u4efb\u52a1\u5c06\u7acb\u5373\u8fd4\u56de\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li><code>pdPASS</code>\uff1a\u7b49\u5f85\u901a\u77e5\u6210\u529f\u3002</li> <li><code>pdFAIL</code>\uff1a\u7b49\u5f85\u901a\u77e5\u5931\u8d25\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/LOGS/logs/","title":"\u65e5\u5fd7","text":"<p>ESP_LOG()</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>static const char* TAG = \"main\"; // \u5b9a\u4e49\u4e00\u4e2a\u6807\u7b7e\nESP_LOGI(TAG,\"Hello world!\"); // \u6253\u5370\u4fe1\u606f\n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/","title":"\u5e38\u7528\u6a21\u5757","text":""},{"location":"zh/CHEATING_SHEET/MODULES/modules/#_2","title":"\u6807\u51c6\u5e93\u6a21\u5757","text":""},{"location":"zh/CHEATING_SHEET/MODULES/modules/#stdio","title":"stdio","text":"<p>\u7b80\u4ecb</p> <p>\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u5e93\u662fC\u8bed\u8a00\u7684\u6807\u51c6\u5e93\uff0c\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u8f93\u5165\u8f93\u51fa\u51fd\u6570\uff0c\u5982printf\u3001scanf\u7b49\u3002\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u5e93\u7684\u5934\u6587\u4ef6\u662fstdio.h\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u5e93\u7684\u51fd\u6570\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/#string","title":"string","text":"<p>\u7b80\u4ecb</p> <p>\u5b57\u7b26\u4e32\u5e93\u662fC\u8bed\u8a00\u7684\u6807\u51c6\u5e93\uff0c\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u5b57\u7b26\u4e32\u5904\u7406\u51fd\u6570\uff0c\u5982strcpy\u3001strcat\u7b49\u3002\u5b57\u7b26\u4e32\u5e93\u7684\u5934\u6587\u4ef6\u662fstring.h\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32\u5e93\u7684\u51fd\u6570\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include &lt;string.h&gt;\n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/#_3","title":"\u65e5\u5fd7\u6a21\u5757","text":""},{"location":"zh/CHEATING_SHEET/MODULES/modules/#esp_log","title":"esp_log","text":"<p>\u7b80\u4ecb</p> <p>ESP_LOG\u662fESP-IDF\u7684\u65e5\u5fd7\u6a21\u5757\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65e5\u5fd7\u8f93\u51fa\u51fd\u6570\uff0c\u5982ESP_LOGI\u3001ESP_LOGE\u7b49\u3002esp_log.h \u4ee3\u8868\u4e86\u65e5\u5fd7\u6a21\u5757\u7684\u5934\u6587\u4ef6\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u65e5\u5fd7\u6a21\u5757\u7684\u51fd\u6570\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include \"esp_log.h\"\n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/#_4","title":"\u5b9a\u65f6\u5668\u6a21\u5757","text":""},{"location":"zh/CHEATING_SHEET/MODULES/modules/#esp_timer","title":"esp_timer","text":"<p>\u7b80\u4ecb</p> <p>ESP_TIMER\u662fESP-IDF\u7684\u5b9a\u65f6\u5668\u6a21\u5757\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5b9a\u65f6\u5668\u51fd\u6570\uff0c\u5982esp_timer_create\u3001esp_timer_start_once\u7b49\u3002esp_timer.h \u4ee3\u8868\u4e86\u5b9a\u65f6\u5668\u6a21\u5757\u7684\u5934\u6587\u4ef6\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b9a\u65f6\u5668\u6a21\u5757\u7684\u51fd\u6570\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include \"esp_timer.h\"\n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/#_5","title":"\u968f\u673a\u6570\u6a21\u5757","text":""},{"location":"zh/CHEATING_SHEET/MODULES/modules/#esp_random","title":"esp_random","text":"<p>\u7b80\u4ecb</p> <p>ESP_RANDOM\u662fESP-IDF\u7684\u968f\u673a\u6570\u6a21\u5757\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u968f\u673a\u6570\u51fd\u6570\uff0c\u5982esp_random\u3001esp_random_uniform\u7b49\u3002esp_random.h \u4ee3\u8868\u4e86\u968f\u673a\u6570\u6a21\u5757\u7684\u5934\u6587\u4ef6\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u968f\u673a\u6570\u6a21\u5757\u7684\u51fd\u6570\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include \"esp_random.h\"\n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/#-freertos","title":"\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf-FREERTOS\u6a21\u5757","text":""},{"location":"zh/CHEATING_SHEET/MODULES/modules/#freertosfreertos","title":"freertos/FreeRTOS","text":"<p>\u7b80\u4ecb</p> <p>FreeRTOS\u662f\u4e00\u4e2a\u5c0f\u578b\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\uff0c\u7528\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3002FreeRTOS\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u529f\u80fd\uff0c\u5982\u4efb\u52a1\u7ba1\u7406\u3001\u65f6\u95f4\u7ba1\u7406\u3001\u5185\u5b58\u7ba1\u7406\u7b49\u3002FreeRTOS.h \u4ee3\u8868\u4e86\u5176\u6838\u5fc3\u5e93\u7684\u5934\u6587\u4ef6\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528FreeRTOS\u7684\u529f\u80fd\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include \"freertos/FreeRTOS.h\"  \n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/#freertostask","title":"freertos/task","text":"<p>\u7b80\u4ecb</p> <p>FreeRTOS\u4efb\u52a1\u7ba1\u7406\u5e93\u662fFreeRTOS\u7684\u4e00\u4e2a\u6a21\u5757\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u4efb\u52a1\u7ba1\u7406\u51fd\u6570\uff0c\u5982\u4efb\u52a1\u521b\u5efa\u3001\u4efb\u52a1\u5220\u9664\u3001\u4efb\u52a1\u6302\u8d77\u3001\u4efb\u52a1\u6062\u590d\u7b49\u3002task.h \u4ee3\u8868\u4e86\u4efb\u52a1\u7ba1\u7406\u5e93\u7684\u5934\u6587\u4ef6\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4efb\u52a1\u7ba1\u7406\u5e93\u7684\u51fd\u6570\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include \"freertos/task.h\"   \n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/#freertosqueue","title":"freertos/queue","text":"<p>\u7b80\u4ecb</p> <p>FreeRTOS\u961f\u5217\u7ba1\u7406\u5e93\u662fFreeRTOS\u7684\u4e00\u4e2a\u6a21\u5757\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u961f\u5217\u7ba1\u7406\u51fd\u6570\uff0c\u5982\u961f\u5217\u521b\u5efa\u3001\u961f\u5217\u5220\u9664\u3001\u961f\u5217\u53d1\u9001\u3001\u961f\u5217\u63a5\u6536\u7b49\u3002queue.h \u4ee3\u8868\u4e86\u961f\u5217\u7ba1\u7406\u5e93\u7684\u5934\u6587\u4ef6\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u961f\u5217\u7ba1\u7406\u5e93\u7684\u51fd\u6570\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include \"freertos/queue.h\"   \n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/#freertosevent_groups","title":"freertos/event_groups","text":"<p>\u7b80\u4ecb</p> <p>FreeRTOS\u4e8b\u4ef6\u7ec4\u7ba1\u7406\u5e93\u662fFreeRTOS\u7684\u4e00\u4e2a\u6a21\u5757\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u4e8b\u4ef6\u7ec4\u7ba1\u7406\u51fd\u6570\uff0c\u5982\u4e8b\u4ef6\u7ec4\u521b\u5efa\u3001\u4e8b\u4ef6\u7ec4\u5220\u9664\u3001\u4e8b\u4ef6\u7ec4\u8bbe\u7f6e\u3001\u4e8b\u4ef6\u7ec4\u6e05\u9664\u7b49\u3002event_groups.h \u4ee3\u8868\u4e86\u4e8b\u4ef6\u7ec4\u7ba1\u7406\u5e93\u7684\u5934\u6587\u4ef6\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e8b\u4ef6\u7ec4\u7ba1\u7406\u5e93\u7684\u51fd\u6570\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include \"freertos/event_groups.h\"   \n</code></pre>"},{"location":"zh/COMMUNICATION/communication/","title":"\u901a\u8baf","text":""},{"location":"zh/COMMUNICATION/communication/#_2","title":"\u6982\u89c8","text":"\u8303\u56f4 \u7c7b\u578b \u63cf\u8ff0 \u72b6\u6001 \u5c40\u57df\u7f51 \u84dd\u7259 \u901a\u8fc7\u84dd\u7259\u8fdb\u884c\u901a\u8baf \ud83d\udcc6 \u4e92\u8054\u7f51 WIFI \u901a\u8fc7WIFI\u8fde\u63a5\u5230\u7f51\u7edc \ud83c\udfd7\ufe0f"},{"location":"zh/COMMUNICATION/MQTT/mqtt/","title":"MQTT \u534f\u8bae | \u8ba9\u7269\u8054\u7f51\u8bbe\u5907\u8f7b\u677e\u6c9f\u901a","text":""},{"location":"zh/COMMUNICATION/MQTT/mqtt/#_1","title":"\u4e00\u3001\u4ecb\u7ecd","text":"<p>MQTT \u4e0e HTTP \u4e00\u6837\uff0cMQTT \u8fd0\u884c\u5728\u4f20\u8f93\u63a7\u5236\u534f\u8bae/\u4e92\u8054\u7f51\u534f\u8bae (TCP/IP) \u5806\u6808\u4e4b\u4e0a\u3002</p>"},{"location":"zh/COMMUNICATION/MQTT/mqtt/#11-mqtt","title":"1.1 MQTT\u4ecb\u7ecd","text":"<p>MQTT\u5b98\u7f51 MQTT \u534f\u8bae\u5165\u95e8</p> <p>MQTT\uff08Message Queuing Telemetry Transport\uff09\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u3001\u57fa\u4e8e\u53d1\u5e03-\u8ba2\u9605\u6a21\u5f0f\u7684\u901a\u4fe1\u534f\u8bae\uff0c\u4e3b\u8981\u5e94\u7528\u4e8e\u7269\u8054\u7f51\uff08IoT\uff09\u9886\u57df\u4e2d\u8bbe\u5907\u95f4\u7684\u901a\u4fe1\u3002</p> <p></p> <p>MQTT \u534f\u8bae\u91c7\u7528\u4e86\u7b80\u5355\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\u683c\u5f0f\uff0c\u4f7f\u5f97\u5b83\u9002\u7528\u4e8e\u7f51\u7edc\u5e26\u5bbd\u8f83\u5c0f\u3001\u5ef6\u8fdf\u8f83\u9ad8\u3001\u7f51\u7edc\u4e0d\u7a33\u5b9a\u7684\u73af\u5883\u4e0b\u8fdb\u884c\u901a\u4fe1\u3002\u540c\u65f6\uff0cMQTT \u63d0\u4f9b\u4e86 QoS\uff08Quality of Service\uff09\u670d\u52a1\u8d28\u91cf\u4fdd\u8bc1\u673a\u5236\uff0c\u652f\u6301\u4e09\u79cd\u4e0d\u540c\u7684 QoS \u7b49\u7ea7\uff1a</p> <ul> <li>QoS 0\uff1a\u6700\u591a\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u4e0d\u63d0\u4f9b\u53ef\u9760\u6027\u4fdd\u8bc1\u3002</li> <li>QoS 1\uff1a\u81f3\u5c11\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u786e\u4fdd\u6d88\u606f\u80fd\u5230\u8fbe\u63a5\u6536\u65b9\uff0c\u4f46\u53ef\u80fd\u4f1a\u91cd\u590d\u3002</li> <li>QoS 2\uff1a\u6070\u597d\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u786e\u4fdd\u6d88\u606f\u80fd\u5230\u8fbe\u63a5\u6536\u65b9\u4e14\u53ea\u63a5\u6536\u4e00\u6b21\u3002</li> </ul> <p>MQTT \u534f\u8bae\u7684\u7279\u70b9\u5305\u62ec\uff1a\u53ef\u6269\u5c55\u6027\u597d\u3001\u5f00\u9500\u5c0f\u3001\u6613\u4e8e\u5b9e\u73b0\u3001\u5f00\u6e90\u3001\u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\u7b49\u3002 \u5728 MQTT \u534f\u8bae\u4e2d\uff0c\u5b58\u5728\u4e24\u4e2a\u4e3b\u8981\u7684\u53c2\u4e0e\u8005\uff1a\u53d1\u5e03\u8005**\u548c**\u8ba2\u9605\u8005\u3002\u53d1\u5e03\u8005\u5c06\u6d88\u606f\u53d1\u5e03\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u4e3b\u9898\uff08Topic\uff09\u4e2d\uff0c\u8ba2\u9605\u8005\u53ef\u4ee5\u8ba2\u9605\u611f\u5174\u8da3\u7684\u4e3b\u9898\uff0c\u4ece\u800c\u63a5\u6536\u5230\u53d1\u5e03\u8005\u53d1\u9001\u7684\u6d88\u606f\u3002**\u4e3b\u9898**\u53ef\u4ee5\u770b\u4f5c\u662f\u67d0\u4e00\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6d88\u606f\u7684\u5206\u7c7b\u6807\u51c6\u3002 MQTT \u534f\u8bae\u7684\u4f7f\u7528\u573a\u666f\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\u667a\u80fd\u5bb6\u5c45\u3001\u667a\u80fd\u706f\u5149\u3001\u667a\u80fd\u5b89\u9632\u3001\u519c\u4e1a\u7269\u8054\u7f51\u3001\u5de5\u4e1a\u7269\u8054\u7f51\u7b49\u3002</p>"},{"location":"zh/COMMUNICATION/MQTT/mqtt/#_2","title":"\u4f18\u70b9","text":"<ol> <li>\u8f7b\u5de7\u9ad8\u6548: MQTT \u5ba2\u6237\u7aef\u975e\u5e38\u5c0f\uff0c\u9700\u8981\u7684\u8d44\u6e90\u6700\u5c11\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u5c0f\u578b\u5fae\u63a7\u5236\u5668\u4e0a\u4f7f\u7528\u3002MQTT \u6d88\u606f\u5934\u5f88\u5c0f\uff0c\u53ef\u4ee5\u4f18\u5316\u7f51\u7edc\u5e26\u5bbd\u3002</li> <li>\u53cc\u5411\u901a\u4fe1:MQTT \u5141\u8bb8\u5728\u8bbe\u5907\u5230\u4e91\u548c\u4e91\u5230\u8bbe\u5907\u4e4b\u95f4\u8fdb\u884c\u6d88\u606f\u4f20\u9012\u3002\u8fd9\u4f7f\u5f97\u5411\u4e8b\u7269\u7ec4\u5e7f\u64ad\u6d88\u606f\u53d8\u5f97\u5bb9\u6613\u3002</li> <li>\u6269\u5c55\u5230\u6570\u767e\u4e07\u4e2a\u4e8b\u7269:MQTT \u53ef\u4ee5\u6269\u5c55\u4ee5\u8fde\u63a5\u6570\u767e\u4e07\u4e2a\u7269\u8054\u7f51\u8bbe\u5907\u3002</li> <li>\u53ef\u9760\u7684\u6d88\u606f\u4f20\u9012:\u6d88\u606f\u4f20\u9012\u7684\u53ef\u9760\u6027\u5bf9\u4e8e\u8bb8\u591a\u7269\u8054\u7f51\u7528\u4f8b\u90fd\u5f88\u91cd\u8981\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 MQTT \u6709 3 \u4e2a\u5b9a\u4e49\u7684\u670d\u52a1\u8d28\u91cf\u7ea7\u522b\uff1a0 - \u6700\u591a\u4e00\u6b21\uff0c1 - \u81f3\u5c11\u4e00\u6b21\uff0c2 - \u6070\u597d\u4e00\u6b21</li> <li>\u652f\u6301\u4e0d\u53ef\u9760\u7684\u7f51\u7edc:\u8bb8\u591a\u7269\u8054\u7f51\u8bbe\u5907\u901a\u8fc7\u4e0d\u53ef\u9760\u7684\u8702\u7a9d\u7f51\u7edc\u8fde\u63a5\u3002MQTT \u5bf9\u6301\u4e45\u4f1a\u8bdd\u7684\u652f\u6301\u51cf\u5c11\u4e86\u5c06\u5ba2\u6237\u7aef\u4e0e\u4ee3\u7406\u91cd\u65b0\u8fde\u63a5\u7684\u65f6\u95f4\u3002</li> <li>\u5df2\u542f\u7528\u5b89\u5168\u6027 :MQTT \u4f7f\u4f7f\u7528 TLS \u52a0\u5bc6\u6d88\u606f\u548c\u4f7f\u7528\u73b0\u4ee3\u8eab\u4efd\u9a8c\u8bc1\u534f\u8bae\uff08\u5982 OAuth\uff09\u5bf9\u5ba2\u6237\u7aef\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u53d8\u5f97\u5bb9\u6613\u3002</li> </ol>"},{"location":"zh/COMMUNICATION/MQTT/mqtt/#12-mqtt","title":"1.2 MQTT \u6570\u636e\u5305\u7ed3\u6784","text":"<ul> <li><code>\u56fa\u5b9a\u5934\uff08Fixed header\uff09</code>\uff0c\u5b58\u5728\u4e8e\u6240\u6709<code>MQTT</code>\u6570\u636e\u5305\u4e2d\uff0c\u8868\u793a\u6570\u636e\u5305\u7c7b\u578b\u53ca\u6570\u636e\u5305\u7684\u5206\u7ec4\u7c7b\u6807\u8bc6\uff1b</li> <li><code>\u53ef\u53d8\u5934\uff08Variable header\uff09</code>\uff0c\u5b58\u5728\u4e8e\u90e8\u5206<code>MQTT</code>\u6570\u636e\u5305\u4e2d\uff0c\u6570\u636e\u5305\u7c7b\u578b\u51b3\u5b9a\u4e86\u53ef\u53d8\u5934\u662f\u5426\u5b58\u5728\u53ca\u5176\u5177\u4f53\u5185\u5bb9\uff1b</li> <li><code>\u6d88\u606f\u4f53\uff08Payload\uff09</code>\uff0c\u5b58\u5728\u4e8e\u90e8\u5206<code>MQTT</code>\u6570\u636e\u5305\u4e2d\uff0c\u8868\u793a\u5ba2\u6237\u7aef\u6536\u5230\u7684\u5177\u4f53\u5185\u5bb9\uff1b</li> </ul>"},{"location":"zh/COMMUNICATION/MQTT/mqtt/#13-mqtt","title":"1.3 MQTT \u5176\u4ed6\u6982\u5ff5","text":"<p>\u4e00\u3001\u8ba2\u9605\uff08Subscription\uff09</p> <p>\u8ba2\u9605\u5305\u542b\u4e3b\u9898\u7b5b\u9009\u5668\uff08Topic Filter\uff09\u548c\u6700\u5927\u670d\u52a1\u8d28\u91cf\uff08QoS\uff09\u3002\u8ba2\u9605\u4f1a\u4e0e\u4e00\u4e2a\u4f1a\u8bdd\uff08Session\uff09\u5173\u8054\u3002\u4e00\u4e2a\u4f1a\u8bdd\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u8ba2\u9605\u3002\u6bcf\u4e00\u4e2a\u4f1a\u8bdd\u4e2d\u7684\u6bcf\u4e2a\u8ba2\u9605\u90fd\u6709\u4e00\u4e2a\u4e0d\u540c\u7684\u4e3b\u9898\u7b5b\u9009\u5668\u3002</p> <p>\u4e8c\u3001\u4f1a\u8bdd\uff08Session\uff09</p> <p>\u6bcf\u4e2a\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u540e\u5c31\u662f\u4e00\u4e2a\u4f1a\u8bdd\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u6709\u72b6\u6001\u4ea4\u4e92\u3002\u4f1a\u8bdd\u5b58\u5728\u4e8e\u4e00\u4e2a\u7f51\u7edc\u4e4b\u95f4\uff0c\u4e5f\u53ef\u80fd\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u8de8\u8d8a\u591a\u4e2a\u8fde\u7eed\u7684\u7f51\u7edc\u8fde\u63a5\u3002</p> <p>\u4e09\u3001\u4e3b\u9898\u540d\uff08Topic Name\uff09</p> <p>\u8fde\u63a5\u5230\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6d88\u606f\u7684\u6807\u7b7e\uff0c\u8be5\u6807\u7b7e\u4e0e\u670d\u52a1\u5668\u7684\u8ba2\u9605\u76f8\u5339\u914d\u3002\u670d\u52a1\u5668\u4f1a\u5c06\u6d88\u606f\u53d1\u9001\u7ed9\u8ba2\u9605\u6240\u5339\u914d\u6807\u7b7e\u7684\u6bcf\u4e2a\u5ba2\u6237\u7aef\u3002</p> <p>\u56db\u3001\u4e3b\u9898\u7b5b\u9009\u5668\uff08Topic Filter\uff09</p> <p>\u4e00\u4e2a\u5bf9\u4e3b\u9898\u540d\u901a\u914d\u7b26\u7b5b\u9009\u5668\uff0c\u5728\u8ba2\u9605\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\uff0c\u8868\u793a\u8ba2\u9605\u6240\u5339\u914d\u5230\u7684\u591a\u4e2a\u4e3b\u9898\u3002</p> <p>\u4e94\u3001\u8d1f\u8f7d\uff08Payload\uff09</p> <p>\u6d88\u606f\u8ba2\u9605\u8005\u6240\u5177\u4f53\u63a5\u6536\u7684\u5185\u5bb9\u3002</p> <p>\u8be6\u7ec6\u5185\u5bb9\u53ef\u4ee5\u67e5\u770bMQTT\u534f\u8bae\u6587\u6863\uff1aMQTT Version 5.0</p>"},{"location":"zh/COMMUNICATION/MQTT/mqtt/#14-esp32mqtt","title":"1.4 ESP32\u7684MQTT\u652f\u6301","text":"<p>https://docs.espressif.com/projects/esp-idf/zh_CN/v5.1.3/esp32/api-reference/protocols/mqtt.html</p> <ul> <li>\u652f\u6301\u57fa\u4e8e TCP \u7684 MQTT\u3001\u57fa\u4e8e Mbed TLS \u7684 SSL\u3001\u57fa\u4e8e WebSocket \u7684 MQTT \u4ee5\u53ca\u57fa\u4e8e WebSocket Secure \u7684 MQTT</li> <li>\u901a\u8fc7 URI \u7b80\u5316\u914d\u7f6e\u6d41\u7a0b</li> <li>\u591a\u4e2a\u5b9e\u4f8b\uff08\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6709\u591a\u4e2a\u5ba2\u6237\u7aef\uff09</li> <li>\u652f\u6301\u8ba2\u9605\u3001\u53d1\u5e03\u3001\u8ba4\u8bc1\u3001\u9057\u5631\u6d88\u606f\u3001\u4fdd\u6301\u8fde\u63a5\u5fc3\u8df3\u673a\u5236\u4ee5\u53ca 3 \u4e2a\u670d\u52a1\u8d28\u91cf (QoS) \u7ea7\u522b\uff08\u7ec4\u6210\u5168\u529f\u80fd\u5ba2\u6237\u7aef\uff09</li> </ul>"},{"location":"zh/COMMUNICATION/MQTT/mqtt/#_3","title":"\u4e8c\u3001\u4f7f\u7528","text":"<p>\u793a\u4f8b\u4ee3\u7801\u53c2\u8003:https://github.com/espressif/esp-idf/tree/master/examples/protocols/mqtt/tcp</p>"},{"location":"zh/COMMUNICATION/MQTT/mqtt/#21-mqtt","title":"2.1 \u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684MQTT\u670d\u52a1\u5668\uff1a","text":"<pre><code>// MQTT\u5ba2\u6237\u7aef\nstatic void mqtt_app_start(void)\n{\n    esp_mqtt_client_config_t mqtt_cfg = {\n            .broker.address.uri = CONFIG_BROKER_URL,\n    };\n\n    esp_mqtt_client_handle_t client = esp_mqtt_client_init(&amp;mqtt_cfg);\n    /* The last argument may be used to pass data to the event handler, in this example mqtt_event_handler */\n    // \u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\n    esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, mqtt_event_handler, NULL);\n    // \u542f\u52a8MQTT\u5ba2\u6237\u7aef\n    esp_mqtt_client_start(client);\n}\n</code></pre> <p>\u4ee3\u7801\u5f88\u7b80\u5355\u8fd9\u91cc\u5c31\u4e0d\u5c55\u5f00\u8bf4\u4e86\u3002</p>"},{"location":"zh/COMMUNICATION/MQTT/mqtt/#22","title":"2.2 \u4e8b\u4ef6\u5904\u7406","text":"<p>\u4e8b\u4ef6\u5904\u7406\u90e8\u5206\u662f\u91cd\u70b9\uff1a</p> <p>\u4ee3\u7801\uff1a <pre><code>// MQTT\u5ba2\u6237\u7aef\u4e8b\u4ef6\u5904\u7406\n/*\n * @brief Event handler registered to receive MQTT events\n *\n *  This function is called by the MQTT client event loop.\n *\n * @param handler_args user data registered to the event.\n * @param base Event base for the handler(always MQTT Base in this example).\n * @param event_id The id for the received event.\n * @param event_data The data for the event, esp_mqtt_event_handle_t.\n */\nstatic void mqtt_event_handler(void *handler_args, esp_event_base_t base, int32_t event_id, void *event_data)\n{\n    ESP_LOGD(TAG, \"Event dispatched from event loop base=%s, event_id=%\" PRIi32 \"\", base, event_id);\n    esp_mqtt_event_handle_t event = event_data;\n    esp_mqtt_client_handle_t client = event-&gt;client;\n    int msg_id;\n    switch ((esp_mqtt_event_id_t)event_id)\n    {\n    // MQTT\u8fde\u63a5\u6210\u529f\n    case MQTT_EVENT_CONNECTED:\n        ESP_LOGI(TAG, \"MQTT_EVENT_CONNECTED\");\n        // \u53d1\u5e03\u6d88\u606f\n        msg_id = esp_mqtt_client_publish(client, \"/topic/qos1\", \"data_3\", 0, 1, 0);\n        ESP_LOGI(TAG, \"sent publish successful, msg_id=%d\", msg_id);\n        // \u8ba2\u9605\u6d88\u606f\n        msg_id = esp_mqtt_client_subscribe(client, \"/topic/qos0\", 0);\n        ESP_LOGI(TAG, \"sent subscribe successful, msg_id=%d\", msg_id);\n        msg_id = esp_mqtt_client_subscribe(client, \"/topic/qos1\", 1);\n        ESP_LOGI(TAG, \"sent subscribe successful, msg_id=%d\", msg_id);\n        // \u53d6\u6d88\u8ba2\u9605\u6d88\u606f\n        msg_id = esp_mqtt_client_unsubscribe(client, \"/topic/qos1\");\n        ESP_LOGI(TAG, \"sent unsubscribe successful, msg_id=%d\", msg_id);\n        break;\n    // MQTT\u8fde\u63a5\u65ad\u5f00\n    case MQTT_EVENT_DISCONNECTED:\n        ESP_LOGI(TAG, \"MQTT_EVENT_DISCONNECTED\");\n        break;\n    // MQTT\u8ba2\u9605\u6210\u529f\n    case MQTT_EVENT_SUBSCRIBED:\n        ESP_LOGI(TAG, \"MQTT_EVENT_SUBSCRIBED, msg_id=%d\", event-&gt;msg_id);\n        // \u53d1\u5e03\u6d88\u606f\n        msg_id = esp_mqtt_client_publish(client, \"/topic/qos0\", \"data\", 0, 0, 0);\n        ESP_LOGI(TAG, \"sent publish successful, msg_id=%d\", msg_id);\n        break;\n    // MQTT\u53d6\u6d88\u8ba2\u9605\u6210\u529f\n    case MQTT_EVENT_UNSUBSCRIBED:\n        ESP_LOGI(TAG, \"MQTT_EVENT_UNSUBSCRIBED, msg_id=%d\", event-&gt;msg_id);\n        break;\n    // MQTT\u53d1\u5e03\u6210\u529f\n    case MQTT_EVENT_PUBLISHED:\n        ESP_LOGI(TAG, \"MQTT_EVENT_PUBLISHED, msg_id=%d\", event-&gt;msg_id);\n        break;\n    // MQTT\u6536\u5230\u6570\u636e\n    case MQTT_EVENT_DATA:\n        ESP_LOGI(TAG, \"MQTT_EVENT_DATA\");\n        printf(\"TOPIC=%.*s\\r\\n\", event-&gt;topic_len, event-&gt;topic);\n        printf(\"DATA=%.*s\\r\\n\", event-&gt;data_len, event-&gt;data);\n        break;\n    // MQTT\u9519\u8bef\n    case MQTT_EVENT_ERROR:\n        ESP_LOGI(TAG, \"MQTT_EVENT_ERROR\");\n        if (event-&gt;error_handle-&gt;error_type == MQTT_ERROR_TYPE_TCP_TRANSPORT)\n        {\n            log_error_if_nonzero(\"reported from esp-tls\", event-&gt;error_handle-&gt;esp_tls_last_esp_err);\n            log_error_if_nonzero(\"reported from tls stack\", event-&gt;error_handle-&gt;esp_tls_stack_err);\n            log_error_if_nonzero(\"captured as transport's socket errno\", event-&gt;error_handle-&gt;esp_transport_sock_errno);\n            ESP_LOGI(TAG, \"Last errno string (%s)\", strerror(event-&gt;error_handle-&gt;esp_transport_sock_errno));\n        }\n        break;\n    default:\n        ESP_LOGI(TAG, \"Other event id:%d\", event-&gt;event_id);\n        break;\n    }\n}\n</code></pre></p> <ul> <li><code>MQTT_EVENT_CONNECTED</code>: \u5904\u7406MQTT\u5ba2\u6237\u7aef\u6210\u529f\u8fde\u63a5\u5230\u4ee3\u7406\u65f6\u7684\u4e8b\u4ef6\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c55\u793a\u4e86\u5982\u4f55\u53d1\u5e03\u3001\u8ba2\u9605\u548c\u53d6\u6d88\u8ba2\u9605MQTT\u4e3b\u9898\u3002</li> <li><code>MQTT_EVENT_DISCONNECTED</code>: \u5904\u7406MQTT\u5ba2\u6237\u7aef\u4e0e\u4ee3\u7406\u65ad\u5f00\u8fde\u63a5\u65f6\u7684\u4e8b\u4ef6\u3002</li> <li><code>MQTT_EVENT_SUBSCRIBED</code>: \u5904\u7406MQTT\u5ba2\u6237\u7aef\u6210\u529f\u8ba2\u9605\u4e3b\u9898\u65f6\u7684\u4e8b\u4ef6\u3002</li> <li><code>MQTT_EVENT_UNSUBSCRIBED</code>: \u5904\u7406MQTT\u5ba2\u6237\u7aef\u6210\u529f\u53d6\u6d88\u8ba2\u9605\u4e3b\u9898\u65f6\u7684\u4e8b\u4ef6\u3002</li> <li><code>MQTT_EVENT_PUBLISHED</code>: \u5904\u7406MQTT\u5ba2\u6237\u7aef\u6210\u529f\u53d1\u5e03\u6d88\u606f\u65f6\u7684\u4e8b\u4ef6\u3002</li> <li><code>MQTT_EVENT_DATA</code>: \u5904\u7406\u6536\u5230\u6765\u81ea\u4ee3\u7406\u7684\u6570\u636e\u65f6\u7684\u4e8b\u4ef6\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u5b83\u6253\u5370\u4e86\u4e3b\u9898\u548c\u6570\u636e\u3002</li> <li><code>MQTT_EVENT_ERROR</code>: \u5904\u7406MQTT\u5ba2\u6237\u7aef\u53d1\u751f\u9519\u8bef\u65f6\u7684\u4e8b\u4ef6\u3002</li> </ul>"},{"location":"zh/COMMUNICATION/MQTT/mqtt/#_4","title":"\u4e09\u3001\u5b9e\u4f8b","text":"<p>\u8fd9\u91cc\u4f7f\u7528\u6211\u81ea\u5df1\u7684MQTT\u670d\u52a1\u5668\u6d4b\u8bd5\uff1a<code>mqtt://www.duruofu.com:1883</code></p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stddef.h&gt;\n#include &lt;string.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/event_groups.h\"\n#include \"esp_wifi.h\"\n#include \"esp_log.h\"\n#include \"esp_event.h\"\n#include \"nvs_flash.h\"\n#include \"esp_mac.h\"\n#include \"esp_netif.h\"\n#include &lt;sys/socket.h&gt;\n#include \"esp_eth.h\"\n#include \"lwip/sockets.h\"\n#include \"lwip/dns.h\"\n#include \"lwip/netdb.h\"\n#include \"mqtt_client.h\"\n\n\n// \u8981\u8fde\u63a5\u7684WIFI\n#define ESP_WIFI_STA_SSID \"duruofu_win10\"\n#define ESP_WIFI_STA_PASSWD \"1234567890\"\n\nstatic const char *TAG = \"main\";\n\n\n\nvoid WIFI_CallBack(void *event_handler_arg, esp_event_base_t event_base, int32_t event_id, void *event_data)\n{\n    static uint8_t connect_count = 0;\n    // WIFI \u542f\u52a8\u6210\u529f\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_START\");\n        ESP_ERROR_CHECK(esp_wifi_connect());\n    }\n    // WIFI \u8fde\u63a5\u5931\u8d25\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_DISCONNECTED\");\n        connect_count++;\n        if (connect_count &lt; 6)\n        {\n            vTaskDelay(1000 / portTICK_PERIOD_MS);\n            ESP_ERROR_CHECK(esp_wifi_connect());\n        }\n        else\n        {\n            ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_DISCONNECTED 10 times\");\n        }\n    }\n    // WIFI \u8fde\u63a5\u6210\u529f(\u83b7\u53d6\u5230\u4e86IP)\n    if (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_GOT_IP\");\n        ip_event_got_ip_t *info = (ip_event_got_ip_t *)event_data;\n        ESP_LOGI(\"WIFI_EVENT\", \"got ip:\" IPSTR \"\", IP2STR(&amp;info-&gt;ip_info.ip));\n    }\n}\n\n// wifi\u521d\u59cb\u5316\nstatic void wifi_sta_init(void)\n{\n    ESP_ERROR_CHECK(esp_netif_init());\n\n    // \u6ce8\u518c\u4e8b\u4ef6(wifi\u542f\u52a8\u6210\u529f)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, NULL, NULL));\n    // \u6ce8\u518c\u4e8b\u4ef6(wifi\u8fde\u63a5\u5931\u8d25)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, NULL, NULL));\n    // \u6ce8\u518c\u4e8b\u4ef6(wifi\u8fde\u63a5\u5931\u8d25)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, NULL, NULL));\n\n    // \u521d\u59cb\u5316STA\u8bbe\u5907\n    esp_netif_create_default_wifi_sta();\n\n    /*Initialize WiFi */\n    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n    // WIFI_INIT_CONFIG_DEFAULT \u662f\u4e00\u4e2a\u9ed8\u8ba4\u914d\u7f6e\u7684\u5b8f\n\n    ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));\n\n    //----------------\u914d\u7f6e\u9636\u6bb5-------------------\n    // \u521d\u59cb\u5316WIFI\u8bbe\u5907( \u4e3a WiFi \u9a71\u52a8\u521d\u59cb\u5316 WiFi \u5206\u914d\u8d44\u6e90\uff0c\u5982 WiFi \u63a7\u5236\u7ed3\u6784\u3001RX/TX \u7f13\u51b2\u533a\u3001WiFi NVS \u7ed3\u6784\u7b49\uff0c\u8fd9\u4e2a WiFi \u4e5f\u542f\u52a8 WiFi \u4efb\u52a1\u3002\u5fc5\u987b\u5148\u8c03\u7528\u6b64API\uff0c\u7136\u540e\u624d\u80fd\u8c03\u7528\u6240\u6709\u5176\u4ed6WiFi API)\n    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));\n\n    // STA\u8be6\u7ec6\u914d\u7f6e\n    wifi_config_t sta_config = {\n            .sta = {\n                    .ssid = ESP_WIFI_STA_SSID,\n                    .password = ESP_WIFI_STA_PASSWD,\n                    .bssid_set = false,\n            },\n    };\n    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));\n\n    //----------------\u542f\u52a8\u9636\u6bb5-------------------\n    ESP_ERROR_CHECK(esp_wifi_start());\n\n    //----------------\u914d\u7f6e\u7701\u7535\u6a21\u5f0f-------------------\n    // \u4e0d\u7701\u7535(\u6570\u636e\u4f20\u8f93\u4f1a\u66f4\u5feb)\n    ESP_ERROR_CHECK(esp_wifi_set_ps(WIFI_PS_NONE));\n}\n\nstatic void log_error_if_nonzero(const char *message, int error_code)\n{\n    if (error_code != 0)\n    {\n        ESP_LOGE(TAG, \"Last error %s: 0x%x\", message, error_code);\n    }\n}\n\n\n// MQTT\u5ba2\u6237\u7aef\u4e8b\u4ef6\u5904\u7406\n/*\n * @brief Event handler registered to receive MQTT events\n *\n *  This function is called by the MQTT client event loop.\n *\n * @param handler_args user data registered to the event.\n * @param base Event base for the handler(always MQTT Base in this example).\n * @param event_id The id for the received event.\n * @param event_data The data for the event, esp_mqtt_event_handle_t.\n */\nstatic void mqtt_event_handler(void *handler_args, esp_event_base_t base, int32_t event_id, void *event_data)\n{\n    ESP_LOGD(TAG, \"Event dispatched from event loop base=%s, event_id=%\" PRIi32 \"\", base, event_id);\n    esp_mqtt_event_handle_t event = event_data;\n    esp_mqtt_client_handle_t client = event-&gt;client;\n    int msg_id;\n    switch ((esp_mqtt_event_id_t)event_id)\n    {\n    // MQTT\u8fde\u63a5\u6210\u529f\n    case MQTT_EVENT_CONNECTED:\n        ESP_LOGI(TAG, \"MQTT_EVENT_CONNECTED\");\n        // \u53d1\u5e03\u6d88\u606f\n        msg_id = esp_mqtt_client_publish(client, \"/topic/qos1\", \"data_3\", 0, 1, 0);\n        ESP_LOGI(TAG, \"sent publish successful, msg_id=%d\", msg_id);\n        // \u8ba2\u9605\u6d88\u606f\n        msg_id = esp_mqtt_client_subscribe(client, \"/topic/qos0\", 0);\n        ESP_LOGI(TAG, \"sent subscribe successful, msg_id=%d\", msg_id);\n        msg_id = esp_mqtt_client_subscribe(client, \"/topic/qos1\", 1);\n        ESP_LOGI(TAG, \"sent subscribe successful, msg_id=%d\", msg_id);\n        // \u53d6\u6d88\u8ba2\u9605\u6d88\u606f\n        msg_id = esp_mqtt_client_unsubscribe(client, \"/topic/qos1\");\n        ESP_LOGI(TAG, \"sent unsubscribe successful, msg_id=%d\", msg_id);\n        break;\n    // MQTT\u8fde\u63a5\u65ad\u5f00\n    case MQTT_EVENT_DISCONNECTED:\n        ESP_LOGI(TAG, \"MQTT_EVENT_DISCONNECTED\");\n        break;\n    // MQTT\u8ba2\u9605\u6210\u529f\n    case MQTT_EVENT_SUBSCRIBED:\n        ESP_LOGI(TAG, \"MQTT_EVENT_SUBSCRIBED, msg_id=%d\", event-&gt;msg_id);\n        // \u53d1\u5e03\u6d88\u606f\n        msg_id = esp_mqtt_client_publish(client, \"/topic/qos0\", \"data\", 0, 0, 0);\n        ESP_LOGI(TAG, \"sent publish successful, msg_id=%d\", msg_id);\n        break;\n    // MQTT\u53d6\u6d88\u8ba2\u9605\u6210\u529f\n    case MQTT_EVENT_UNSUBSCRIBED:\n        ESP_LOGI(TAG, \"MQTT_EVENT_UNSUBSCRIBED, msg_id=%d\", event-&gt;msg_id);\n        break;\n    // MQTT\u53d1\u5e03\u6210\u529f\n    case MQTT_EVENT_PUBLISHED:\n        ESP_LOGI(TAG, \"MQTT_EVENT_PUBLISHED, msg_id=%d\", event-&gt;msg_id);\n        break;\n    // MQTT\u6536\u5230\u6570\u636e\n    case MQTT_EVENT_DATA:\n        ESP_LOGI(TAG, \"MQTT_EVENT_DATA\");\n        printf(\"TOPIC=%.*s\\r\\n\", event-&gt;topic_len, event-&gt;topic);\n        printf(\"DATA=%.*s\\r\\n\", event-&gt;data_len, event-&gt;data);\n        break;\n    // MQTT\u9519\u8bef\n    case MQTT_EVENT_ERROR:\n        ESP_LOGI(TAG, \"MQTT_EVENT_ERROR\");\n        if (event-&gt;error_handle-&gt;error_type == MQTT_ERROR_TYPE_TCP_TRANSPORT)\n        {\n            log_error_if_nonzero(\"reported from esp-tls\", event-&gt;error_handle-&gt;esp_tls_last_esp_err);\n            log_error_if_nonzero(\"reported from tls stack\", event-&gt;error_handle-&gt;esp_tls_stack_err);\n            log_error_if_nonzero(\"captured as transport's socket errno\", event-&gt;error_handle-&gt;esp_transport_sock_errno);\n            ESP_LOGI(TAG, \"Last errno string (%s)\", strerror(event-&gt;error_handle-&gt;esp_transport_sock_errno));\n        }\n        break;\n    default:\n        ESP_LOGI(TAG, \"Other event id:%d\", event-&gt;event_id);\n        break;\n    }\n}\n\n// MQTT\u5ba2\u6237\u7aef\nstatic void mqtt_app_start(void)\n{\n    esp_mqtt_client_config_t mqtt_cfg = {\n            .broker.address.uri = \"mqtt://www.duruofu.top:1883\",\n    };\n\n    esp_mqtt_client_handle_t client = esp_mqtt_client_init(&amp;mqtt_cfg);\n    /* The last argument may be used to pass data to the event handler, in this example mqtt_event_handler */\n    // \u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\n    esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, mqtt_event_handler, NULL);\n    // \u542f\u52a8MQTT\u5ba2\u6237\u7aef\n    esp_mqtt_client_start(client);\n}\n\nvoid app_main(void)\n{\n\n    // Initialize NVS\n    esp_err_t ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n    ESP_ERROR_CHECK(ret);\n\n    // \u521b\u5efa\u9ed8\u8ba4\u4e8b\u4ef6\u5faa\u73af\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n\n    // \u914d\u7f6e\u542f\u52a8WIFI\n    wifi_sta_init();\n\n    // \u7b49\u5f85wifi\u8fde\u63a5\u6210\u529f(\u6682\u65f6\u8fd9\u6837\u5904\u7406)\n    vTaskDelay(5000 / portTICK_PERIOD_MS);\n\n    // \u521b\u5efaMQTT\u5ba2\u6237\u7aef\n    mqtt_app_start();\n}\n</code></pre> <p>\u4f7f\u7528MQTTX\u6765\u5145\u5f53\u53e6\u4e00\u4e2a\u5ba2\u6237\u7aef:</p> <p></p> <p>\u6210\u529f\u6536\u5230\u6d88\u606f\uff0c\u5982\u4e0a\u56fe</p> <p>\u5c1d\u8bd5\u53d1\u9001\u6570\u636e\uff0cESP\u4f1a\u5c06\u6570\u636e\u8fd4\u56de\uff1a</p> <p></p> <p></p> <p>\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u7b80\u5355\u7684MQTT\u5ba2\u6237\u7aef\u7a0b\u5e8f\u3002</p>"},{"location":"zh/COMMUNICATION/MQTT/mqtt/#_5","title":"\u53c2\u8003\u94fe\u63a5","text":"<ol> <li>https://docs.espressif.com/projects/esp-idf/zh_CN/v5.1.3/esp32/api-reference/protocols/mqtt.html</li> <li>https://github.com/espressif/esp-idf/blob/master/examples/protocols/mqtt/tcp/main/app_main.c</li> </ol>"},{"location":"zh/COMMUNICATION/WIFI/wifi/","title":"WIFI \u57fa\u7840","text":"<p>\u53c2\u8003\u51fa\u5904</p> <p>\u672c\u6587\u6863\u53c2\u8003\u4e86DURUOFU\u7684ESP32-\u6559\u7a0b\u3002 </p> <p>\u672c\u8282\u5c06\u4ecb\u7ecd\u5982\u4f55\u5728 ESP32 \u4e0a\u4f7f\u7528 WiFi \u529f\u80fd\uff0c\u5305\u62ecWIFI AP \u548cWIFI STA\u3002</p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#_1","title":"\u4e00\u3001\u4ecb\u7ecd","text":"<p>\u5728\u5f00\u59cb\u4f7f\u7528WIFI\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u638c\u63e1\u4e00\u4e9b\u57fa\u672c\u7684\u6982\u5ff5\u548c\u524d\u7f6e\u77e5\u8bc6\uff1a</p> <p>\u6700\u57fa\u672c\u7684\u4e00\u70b9\uff1aWi-Fi\u662f\u7269\u7406\u5c42\u548c\u6570\u636e\u94fe\u8def\u5c42\u7684\u4e1c\u897f,Wi-Fi\u53d6\u4ee3\u7684\u662f\u4ee5\u592a\u7f51\u7684\u7f51\u7ebf\u548c\u4ea4\u6362\u673a\u4e0a\u7684\u53e3\uff0c\u901a\u8fc7\u65e0\u7ebf\u7535\u6ce2\u6765\u6536\u53d1\u4fe1\u606f\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u91cc\u8bf4\u7684WIFI\u6682\u65f6\u4e0d\u6d89\u53ca\u7f51\u7edc\u5c42\u534f\u8bae\u3002</p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#11-esp32","title":"1.1 ESP32\u4e8b\u4ef6\u673a\u5236","text":"<p>\u5982\u679c\u5bf9FreeRTOS\u7684\u591a\u7ebf\u7a0b\u6ca1\u6709\u4efb\u4f55\u4e86\u89e3\uff0c\u8bf7\u5148\u4e86\u89e3\u4e00\u4e0b\uff0c\u53ef\u4ee5\u53c2\u8003\uff1a\u7ebf\u7a0b\u662f\u4ec0\u4e48</p> <p>\u5173\u4e8e\u4e8b\u4ef6\u5faa\u73af\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u94fe\u63a5\u3001\u5927\u81f4\u4e86\u89e3\u5373\u53ef\u3002</p> <ol> <li>ESP32\u4e8b\u4ef6\u5faa\u73af</li> <li>Event Loop \u5927\u767d\u8bdd\u7248</li> </ol>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#12-esp32-wifistaap","title":"1.2 ESP32 WIFI\u7684STA\u548cAP\u6a21\u5f0f","text":""},{"location":"zh/COMMUNICATION/WIFI/wifi/#121-ap","title":"1.2.1 AP","text":"<p>AP(Access Point)\u4e5f\u5c31\u662f\u65e0\u7ebf\u63a5\u5165\u70b9\uff0c\u662f\u4e00\u4e2a\u65e0\u7ebf\u7f51\u7edc\u7684\u521b\u5efa\u8005,\u662f\u7f51\u7edc\u7684\u4e2d\u5fc3\u8282\u70b9\u3002\u4e00\u822c\u5bb6\u5ead\u6216\u529e\u516c\u5ba4\u4f7f\u7528\u7684\u65e0\u7ebf\u8def\u7531\u5668\u5c31\u662f\u4e00\u4e2aAP\u3002</p> <p></p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#122-sta","title":"1.2.2 STA","text":"<p>\u7ad9\u70b9(STA\uff0cStation)\u5c31\u662f\u6bcf\u4e00\u4e2a\u8fde\u63a5\u5230\u65e0\u7ebf\u7f51\u7edc\u4e2d\u7684\u7ec8\u7aef(\u5982\u7b14\u8bb0\u672c\u7535\u8111\u3001PDA\u53ca\u5176\u5b83\u53ef\u4ee5\u8054\u7f51\u7684\u7528\u6237\u8bbe\u5907)\u90fd\u53ef\u79f0\u4e3a\u4e00\u4e2a\u7ad9\u70b9\u3002</p> <p></p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#_2","title":"\u4e8c\u3001\u4f7f\u7528","text":"<p>\u53c2\u8003\uff1aESP-IDF:Wi-Fi \u9a71\u52a8\u7a0b\u5e8f</p> <p>ESP-IDFWiFi\u5e93\u63d0\u4f9b\u7684\u529f\u80fd\u5982\u4e0b\uff1a</p> <ul> <li>\u652f\u6301\u4ec5 station \u6a21\u5f0f\u3001\u4ec5 AP \u6a21\u5f0f\u3001station/AP \u5171\u5b58\u6a21\u5f0f</li> <li>\u652f\u6301\u4f7f\u7528 IEEE 802.11b\u3001IEEE 802.11g\u3001IEEE 802.11n \u548c API \u914d\u7f6e\u534f\u8bae\u6a21\u5f0f</li> <li>\u652f\u6301 WPA/WPA2/WPA3/WPA2-\u4f01\u4e1a\u7248/WPA3-\u4f01\u4e1a\u7248/WAPI/WPS \u548c DPP</li> <li>\u652f\u6301 AMSDU\u3001AMPDU\u3001HT40\u3001QoS \u4ee5\u53ca\u5176\u5b83\u4e3b\u8981\u529f\u80fd</li> <li>\u652f\u6301\u4e50\u946b\u4e13\u5c5e\u534f\u8bae\uff0c\u53ef\u5b9e\u73b0\u00a01 km\u00a0\u6570\u636e\u901a\u4fe1\u91cf</li> <li>\u7a7a\u4e2d\u6570\u636e\u4f20\u8f93\u6700\u9ad8\u53ef\u8fbe 20 MBit/s TCP \u541e\u5410\u91cf\u548c 30 MBit/s UDP \u541e\u5410\u91cf</li> <li>\u652f\u6301\u5feb\u901f\u626b\u63cf\u548c\u5168\u4fe1\u9053\u626b\u63cf</li> <li>\u652f\u6301\u83b7\u53d6\u4fe1\u9053\u72b6\u6001\u4fe1\u606f</li> </ul> <p>\u6821\u56ed\u7f51WIFI</p> <p>\u6ce8\u610f\uff0c\u5f88\u591a\u5355\u4f4d\u6216\u8005\u5b66\u6821\u7684\u6821\u56ed\u7f51\u548c\u5bb6\u5eadwifi\u4e00\u6837\uff0c\u4ee5\u5357\u6d0b\u7406\u5de5\u4e3a\u4f8b\uff0c\u5b66\u6821\u6821\u56ed\u4f7f\u7528\u7684\u6a21\u5f0f\u662fWPA2-Enterprise\uff0c\u6240\u4ee5\u5728\u8fde\u63a5\u6821\u56ed\u7f51\u65f6\uff0c\u9700\u8981\u4f7f\u7528WPA2-Enterprise\u6a21\u5f0f\u3002</p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#21-wifi-ap","title":"2.1 WIFI AP\u6a21\u5f0f","text":"<p>\u5b98\u65b9\u793a\u4f8b\u7a0b\u5e8f\u4f4d\u4e8e\uff1a</p> <p><code>Espressif\\frameworks\\esp-idf-v4.4.3\\examples\\wifi\\getting_started\\softAP</code></p> <p>\u914d\u7f6e\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ul> <li><code>nvs_flash_init</code>\uff0c\u521d\u59cb\u5316\u9ed8\u8ba4 NVS \u5206\u533a\u3002</li> <li><code>esp_netif_init</code>\uff0c\u521d\u59cb\u5316\u5e95\u5c42TCP/IP\u5806\u6808\uff08\u521b\u5efa\u4e00\u4e2a LwIP \u6838\u5fc3\u4efb\u52a1\uff0c\u5e76\u521d\u59cb\u5316 LwIP \u76f8\u5173\u5de5\u4f5c\u3002\uff09</li> <li><code>esp_event_loop_create_default</code>\uff0c\u521b\u5efa\u9ed8\u8ba4\u4e8b\u4ef6\u5faa\u73af\u3002</li> <li><code>esp_netif_create_default_wifi_ap</code>\uff0c\u4f7f\u7528\u9ed8\u8ba4WiFi AP\u914d\u7f6e\u521b\u5efaesp_netif\u5bf9\u8c61\uff0c\u5c06netif\u8fde\u63a5\u5230WiFi\u5e76\u6ce8\u518c\u9ed8\u8ba4WiFi\u5904\u7406\u7a0b\u5e8f\u3002</li> <li><code>esp_wifi_init</code>\uff0c\u4e3a WiFi \u9a71\u52a8\u521d\u59cb\u5316 WiFi \u5206\u914d\u8d44\u6e90\uff0c\u5982 WiFi \u63a7\u5236\u7ed3\u6784\u3001RX/TX \u7f13\u51b2\u533a\u3001WiFi NVS \u7ed3\u6784\u7b49\uff0c\u8fd9\u4e2a WiFi \u4e5f\u542f\u52a8 WiFi \u4efb\u52a1\u3002\u5fc5\u987b\u5148\u8c03\u7528\u6b64API\uff0c\u7136\u540e\u624d\u80fd\u8c03\u7528\u6240\u6709\u5176\u4ed6WiFi API</li> <li><code>esp_event_handler_instance_register</code>\uff0c\u76d1\u542cWIFI_EVENTWiFi \u4efb\u610f\u4e8b\u4ef6\uff0c\u89e6\u53d1\u4e8b\u4ef6\u540e\uff0c\u8fdb\u5165\u56de\u8c03\u51fd\u6570</li> <li><code>esp_wifi_set_mode</code>\uff0c\u8bbe\u7f6eWiFi\u5de5\u4f5c\u6a21\u5f0f\u4e3astation\u3001soft-AP\u6216station+soft-AP\uff0c\u9ed8\u8ba4\u6a21\u5f0f\u4e3asoft-AP\u6a21\u5f0f\u3002\u672c\u7a0b\u5e8f\u8bbe\u7f6e\u4e3aAP</li> <li><code>esp_wifi_set_config</code>\uff0c\u8bbe\u7f6e ESP32 STA \u6216 AP \u7684\u914d\u7f6e</li> <li><code>esp_wifi_start</code>\uff0c\u6839\u636e\u914d\u7f6e\uff0c\u542f\u52a8WiFi</li> </ul> <p>\u5de5\u4f5c\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a(\u770b\u4e0d\u61c2\u53ef\u4ee5\u5ffd\u7565\uff0c\u6bd5\u7adf\u5148\u7528\u8d77\u6765\u6162\u6162\u5c31\u5b66\u4f1a\u4e86\uff0c\u4e5f\u53ef\u4ee5\u770bMichael_ee\u8001\u5e08\u7684\u6559\u7a0b:WIFI\u70ed\u70b9\u5de5\u4f5c\u6d41\u7a0b)</p> <p></p> <p>\u4e3b\u8981\u7684\u6d41\u7a0b\u5206\u4e3a\u4e0b\u9762\u51e0\u4e2a\u90e8\u5206\uff08\u56fe\u6765\u81ea\u5b98\u65b9\u6559\u7a0b\uff09\uff1a</p> <p></p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#211-wi-fi","title":"2.1.1 Wi-Fi\u51c6\u5907\u9636\u6bb5\uff08\u56fe\u4e0a\u6ca1\u6709\uff09","text":"<p>\u8fd9\u4e2a\u9636\u6bb5\u6211\u4eec\u9700\u8981\u521d\u59cb\u5316NVS,\u56e0\u4e3aWiFi\u5e93\u5185\u90e8\u662f\u4f9d\u8d56\u8fd9\u4e2a\u4e1c\u897f\u7684\uff0cNVS\u7684\u76f8\u5173\u77e5\u8bc6\u53ef\u4ee5\u770b\u8fd9\u7bc7\u535a\u5ba2\uff1aESP32\u5b58\u50a8-3.VFS\u865a\u62df\u6587\u4ef6\u7cfb\u7edf</p> <p>\u4e0b\u9762\u76f4\u63a5\u8d34\u51fa\u4ee3\u7801\uff1a <pre><code>// Initialize NVS\nesp_err_t ret = nvs_flash_init();\nif (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {\n    ESP_ERROR_CHECK(nvs_flash_erase());\n    ret = nvs_flash_init();\n}\nESP_ERROR_CHECK( ret );\n</code></pre></p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#212-wi-fi","title":"2.1.2 Wi-Fi \u521d\u59cb\u5316\u9636\u6bb5","text":"<p>\u8fd9\u4e2a\u9636\u6bb5\u4e3b\u8981\u6709\u4e0b\u9762\u51e0\u4e2a\u6b65\u9aa4\uff1a</p> <ul> <li>\u4e3b\u4efb\u52a1\u901a\u8fc7\u8c03\u7528\u51fd\u6570\u00a0<code>esp_netif_init()</code>\u00a0\u521b\u5efa\u4e00\u4e2a LwIP \u6838\u5fc3\u4efb\u52a1\uff0c\u5e76\u521d\u59cb\u5316 LwIP \u76f8\u5173\u5de5\u4f5c\u3002</li> <li>\u4e3b\u4efb\u52a1\u901a\u8fc7\u8c03\u7528\u51fd\u6570\u00a0<code>esp_event_loop_create()</code>\u00a0\u521b\u5efa\u4e00\u4e2a\u7cfb\u7edf\u4e8b\u4ef6\u4efb\u52a1\uff0c\u5e76\u521d\u59cb\u5316\u5e94\u7528\u7a0b\u5e8f\u4e8b\u4ef6\u7684\u56de\u8c03\u51fd\u6570\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u8be5\u56de\u8c03\u51fd\u6570\u552f\u4e00\u7684\u52a8\u4f5c\u5c31\u662f\u5c06\u4e8b\u4ef6\u4e2d\u7ee7\u5230\u5e94\u7528\u7a0b\u5e8f\u4efb\u52a1\u4e2d\u3002</li> <li>\u4e3b\u4efb\u52a1\u901a\u8fc7\u8c03\u7528\u51fd\u6570\u00a0<code>esp_netif_create_default_wifi_ap()</code>\u00a0\u6216\u00a0<code>esp_netif_create_default_wifi_sta()</code>\u00a0\u521b\u5efa\u6709 TCP/IP \u5806\u6808\u7684\u9ed8\u8ba4\u7f51\u7edc\u63a5\u53e3\u5b9e\u4f8b\u7ed1\u5b9a station \u6216 AP\u3002</li> <li>\u4e3b\u4efb\u52a1\u901a\u8fc7\u8c03\u7528\u51fd\u6570\u00a0<code>esp_wifi_init()</code>\u00a0\u521b\u5efa Wi-Fi \u9a71\u52a8\u7a0b\u5e8f\u4efb\u52a1\uff0c\u5e76\u521d\u59cb\u5316 Wi-Fi \u9a71\u52a8\u7a0b\u5e8f\u3002</li> <li>\u4e3b\u4efb\u52a1\u901a\u8fc7\u8c03\u7528 OS API \u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\u4efb\u52a1\u3002</li> </ul> <p>\u4ee3\u7801\uff1a</p> <pre><code>ESP_ERROR_CHECK(esp_netif_init());\n\nESP_ERROR_CHECK(esp_event_loop_create_default());\n\n// *esp_netif_ap \u53ef\u4ee5\u7528\u6765\u4fee\u6539AP\u8bbe\u7f6e\nesp_netif_t *esp_netif_ap = esp_netif_create_default_wifi_ap();\n\n/*Initialize WiFi */ \nwifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n// WIFI_INIT_CONFIG_DEFAULT \u662f\u4e00\u4e2a\u9ed8\u8ba4\u914d\u7f6e\u7684\u5b8f\n\nESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));\n</code></pre> <p>\u5230\u8fd9\u91cc\u5c31\u5b8c\u6210\u4e86wifi\u521d\u59cb\u5316\u3002</p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#213-wi-fi","title":"2.1.3 Wi-Fi \u914d\u7f6e\u9636\u6bb5","text":"<p>Wi-Fi \u9a71\u52a8\u7a0b\u5e8f\u521d\u59cb\u5316\u6210\u529f\u540e\uff0c\u53ef\u4ee5\u8fdb\u5165\u5230\u914d\u7f6e\u9636\u6bb5\u3002</p> <p>\u901a\u8fc7\u51fd\u6570<code>esp_wifi_set_mode</code>\u53ef\u4ee5\u8bbe\u7f6eWiFi\u5de5\u4f5c\u6a21\u5f0f\u4e3astation\u3001soft-AP\u6216station+soft-AP\u3002</p> <p>\u901a\u8fc7\u51fd\u6570<code>esp_wifi_set_config</code>\uff0c\u8bbe\u7f6e ESP32 STA \u6216 AP \u7684\u5177\u4f53\u914d\u7f6e\uff08\u53c2\u6570\u5f88\u591a\uff0c\u53ef\u4ee5\u53bb\u5b98\u65b9\u6587\u6863\u4ed4\u7ec6\u770b\u770b\uff0c\u4e0b\u9762\u53ea\u914d\u7f6e\u51e0\u4e2a\u57fa\u672c\u53c2\u6570\uff09\u3002</p> <pre><code>// \u8bbe\u7f6e\u4e3aAP\u6a21\u5f0f\n ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_AP));\n\n// AP\u8be6\u7ec6\u914d\u7f6e\nwifi_config_t wifi_ap_config = {\n    .ap = {\n        .ssid = ESP_WIFI_AP_SSID,             // WIFI\u540d\u79f0\n        .ssid_len = strlen(ESP_WIFI_AP_SSID), // \u540d\u79f0\u957f\u5ea6\n        .channel = 1,                         // WIFI\u4fe1\u9053\n        .password = ESP_WIFI_AP_PASSWD,       // WiFi\u5bc6\u7801\n        .max_connection = 5,                  // \u6700\u5927\u8fde\u63a5\u6570\uff0c\u9ed8\u8ba4\u503c\u662f 10\n        .authmode = WIFI_AUTH_WPA2_PSK,       // WiFi\u8ba4\u8bc1\u65b9\u5f0f\n    },\n};\nESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_AP, &amp;wifi_ap_config));\n</code></pre> <p>\u8fd9\u91cc\u53ea\u914d\u914d\u7f6e\u4e86\u57fa\u672c\u53c2\u6570\u3002</p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#214-wi-fi","title":"2.1.4 Wi-Fi \u542f\u52a8\u9636\u6bb5","text":"<p>\u4f7f\u7528<code>esp_wifi_start</code>\uff0c\u6839\u636e\u914d\u7f6e\uff0c\u542f\u52a8WiFi</p> <pre><code>/* Start WiFi */\nESP_ERROR_CHECK(esp_wifi_start());\n</code></pre> <p>\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2a\u57fa\u672c\u7684WIFI AP\u3002</p> <p>\u4f46\u662f\u8fd9\u6837\u4ec5\u4ec5\u662f\u6700\u57fa\u672c\u7684\u7a0b\u5e8f\uff0c\u5f53\u6709\u5916\u90e8STA\u8bbe\u5907\u63a5\u5165\u548c\u65ad\u5f00\u6211\u4eec\u5982\u4f55\u5728\u7a0b\u5e8f\u91cc\u5f97\u77e5\u5462\uff1f\u8fd9\u5c31\u9700\u8981\u4f7f\u7528\u4e4b\u524d\u521b\u5efa\u7684\u9ed8\u8ba4\u4e8b\u4ef6\u5faa\u73af\uff0c</p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#215","title":"2.1.5 \u4e8b\u4ef6\u5faa\u73af","text":"<p>\u8c03\u7528\u00a0<code>esp_event_handler_instance_register</code>\u00a0\u5c06\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u6ce8\u518c\u5230\u9ed8\u8ba4\u7684\u4e8b\u4ef6\u5faa\u73af\u4e2d\u3002\u5b83\u4e0e <code>esp_event_handler_instance_register_with</code>\u51fd\u6570\u7684\u529f\u80fd\u76f8\u540c\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u5c06\u5904\u7406\u5668\u6ce8\u518c\u5230\u9ed8\u8ba4\u4e8b\u4ef6\u5faa\u73af\u4e2d\u3002</p> <pre><code>esp_err_t esp_event_handler_instance_register(esp_event_base_t event_base,\n                                             int32_t event_id,\n                                             esp_event_handler_t event_handler,\n                                             void *event_handler_arg,\n                                             esp_event_handler_instance_t *instance);\n</code></pre> <p>\u53c2\u6570\u5982\u4e0b\uff1a</p> <ul> <li>\u53c2\u6570 event_base \u662f\u8981\u4e3a\u5176\u6ce8\u518c\u5904\u7406\u7a0b\u5e8f\u7684\u4e8b\u4ef6\u7684\u57fa\u672cID\u3002</li> <li>\u53c2\u6570 event_id \u662f\u8981\u6ce8\u518c\u5904\u7406\u7a0b\u5e8f\u7684\u4e8b\u4ef6\u7684ID\u3002</li> <li>\u53c2\u6570 event_handler \u662f\u5f53\u4e8b\u4ef6\u88ab\u5206\u53d1\u65f6\u8c03\u7528\u7684\u5904\u7406\u51fd\u6570\u3002</li> <li>\u53c2\u6570 event_handler_arg \u662f\u4f20\u9012\u7ed9\u5904\u7406\u51fd\u6570\u7684\u9664\u4e8b\u4ef6\u6570\u636e\u4ee5\u5916\u7684\u6570\u636e\u3002</li> <li>\u53c2\u6570 instance \u662f\u4e0e\u6ce8\u518c\u7684\u4e8b\u4ef6\u5904\u7406\u5668\u548c\u6570\u636e\u76f8\u5173\u7684\u4e8b\u4ef6\u5904\u7406\u5668\u5b9e\u4f8b\u5bf9\u8c61</li> </ul> <p>\u53ef\u4ee5\u5728espidf\u6587\u4ef6\u91cc\u770b\u5230\u76f8\u5173\u4e8b\u4ef6\u63cf\u8ff0\uff1a</p> <p></p> <p>\u6211\u4eec\u53ef\u4ee5\u5728\u9ed8\u8ba4\u4e8b\u4ef6\u5faa\u73af\u521b\u5efa\u540e\uff0c\u6dfb\u52a0\u4e8b\u4ef6\u5904\u7406\uff1a</p> <pre><code>void WIFI_CallBack(void *event_handler_arg,esp_event_base_t event_base,int32_t event_id,void *event_data)\n{\n    // \u8fde\u63a5\u4e8b\u4ef6\n    if(event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_AP_STAIPASSIGNED)\n    {\n        // \u89e3\u6790\u6570\u636e\n        ip_event_ap_staipassigned_t* event_info = (ip_event_ap_staipassigned_t *)event_data;\n        ESP_LOGW(\"WIFI_AP\", \"\u8bbe\u5907\u5df2\u8fde\u63a5 MAC:\"MACSTR\"\", MAC2STR(event_info-&gt;mac));\n    }\n\n    // \u65ad\u5f00\u8fde\u63a5\u4e8b\u4ef6\n    if(event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_AP_STADISCONNECTED)\n    {\n        wifi_event_ap_stadisconnected_t* event_info = (wifi_event_ap_stadisconnected_t*)event_data;\n        ESP_LOGW(\"WIFI_AP\", \"\u8bbe\u5907\u5df2\u65ad\u5f00 MAC:\"MACSTR\"\", MAC2STR(event_info-&gt;mac));\n    }\n}\n\nvoid app_main(void)\n{\n    // ......\n\n    // \u521d\u59cb\u5316\u9ed8\u8ba4\u4e8b\u4ef6\u5faa\u73af\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n    // \u6ce8\u518c\u8bbe\u5907\u8fde\u63a5\u4e8b\u4ef6\u56de\u8c03\n    esp_event_handler_instance_register(IP_EVENT, IP_EVENT_AP_STAIPASSIGNED, WIFI_CallBack, NULL, NULL);\n    // \u6ce8\u518c\u8bbe\u5907\u65ad\u5f00\u8fde\u63a5\u8bbe\u5907\u56de\u8c03\n    esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_AP_STADISCONNECTED, WIFI_CallBack, NULL, NULL);\n\n\n    // ......\n}\n</code></pre> <p>\u6211\u4eec\u5728\u8fd9\u91cc\u6ce8\u518c\u4e86IP_EVENT_AP_STAIPASSIGNED\u4e8b\u4ef6\uff0c\u5f53STA\u8bbe\u5907\u8fde\u63a5\u548c\u65ad\u5f00\u540e\u5c31\u4f1a\u8c03\u7528WIFI_CallBack\u56de\u8c03\u51fd\u6570,\u6253\u5370\u8fde\u63a5\u8bbe\u5907\u7684MAC\u4fe1\u606f\u3002</p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#22-wifi-sta","title":"2.2 WIFI  STA","text":"<p>\u5b98\u65b9\u793a\u4f8b\u4ee3\u7801\u4f4d\u4e8e\uff08\u4e0e\u70ed\u70b9\u6d41\u7a0b\u76f8\u4f3c\uff0c\u4f46\u662f\u7ec6\u8282\u6709\u6240\u4e0d\u540c\uff09: `Espressif\\frameworks\\esp-idf-v4.4.3\\examples\\wifi\\getting_started\\station</p> <p>\u524d\u9762\u51e0\u6b65\u914d\u914d\u7f6e\u65b9\u5f0f\u57fa\u672c\u76f8\u540c</p> <p>\u4e0b\u9762\u662f\u5b98\u65b9\u7684\u7a0b\u5e8f\u5b8f\u89c2\u6d41\u7a0b\uff1a</p> <p></p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#221-wi-fiap","title":"2.2.1 Wi-Fi\u51c6\u5907\u9636\u6bb5\uff08\u4e0e\u4e0a\u6587AP\u76f8\u540c\uff09","text":"<p>\u521d\u59cb\u5316NVS\uff1a</p> <pre><code>// Initialize NVS\nesp_err_t ret = nvs_flash_init();\nif (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {\n    ESP_ERROR_CHECK(nvs_flash_erase());\n    ret = nvs_flash_init();\n}\nESP_ERROR_CHECK( ret );\n</code></pre>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#222-wi-fi","title":"2.2.2 Wi-Fi\u521d\u59cb\u5316\u9636\u6bb5","text":"<p>\u8fd9\u91cc\u4e0eAP\u7684\u914d\u7f6e\u4e0d\u540c\u4e86\uff0c\u6211\u4eec\u9700\u8981\u914d\u7f6e\u8bbe\u5907\u4e3aSTA\u6a21\u5f0f\uff0c</p> <p>\u8fd9\u91cc\u552f\u4e00\u7684\u533a\u522b\u662f\u628a<code>esp_netif_create_default_wifi_ap()</code>\u4fee\u6539\u4e3a<code>esp_netif_create_default_wifi_sta()</code>\u914d\u7f6e\u4e3aSTA\u6a21\u5f0f</p> <pre><code>ESP_ERROR_CHECK(esp_netif_init());\n\nESP_ERROR_CHECK(esp_event_loop_create_default());\n\n// *esp_netif_ap \u53ef\u4ee5\u7528\u6765\u4fee\u6539AP\u8bbe\u7f6e\nesp_netif_t *esp_netif_sta = esp_netif_create_default_wifi_sta();\n\n/*Initialize WiFi */ \nwifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n// WIFI_INIT_CONFIG_DEFAULT \u662f\u4e00\u4e2a\u9ed8\u8ba4\u914d\u7f6e\u7684\u5b8f\n\nESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));\n</code></pre>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#223-wi-fi","title":"2.2.3 Wi-Fi\u914d\u7f6e\u9636\u6bb5","text":"<p>\u8fd9\u91cc\u4e0eAP\u6a21\u5f0f\u7c7b\u4f3c\uff0c\u4f46\u662f\u914d\u7f6e\u7ed3\u6784\u4f53\u91cc\u7684\u5185\u5bb9\u6709\u5dee\u5f02</p> <pre><code>...............\n#define ESP_WIFI_STA_SSID \"duruofu_win10\"\n#define ESP_WIFI_STA_PASSWD \"1234567890\"\n\n.................\n\n// \u8bbe\u7f6e\u4e3aSTA\u6a21\u5f0f\nESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));\n\n// STA\u8be6\u7ec6\u914d\u7f6e\nwifi_config_t sta_config = {\n    .sta = {\n        .ssid = ESP_WIFI_STA_SSID,\n        .password = ESP_WIFI_STA_PASSWD,\n        .bssid_set = false,\n    },\n} ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));\n</code></pre> <p>\u8fd9\u91cc\u7684\u914d\u7f6e\u4fe1\u606f\u987e\u540d\u601d\u4e49\u5c31\u662f\u8981\u8fde\u63a5\u7684wifi\u540d\u79f0\u548c\u5bc6\u7801\uff08\u5f53\u7136\u8fd8\u6709\u66f4\u591a\u53c2\u6570\uff0c\u53ef\u4ee5\u53c2\u8003ESP-IDF\u53c2\u6570\u8bf4\u660e\uff09\u3002</p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#224-wi-fi","title":"2.2.4 Wi-Fi \u542f\u52a8\u9636\u6bb5","text":"<p>\u548cAP\u6a21\u5f0f\u4e0d\u540c\uff0c\u8fd9\u91cc\u591a\u4e86\u4e00\u4e2a<code>esp_wifi_connect()</code>\u7528\u4e8e\u8fde\u63a5wifi\u3002</p> <pre><code>//----------------\u542f\u52a8\u9636\u6bb5-------------------\nESP_ERROR_CHECK(esp_wifi_start());\nESP_ERROR_CHECK(esp_wifi_connect());\n</code></pre>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#225","title":"2.2.5 \u4e8b\u4ef6\u5faa\u73af","text":"<p>\u540c\u6837\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u524d\u9762\u4e00\u6837\u6dfb\u52a0\u4e8b\u4ef6\u56de\u8c03\u51fd\u6570</p> <p>\u8fd9\u91cc\u76d1\u542c\u4e86\u542f\u52a8\u4e8b\u4ef6\uff0c\u8fde\u63a5\u5931\u8d25\u4e8b\u4ef6\uff0c\u8fde\u63a5\u6210\u529f\u4e8b\u4ef6\uff0c\u4ee3\u7801\u5f88\u7b80\u5355\u5c31\u4e0d\u5c55\u5f00\u89e3\u91ca\u4e86\u3002</p> <pre><code>void WIFI_CallBack(void *event_handler_arg,esp_event_base_t event_base,int32_t event_id,void *event_data)\n{\n    static uint8_t connect_count = 0;\n    // WIFI \u542f\u52a8\u6210\u529f\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_START\");\n        ESP_ERROR_CHECK(esp_wifi_connect());\n    }\n    // WIFI \u8fde\u63a5\u5931\u8d25\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_DISCONNECTED\");\n        connect_count++;\n        if (connect_count &lt; 6)\n        {\n            ESP_ERROR_CHECK(esp_wifi_connect());\n        }\n        else{\n            ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_DISCONNECTED 10 times\");\n        }\n    }\n    // WIFI \u8fde\u63a5\u6210\u529f(\u83b7\u53d6\u5230\u4e86IP)\n    if (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_GOT_IP\");\n        ip_event_got_ip_t *info = (ip_event_got_ip_t *)event_data;\n        ESP_LOGI(\"WIFI_EVENT\", \"got ip:\" IPSTR \"\", IP2STR(&amp;info-&gt;ip_info.ip));\n    }\n}\n\nvoid app_main(void)\n{\n    // ......\n\n    // \u521d\u59cb\u5316\u9ed8\u8ba4\u4e8b\u4ef6\u5faa\u73af\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n    // \u6ce8\u518c\u4e8b\u4ef6(wifi\u542f\u52a8\u6210\u529f)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, NULL, NULL))\n    // \u6ce8\u518c\u4e8b\u4ef6(wifi\u8fde\u63a5\u5931\u8d25)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, NULL, NULL))\n    // \u6ce8\u518c\u4e8b\u4ef6(wifi\u8fde\u63a5\u5931\u8d25)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, NULL, NULL))\n\n    // ......\n}\n</code></pre>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#23","title":"2.3 \u8865\u5145","text":""},{"location":"zh/COMMUNICATION/WIFI/wifi/#231-wifi","title":"2.3.1 WIFI\u7684\u7701\u7535\u6a21\u5f0f","text":"<p>\u53ef\u4ee5\u4f7f\u7528<code>esp_wifi_set_ps()</code>\u51fd\u6570\u6765\u914d\u7f6eWIFI\u7684\u7701\u7535\u6a21\u5f0f\u3002</p> <p>\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u6709\u4e09\u4e2a\u53c2\u6570\u53ef\u9009\uff1a <pre><code>typedef enum {\n    WIFI_PS_NONE,        /**&lt; No power save */\n    WIFI_PS_MIN_MODEM,   /**&lt; Minimum modem power saving. In this mode, station wakes up to receive beacon every DTIM period */\n    WIFI_PS_MAX_MODEM,   /**&lt; Maximum modem power saving. In this mode, interval to receive beacons is determined by the listen_interval parameter in wifi_sta_config_t */\n} wifi_ps_type_t;\n</code></pre></p> <p>\u5173\u4e8e\u7701\u7535\u6a21\u5f0f\u53ef\u4ee5\u53c2\u8003\uff1aWi-Fi\u573a\u666f\u5982\u4f55\u9009\u62e9\u4f4e\u529f\u8017\u6a21\u5f0f</p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#232-ip","title":"2.3.2 \u9759\u6001IP\u914d\u7f6e","text":"<p>\u5728<code>esp_netif_create_default_wifi_sta()</code>\u521b\u5efa\u597dDHCP\u5ba2\u6237\u7aef\u540e\u4f7f\u7528\u51fd\u6570<code>esp_err_t esp_netif_dhcpc_stop(esp_netif_t *esp_netif)</code>\u505c\u6b62DHCP\u5ba2\u6237\u7aef\u3002</p> <p>\u4f7f\u7528<code>esp_netif_set_ip_info()</code>\u914d\u7f6e\u6211\u4eec\u60f3\u8981\u7684\u9759\u6001IP,\u5982\u4e0b\uff1a</p> <pre><code>// \u521d\u59cb\u5316STA\u8bbe\u5907\nesp_netif_t *esp_netif = esp_netif_create_default_wifi_sta();\n\n// \u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\n//*******************\u914d\u7f6e\u9759\u6001IP*************************\nesp_netif_dhcpc_stop(esp_netif);\nesp_netif_ip_info_t ipInfo;\nipInfo.ip.addr = inet_addr(\"192.168.138.2\");\nipInfo.netmask = inet_addr(\"255.255.255.0\");\nipInfo.gw = inet_addr(\"192.168.138.2\");\n\nesp_netif_set_ip_info(esp_netif, &amp;ipInfo);\nesp_netif_dhcpc_start(esp_netif);\n//*******************\u914d\u7f6e\u9759\u6001IP*************************\n// \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\n</code></pre>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#233-wifi-scan","title":"2.3.3 WIFI Scan","text":"<p>\u6211\u4eec\u4f7f\u7528<code>esp_wifi_start</code>\u540e\uff0c\u4f1a\u6839\u636e\u914d\u7f6e\uff0c\u542f\u52a8WiFI\u3002\u5982\u679c\u4e0d\u7acb\u5373\u8fde\u63a5\u5230\u8bbe\u5b9a\u7684WIFI\u70ed\u70b9\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528WIFI Scan\u6765\u5bfb\u627e\u53ef\u8fde\u63a5\u7684\u8bbe\u5907\u3002</p> <p><code>esp_wifi_scan_start</code>\uff0c\u626b\u63cf\u6240\u6709\u6709\u6548\u7684AP <code>esp_wifi_scan_get_ap_records</code>\uff0c\u83b7\u53d6\u4e0a\u6b21\u626b\u63cf\u4e2d\u627e\u5230\u7684AP\u5217\u8868 <code>esp_wifi_scan_get_ap_num</code>\uff0c\u83b7\u53d6\u4e0a\u6b21\u626b\u63cf\u4e2d\u627e\u5230\u7684AP\u6570</p> <p>\u8fd9\u91cc\u4e5f\u6ca1\u4ec0\u4e48\u590d\u6742\u7684\uff0c\u5efa\u8bae\u76f4\u63a5\u53c2\u8003IDF\u5b98\u65b9\u6587\u6863\uff1aESP32 Wi-Fi \u626b\u63cf</p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#_3","title":"\u4e09\u3001\u5b9e\u4f8b","text":""},{"location":"zh/COMMUNICATION/WIFI/wifi/#31-wifi-ap","title":"3.1 WIFI AP\u6a21\u5f0f","text":"<p>\u4e0b\u9762\u57fa\u4e8e\u7b2c\u4e8c\u90e8\u5206\u7684\u6559\u7a0b\u5b9e\u73b0\u4e86WIFI AP\u6a21\u5f0f \u4ee3\u7801\u94fe\u63a5\uff1a</p> <p>https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_ap</p> <pre><code>#include &lt;string.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/event_groups.h\"\n#include \"esp_wifi.h\"\n#include \"esp_log.h\"\n#include \"esp_event.h\"\n#include \"nvs_flash.h\"\n#include \"esp_mac.h\"\n\n#define ESP_WIFI_AP_SSID \"CSW@CEE\"\n#define ESP_WIFI_AP_PASSWD \"88888888\"\n\nvoid WIFI_CallBack(void *event_handler_arg,esp_event_base_t event_base,int32_t event_id,void *event_data)\n{\n    // \u8fde\u63a5\u4e8b\u4ef6\n    if(event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_AP_STAIPASSIGNED)\n    {\n        // \u89e3\u6790\u6570\u636e\n        ip_event_ap_staipassigned_t* event_info = (ip_event_ap_staipassigned_t *)event_data;\n        ESP_LOGW(\"WIFI_AP\", \"\u8bbe\u5907\u5df2\u8fde\u63a5 MAC:\"MACSTR\"\", MAC2STR(event_info-&gt;mac));\n    }\n\n    // \u65ad\u5f00\u8fde\u63a5\u4e8b\u4ef6\n    if(event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_AP_STADISCONNECTED)\n    {\n        wifi_event_ap_stadisconnected_t* event_info = (wifi_event_ap_stadisconnected_t*)event_data;\n        ESP_LOGW(\"WIFI_AP\", \"\u8bbe\u5907\u5df2\u65ad\u5f00 MAC:\"MACSTR\"\", MAC2STR(event_info-&gt;mac));\n    }\n}\n\nvoid app_main(void)\n{\n    //----------------\u51c6\u5907\u9636\u6bb5-------------------\n    // Initialize NVS\n    esp_err_t ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n    ESP_ERROR_CHECK(ret);\n\n    //---------------\u521d\u59cb\u5316\u9636\u6bb5------------------\n\n    ESP_ERROR_CHECK(esp_netif_init());\n\n    // \u521d\u59cb\u5316\u9ed8\u8ba4\u4e8b\u4ef6\u5faa\u73af\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n    // \u6ce8\u518c\u8bbe\u5907\u8fde\u63a5\u4e8b\u4ef6\u56de\u8c03\n    esp_event_handler_instance_register(IP_EVENT, IP_EVENT_AP_STAIPASSIGNED, WIFI_CallBack, NULL, NULL);\n    // \u6ce8\u518c\u8bbe\u5907\u65ad\u5f00\u8fde\u63a5\u8bbe\u5907\u56de\u8c03\n    esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_AP_STADISCONNECTED, WIFI_CallBack, NULL, NULL);\n\n    // *esp_netif_ap \u53ef\u4ee5\u7528\u6765\u4fee\u6539AP\u8bbe\u7f6e\n    esp_netif_t *esp_netif_ap = esp_netif_create_default_wifi_ap();\n\n    /*Initialize WiFi */\n    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n    // WIFI_INIT_CONFIG_DEFAULT \u662f\u4e00\u4e2a\u9ed8\u8ba4\u914d\u7f6e\u7684\u5b8f\n    ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));\n\n    //---------------\u914d\u7f6e\u9636\u6bb5--------------------\n    // \u8bbe\u7f6e\u4e3aAP\u6a21\u5f0f\n    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_AP));\n\n    // AP\u8be6\u7ec6\u914d\u7f6e\n    wifi_config_t wifi_ap_config = {\n        .ap = {\n            .ssid = ESP_WIFI_AP_SSID,             // WIFI\u540d\u79f0\n            .ssid_len = strlen(ESP_WIFI_AP_SSID), // \u540d\u79f0\u957f\u5ea6\n            .channel = 1,                         // WIFI\u4fe1\u9053\n            .password = ESP_WIFI_AP_PASSWD,       // WiFi\u5bc6\u7801\n            .max_connection = 5,                  // \u6700\u5927\u8fde\u63a5\u6570\uff0c\u9ed8\u8ba4\u503c\u662f 10\n            .authmode = WIFI_AUTH_WPA2_PSK,       // WiFi\u8ba4\u8bc1\u65b9\u5f0f\n        },\n    };\n    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_AP, &amp;wifi_ap_config));\n\n    //---------------\u542f\u52a8\u9636\u6bb5--------------------\n    /* Start WiFi */\n    ESP_ERROR_CHECK(esp_wifi_start());\n}\n</code></pre> <p>\u6548\u679c\u5c55\u793a\uff1a</p> <p></p> <p>\u8fde\u63a5wifi\u4f1a\u6253\u5370\u8fde\u63a5\u8bbe\u5907\u7684\u4fe1\u606f\u3002</p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#32-wifi-sta","title":"3.2 WIFI STA\u6a21\u5f0f","text":"<p>\u4e0b\u9762\u57fa\u4e8e\u7b2c\u4e8c\u90e8\u5206\u7684\u6559\u7a0b\u5b9e\u73b0\u4e86WIFI STA\u6a21\u5f0f \u4ee3\u7801\u94fe\u63a5\uff1a</p> <p>https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_sta</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/event_groups.h\"\n#include \"esp_wifi.h\"\n#include \"esp_log.h\"\n#include \"esp_event.h\"\n#include \"nvs_flash.h\"\n#include \"esp_mac.h\"\n\n#define ESP_WIFI_STA_SSID \"CSW@CEE\"\n#define ESP_WIFI_STA_PASSWD \"88888888\"\n\nvoid WIFI_CallBack(void *event_handler_arg, esp_event_base_t event_base, int32_t event_id, void *event_data)\n{\n    static uint8_t connect_count = 0;\n    // WIFI \u542f\u52a8\u6210\u529f\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_START\");\n        ESP_ERROR_CHECK(esp_wifi_connect());\n    }\n    // WIFI \u8fde\u63a5\u5931\u8d25\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_DISCONNECTED\");\n        connect_count++;\n        if (connect_count &lt; 6)\n        {\n            ESP_ERROR_CHECK(esp_wifi_connect());\n        }\n        else{\n            ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_DISCONNECTED 10 times\");\n        }\n    }\n    // WIFI \u8fde\u63a5\u6210\u529f(\u83b7\u53d6\u5230\u4e86IP)\n    if (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)\n    {\n        ESP_LOGI(\"WIFI_EVENT\", \"WIFI_EVENT_STA_GOT_IP\");\n        ip_event_got_ip_t *info = (ip_event_got_ip_t *)event_data;\n        ESP_LOGI(\"WIFI_EVENT\", \"got ip:\" IPSTR \"\", IP2STR(&amp;info-&gt;ip_info.ip));\n    }\n}\n\nvoid app_main(void)\n{\n    //----------------\u51c6\u5907\u9636\u6bb5-------------------\n    // Initialize NVS\n    esp_err_t ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n    ESP_ERROR_CHECK(ret);\n\n    //----------------\u521d\u59cb\u5316\u9636\u6bb5-------------------\n    ESP_ERROR_CHECK(esp_netif_init());\n\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n    // \u6ce8\u518c\u4e8b\u4ef6(wifi\u542f\u52a8\u6210\u529f)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, NULL, NULL));\n    // \u6ce8\u518c\u4e8b\u4ef6(wifi\u8fde\u63a5\u5931\u8d25)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, NULL, NULL));\n    // \u6ce8\u518c\u4e8b\u4ef6(wifi\u8fde\u63a5\u5931\u8d25)\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, NULL, NULL));\n\n    // \u521d\u59cb\u5316STA\u8bbe\u5907\n    esp_netif_create_default_wifi_sta();\n\n    /*Initialize WiFi */\n    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n    // WIFI_INIT_CONFIG_DEFAULT \u662f\u4e00\u4e2a\u9ed8\u8ba4\u914d\u7f6e\u7684\u5b8f\n\n    ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));\n\n    //----------------\u914d\u7f6e\u9636\u6bb5-------------------\n    // \u8bbe\u7f6e\u4e3aSTA\u6a21\u5f0f\n    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));\n\n    // STA\u8be6\u7ec6\u914d\u7f6e\n    wifi_config_t sta_config = {\n        .sta = {\n            .ssid = ESP_WIFI_STA_SSID,\n            .password = ESP_WIFI_STA_PASSWD,\n            .bssid_set = false,\n        },\n    };\n    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));\n\n    //----------------\u542f\u52a8\u9636\u6bb5-------------------\n    ESP_ERROR_CHECK(esp_wifi_start());\n\n}\n</code></pre> <p>\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#33-wifi-sta-","title":"3.3 WIFI STA\u6a21\u5f0f - \u8fde\u63a5\u6821\u56ed\u7f51","text":"<p>\u901a\u8fc7WPA2-ENTERPIRSE \u6a21\u5f0f\u8fde\u63a5\u6821\u56ed\u7f51</p> <p>\u4ee5\u4e0a\u4ee3\u7801\u9002\u5408\u666e\u901a\u5bb6\u7528\u7684\u7b80\u5355\u8def\u7531\u5668\uff0c\u5982\u679c\u60f3\u8981\u63a5\u5165\u5b66\u6821wifi\u7f51\u7edc\uff0c\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\uff0c\u53c2\u8003\u5b98\u65b9\u6587\u6863, \u548c[\u5b98\u65b9\u4ee3\u7801]\uff08https://github.com/espressif/esp-idf/blob/v5.2.4/examples/wifi/wifi_enterprise/main/wifi_enterprise_main.c\uff09\u3002\u6211\u4e2a\u4eba\u4fee\u6539\u548c\u6d4b\u8bd5\u540e\u6210\u529f\u7684\u4ee3\u7801\u5982\u4e0b\u3002</p> <pre><code>/* WiFi Connection Example using WPA2 Enterprise\n *\n * Original Copyright (C) 2006-2016, ARM Limited, All Rights Reserved, Apache 2.0 License.\n * Additions Copyright (C) Copyright 2015-2016 Espressif Systems (Shanghai) PTE LTD, Apache 2.0 License.\n *\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/event_groups.h\"\n#include \"esp_wifi.h\"\n#include \"esp_wpa2.h\"\n#include \"esp_event.h\"\n#include \"esp_log.h\"\n#include \"esp_system.h\"\n#include \"nvs_flash.h\"\n#include \"esp_netif.h\"\n\n#define CONFIG_EXAMPLE_EAP_METHOD_PEAP 1\n\n/* The examples use simple WiFi configuration that you can set via\n   project configuration menu.\n\n   If you'd rather not, just change the below entries to strings with\n   the config you want - ie #define EXAMPLE_WIFI_SSID \"mywifissid\"\n\n   You can choose EAP method via project configuration according to the\n   configuration of AP.\n*/\n#define EXAMPLE_WIFI_SSID \"your_ssid\" //SSID of WiFi\n#define EXAMPLE_EAP_METHOD CONFIG_EXAMPLE_EAP_METHOD  //This can be set in Configuration Menu\n\n// #define EXAMPLE_EAP_ID \"Your_UPI/UserID\"\n#define EXAMPLE_EAP_USERNAME \"your_username\"\n#define EXAMPLE_EAP_PASSWORD \"your_password\"\n\n/* FreeRTOS event group to signal when we are connected &amp; ready to make a request */\nstatic EventGroupHandle_t wifi_event_group;\n\n/* esp netif object representing the WIFI station */\nstatic esp_netif_t *sta_netif = NULL;\n\n/* The event group allows multiple bits for each event,\n   but we only care about one event - are we connected\n   to the AP with an IP? */\nconst int CONNECTED_BIT = BIT0;\n\nstatic const char *TAG = \"CSW-WIFI\";\n\n/* CA cert, taken from wpa2_ca.pem\n   Client cert, taken from wpa2_client.crt\n   Client key, taken from wpa2_client.key\n\n   The PEM, CRT and KEY file were provided by the person or organization\n   who configured the AP with wpa2 enterprise.\n\n   To embed it in the app binary, the PEM, CRT and KEY file is named\n   in the component.mk COMPONENT_EMBED_TXTFILES variable.\n*/\n#ifdef CONFIG_EXAMPLE_VALIDATE_SERVER_CERT\nextern uint8_t ca_pem_start[] asm(\"_binary_wpa2_ca_pem_start\");\nextern uint8_t ca_pem_end[]   asm(\"_binary_wpa2_ca_pem_end\");\n#endif /* CONFIG_EXAMPLE_VALIDATE_SERVER_CERT */\n\n#ifdef CONFIG_EXAMPLE_EAP_METHOD_TLS\nextern uint8_t client_crt_start[] asm(\"_binary_wpa2_client_crt_start\");\nextern uint8_t client_crt_end[]   asm(\"_binary_wpa2_client_crt_end\");\nextern uint8_t client_key_start[] asm(\"_binary_wpa2_client_key_start\");\nextern uint8_t client_key_end[]   asm(\"_binary_wpa2_client_key_end\");\n#endif /* CONFIG_EXAMPLE_EAP_METHOD_TLS */\n\nstatic void event_handler(void* arg, esp_event_base_t event_base, \n                                int32_t event_id, void* event_data)\n{\n    if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START) {\n        esp_wifi_connect();\n    } else if (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED) {\n        esp_wifi_connect();\n        xEventGroupClearBits(wifi_event_group, CONNECTED_BIT);\n    } else if (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP) {\n        xEventGroupSetBits(wifi_event_group, CONNECTED_BIT);\n    }\n}\n\nstatic void initialise_wifi(void)\n{\n#ifdef CONFIG_EXAMPLE_VALIDATE_SERVER_CERT\n    unsigned int ca_pem_bytes = ca_pem_end - ca_pem_start;\n#endif /* CONFIG_EXAMPLE_VALIDATE_SERVER_CERT */\n\n#ifdef CONFIG_EXAMPLE_EAP_METHOD_TLS\n    unsigned int client_crt_bytes = client_crt_end - client_crt_start;\n    unsigned int client_key_bytes = client_key_end - client_key_start;\n#endif /* CONFIG_EXAMPLE_EAP_METHOD_TLS */\n\n    ESP_ERROR_CHECK(esp_netif_init());\n    wifi_event_group = xEventGroupCreate();\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n    sta_netif = esp_netif_create_default_wifi_sta();\n    assert(sta_netif);\n\n    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n    ESP_ERROR_CHECK( esp_wifi_init(&amp;cfg) );\n    ESP_ERROR_CHECK( esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, &amp;event_handler, NULL) );\n    ESP_ERROR_CHECK( esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, &amp;event_handler, NULL) );\n    ESP_ERROR_CHECK( esp_wifi_set_storage(WIFI_STORAGE_RAM) );\n    wifi_config_t wifi_config = {\n        .sta = {\n            .ssid = EXAMPLE_WIFI_SSID,\n        },\n    };\n    ESP_LOGI(TAG, \"Setting WiFi configuration SSID %s...\", wifi_config.sta.ssid);\n    ESP_ERROR_CHECK( esp_wifi_set_mode(WIFI_MODE_STA) );\n    ESP_ERROR_CHECK( esp_wifi_set_config(ESP_IF_WIFI_STA, &amp;wifi_config) );\n    // ESP_ERROR_CHECK( esp_wifi_sta_wpa2_ent_set_identity((uint8_t *)EXAMPLE_EAP_ID, strlen(EXAMPLE_EAP_ID)) );\n\n#ifdef CONFIG_EXAMPLE_VALIDATE_SERVER_CERT\n    ESP_ERROR_CHECK( esp_wifi_sta_wpa2_ent_set_ca_cert(ca_pem_start, ca_pem_bytes) );\n#endif /* CONFIG_EXAMPLE_VALIDATE_SERVER_CERT */\n\n#ifdef CONFIG_EXAMPLE_EAP_METHOD_TLS\n    ESP_ERROR_CHECK( esp_wifi_sta_wpa2_ent_set_cert_key(client_crt_start, client_crt_bytes,\\\n            client_key_start, client_key_bytes, NULL, 0) );\n#endif /* CONFIG_EXAMPLE_EAP_METHOD_TLS */\n\n#if defined CONFIG_EXAMPLE_EAP_METHOD_PEAP || CONFIG_EXAMPLE_EAP_METHOD_TTLS\n    ESP_ERROR_CHECK( esp_wifi_sta_wpa2_ent_set_username((uint8_t *)EXAMPLE_EAP_USERNAME, strlen(EXAMPLE_EAP_USERNAME)) );\n    ESP_ERROR_CHECK( esp_wifi_sta_wpa2_ent_set_password((uint8_t *)EXAMPLE_EAP_PASSWORD, strlen(EXAMPLE_EAP_PASSWORD)) );\n#endif /* CONFIG_EXAMPLE_EAP_METHOD_PEAP || CONFIG_EXAMPLE_EAP_METHOD_TTLS */\n\n    ESP_ERROR_CHECK( esp_wifi_sta_wpa2_ent_enable() );\n    ESP_ERROR_CHECK( esp_wifi_start() );\n}\n\nstatic void wpa2_enterprise_example_task(void *pvParameters)\n{\n    esp_netif_ip_info_t ip;\n    memset(&amp;ip, 0, sizeof(esp_netif_ip_info_t));\n    vTaskDelay(2000 / portTICK_PERIOD_MS);\n\n    while (1) {\n        vTaskDelay(2000 / portTICK_PERIOD_MS);\n\n        if (esp_netif_get_ip_info(sta_netif, &amp;ip) == 0) {\n            ESP_LOGI(TAG, \"~~~~~~~~~~~\");\n            ESP_LOGI(TAG, \"IP:\"IPSTR, IP2STR(&amp;ip.ip));\n            ESP_LOGI(TAG, \"MASK:\"IPSTR, IP2STR(&amp;ip.netmask));\n            ESP_LOGI(TAG, \"GW:\"IPSTR, IP2STR(&amp;ip.gw));\n            ESP_LOGI(TAG, \"~~~~~~~~~~~\");\n        }\n    }\n}\n\nvoid app_main(void)\n{\n    ESP_ERROR_CHECK( nvs_flash_init() );\n    initialise_wifi();\n    xTaskCreate(&amp;wpa2_enterprise_example_task, \"wpa2_enterprise_example_task\", 4096, NULL, 5, NULL);\n}\n</code></pre> <p>\u6548\u679c\u5982\u56fe\u6240\u793a\uff1a</p> <p></p>"},{"location":"zh/COMMUNICATION/WIFI/wifi/#_4","title":"\u53c2\u8003\u94fe\u63a5","text":"<ol> <li>https://www.bilibili.com/video/BV1au411E7K1?p=7&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</li> <li>https://www.bilibili.com/video/BV1au411E7K1?p=8&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</li> <li>https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/wifi.html</li> </ol>"},{"location":"zh/FREERTOS/quickstart/#_1","title":"\u7b80\u4ecb","text":"<p>Info</p> <p>FreeRTOS \u662f\u4e00\u4e2a\u5c0f\u578b\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\uff0c\u5b83\u652f\u6301\u591a\u4efb\u52a1\u3001\u5b9a\u65f6\u5668\u3001\u4fe1\u53f7\u91cf\u3001\u961f\u5217\u3001\u4e92\u65a5\u9501\u7b49\u529f\u80fd\u3002FreeRTOS \u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u73b0\u5728\u7531Amazon Web Services\u7ef4\u62a4\u3002</p> <p>Warning</p> <p>\u539f\u751fFREERTOS\u548cESP-IDF\u4e2dFREERTOS\u662f\u4e0d\u540c\u7684\uff0cESP-IDF\u4e2d\u7684FREERTOS\u662f\u57fa\u4e8e\u539f\u751fFREERTOS\u7684\u4e8c\u6b21\u5f00\u53d1\u3002</p> <ol> <li>\u4f18\u5148\u7ea7\u95ee\u9898\uff0c\u591a\u6838\u60c5\u51b5\u5e76\u4e0d\u9002\u7528\uff0c\u56e0\u4e3a\u591a\u4e2a\u4efb\u52a1\u53ef\u540c\u65f6\u8fd0\u884c\u3002</li> <li>esp-idf\u81ea\u52a8\u521b\u5efa\u7a7a\u95f2\uff080\uff09\u3001\u5b9a\u65f6\u5668\uff081\uff09\u3001app_main\uff081\uff09\u3001IPC-\u591a\u6838\u534f\u8c03\uff0824\uff09\u3001ESP\u5b9a\u65f6\u5668-ESP\u5b9a\u65f6\u5668\u56de\u8c03\uff0822\uff09\u3002\u62ec\u53f7\u5185\u4e3a\u4f18\u5148\u7ea7\u3002</li> <li>esp-idf\u4e0d\u4f7f\u7528\u539f\u751fFreeRTOS\u7684\u5185\u5b58\u5806\u7ba1\u7406\u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u5806\u3002</li> <li>\u521b\u5efa\u4efb\u52a1\u4f7f\u7528xTaskCreatePinnedToCore()\u3002</li> <li>\u5220\u9664\u4efb\u52a1\u907f\u514d\u5220\u9664\u53e6\u5916\u4e00\u4e2a\u6838\u7684\u4efb\u52a1\u3002</li> <li>\u4e34\u754c\u533a\u4f7f\u7528\u81ea\u65cb\u9501\u786e\u4fdd\u540c\u6b65\u3002</li> <li>\u5982\u679c\u4efb\u52a1\u4e2d\u7528\u5230\u6d6e\u70b9\u8fd0\u7b97\uff0c\u5219\u521b\u5efa\u4efb\u52a1\u7684\u65f6\u5019\u5fc5\u987b\u6307\u5b9a\u5177\u4f53\u8fd0\u884c\u5728\u54ea\u4e2a\u6838\u4e0a\uff0c\u4e0d\u80fd\u7531\u7cfb\u7edf\u81ea\u52a8\u5b89\u6392\u3002</li> </ol> <p>\u603b\u7684\u6765\u8bf4\uff0c\u5efa\u8bae\u5982\u4e0b:</p> <p>1) \u7a0b\u5e8f\u5e94\u7528\u5f00\u53d1\u521b\u5efa\u4efb\u52a1\u6307\u5b9a\u5185\u6838\uff0c\u5efa\u8bae\u4e0d\u8981\u4f7f\u7528tskNO AFFINITY\u3002</p> <p>2) \u901a\u5e38\uff0c\u8d1f\u8d23\u5904\u7406\u65e0\u7ebf\u7f51\u7edc\u7684\u4efb\u52a1(\u4f8b\u5982\uff0cWiFi\u6216\u84dd\u7259)\u5c06\u88ab\u56fa\u5b9a\u5230CPUO(\u56e0\u6b64\u540d\u79f0PRO_CPU)\uff0c\u800c\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u5176\u4f59\u90e8\u5206\u7684\u4efb\u52a1\u5c06\u88ab\u56fa\u5b9a\u5230CPU1(\u56e0\u6b64\u540d\u79f0APP CPU)</p>"},{"location":"zh/FREERTOS/quickstart/#_2","title":"\u6838\u5fc3\u6982\u5ff5","text":"<p>without RTOS</p> <pre><code>while(1)\n{\n    task1();\n    task2();\n    task3();\n}\n</code></pre> <p>with RTOS</p> <pre><code>void task1(void *pvParameters)\n{\n    for(;;)\n    {\n        // task1 code\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    for(;;)\n    {\n        // task2 code\n    }\n}\n\nvoid task3(void *pvParameters)\n{\n    for(;;)\n    {\n        // task3 code\n    }\n}\n\nint main(void)\n{\n    xTaskCreate(task1, \"Task1\", 100, NULL, 1, NULL);\n    xTaskCreate(task2, \"Task2\", 100, NULL, 1, NULL);\n    xTaskCreate(task3, \"Task3\", 100, NULL, 1, NULL);\n    vTaskStartScheduler();\n    for(;;);\n}\n</code></pre> <p>Note</p> <p>\u4ece\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u6ca1\u6709RTOS\u7684\u60c5\u51b5\u4e0b\uff0c\u9762\u5bf9\u529f\u80fd\u5e9e\u6742\u7684\u9879\u76ee\uff0c\u4ee3\u7801\u4f1a\u53d8\u5f97\u975e\u5e38\u590d\u6742\uff0c\u800c\u4f7f\u7528RTOS\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4efb\u52a1\u5206\u89e3\u4e3a\u591a\u4e2a\u5b50\u4efb\u52a1\uff0c\u4f7f\u4ee3\u7801\u66f4\u52a0\u6e05\u6670\u3001\u6613\u4e8e\u7ef4\u62a4\u3002</p> <p>Note</p> <p>\u4efb\u52a1\u8fd0\u884c\u65f6\u95f4\u7247\u7684\u57fa\u672c\u5355\u4f4d\u662fTick\uff0cTick\u7684\u5468\u671f\u7531configTICK_RATE_HZ\u5b8f\u5b9a\u4e49\u51b3\u5b9a\uff0c\u5355\u4f4d\u662fHz\u3002</p>"},{"location":"zh/FREERTOS/quickstart/#_3","title":"\u4efb\u52a1","text":"<p>Info</p> <p>\u4f7f\u7528FREERTOS\u7684\u5b9e\u65f6\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u6784\u5efa\u6210\u4e00\u7ec4\u72ec\u7acb\u7684\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1\u5728\u81ea\u5df1\u7684\u4e0a\u4e0b\u6587\u4e2d\u8fd0\u884c\uff0c\u4e0d\u4f9d\u8d56\u4e8e\u7cfb\u7edf\u5185\u7684\u5176\u4ed6\u4efb\u52a1\u6216RTOS\u4efb\u52a1\u8c03\u5ea6\u5668\u672c\u8eab\u3002</p> <p>Note</p> <p>\u4efb\u52a1\u72b6\u6001\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a</p> <ul> <li> <p>\u8fd0\u884c\u6001\uff08Running\uff09</p> </li> <li> <p>\u5c31\u7eea\u6001\uff08Ready\uff09</p> </li> <li> <p>\u963b\u585e\u6001\uff08Blocked\uff09</p> </li> <li> <p>\u6302\u8d77\u6001\uff08Suspended\uff09</p> </li> </ul> <p>\u8fd0\u884c\u6001\uff08Running\uff09</p> <p>\u5f53\u4efb\u52a1\u5b9e\u9645\u6267\u884c\u7684\u65f6\u5019\uff0c\u5b83\u88ab\u79f0\u4e3a\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u3002\u5982\u679c\u8fd0\u884cRTOS\u7684\u5904\u7406\u5668\u53ea\u6709\u4e00\u4e2a\u5185\u6838\uff0c\u90a3\u4e48\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u3002</p> <p>\u5c31\u7eea\u6001\uff08Ready\uff09</p> <p>\u5f53\u4efb\u52a1\u5df2\u7ecf\u51c6\u5907\u597d\u8fd0\u884c\uff0c\u4f46\u662f\u7531\u4e8e\u5176\u4ed6\u4efb\u52a1\u6b63\u5728\u8fd0\u884c\uff0c\u6240\u4ee5\u5b83\u8fd8\u6ca1\u6709\u5f97\u5230\u6267\u884c\u7684\u673a\u4f1a\uff0c\u8fd9\u79cd\u72b6\u6001\u88ab\u79f0\u4e3a\u5c31\u7eea\u72b6\u6001\u3002</p> <p>\u963b\u585e\u6001\uff08Blocked\uff09</p> <p>\u5f53\u4efb\u52a1\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u800c\u4e0d\u80fd\u8fd0\u884c\u65f6\uff0c\u5b83\u88ab\u79f0\u4e3a\u963b\u585e\u72b6\u6001\u3002\u4efb\u52a1\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7b49\u5f85\u4e8b\u4ef6\u3001\u7b49\u5f85\u4fe1\u53f7\u91cf\u3001\u7b49\u5f85\u6d88\u606f\u961f\u5217\u7b49\u539f\u56e0\u800c\u88ab\u963b\u585e\u3002\u901a\u5e38\u4e00\u4e2a\u5904\u4e8e\u963b\u585e\u72b6\u6001\u7684\u4efb\u52a1\u90fd\u6709\u4e00\u4e2a\u8d85\u65f6\u65f6\u95f4\uff0c\u5f53\u8d85\u65f6\u65f6\u95f4\u5230\u8fbe\u65f6\uff0c\u4efb\u52a1\u4f1a\u88ab\u5524\u9192\u3002</p> <p>\u6302\u8d77\u6001\uff08Suspended\uff09</p> <p>\u4e0e\u963b\u585e\u72b6\u6001\u7684\u4efb\u52a1\u4e00\u6837\uff0c\u6302\u8d77\u72b6\u6001\u7684\u4efb\u52a1\u4e0d\u80fd\u8fdb\u5165\u8fd0\u884c\u72b6\u6001\u3002\u4f46\u662f\uff0c\u4e0e\u963b\u585e\u72b6\u6001\u7684\u4efb\u52a1\u4e0d\u540c\u7684\u662f\uff0c\u6302\u8d77\u72b6\u6001\u7684\u4efb\u52a1\u4e0d\u4f1a\u88ab\u5524\u9192\uff0c\u76f4\u5230\u5b83\u88ab\u663e\u5f0f\u5730\u6062\u590d\u3002\u53ea\u6709\u901a\u8fc7API\u547d\u4ee4\u660e\u786e\u6302\u8d77\u548c\u6062\u590d\uff0c\u4efb\u52a1\u624d\u4f1a\u8fdb\u5165\u6216\u8005\u9000\u51fa\u6302\u8d77\u72b6\u6001\u3002</p>"},{"location":"zh/FREERTOS/quickstart/#freertos_1","title":"FreeRTOS \u6982\u5ff5\u5bf9\u6bd4","text":"<p>\u4ee5\u4e0b\u662f FreeRTOS \u4e2d \u961f\u5217\u3001\u4fe1\u53f7\u91cf\u3001\u4e92\u65a5\u91cf\u3001\u4e8b\u4ef6\u7ec4 \u548c \u4efb\u52a1\u901a\u77e5 \u7684\u7b80\u660e\u5bf9\u6bd4\uff1a</p> \u7279\u6027 \u961f\u5217 \u4fe1\u53f7\u91cf \u4e92\u65a5\u91cf \u4e8b\u4ef6\u7ec4 \u4efb\u52a1\u901a\u77e5 \u4e3b\u8981\u7528\u9014 \u6570\u636e\u4f20\u8f93 \u540c\u6b65/\u8d44\u6e90\u7ba1\u7406 \u5171\u4eab\u8d44\u6e90\u4fdd\u62a4 \u591a\u4efb\u52a1\u540c\u6b65 \u8f7b\u91cf\u7ea7\u540c\u6b65 \u6570\u636e\u4f20\u9012 \u652f\u6301 \u4e0d\u652f\u6301 \u4e0d\u652f\u6301 \u4e0d\u652f\u6301 \u652f\u6301\uff08\u901a\u77e5\u503c\uff09 \u8d44\u6e90\u5360\u7528 \u8f83\u9ad8 \u4e2d\u7b49 \u4e2d\u7b49 \u4e2d\u7b49 \u6700\u4f4e \u4f18\u5148\u7ea7\u7ee7\u627f \u4e0d\u652f\u6301 \u4e0d\u652f\u6301 \u652f\u6301 \u4e0d\u652f\u6301 \u4e0d\u652f\u6301 \u9002\u7528\u573a\u666f \u4efb\u52a1\u95f4\u6d88\u606f\u4f20\u9012 \u4efb\u52a1\u540c\u6b65 \u5171\u4eab\u8d44\u6e90\u4fdd\u62a4 \u590d\u6742\u4e8b\u4ef6\u89e6\u53d1 \u8f7b\u91cf\u7ea7\u540c\u6b65"},{"location":"zh/FREERTOS/quickstart/#_4","title":"\u5173\u952e\u533a\u522b","text":"<ul> <li>\u961f\u5217\uff1a\u9002\u5408\u4f20\u9012\u6570\u636e\u3002</li> <li>\u4fe1\u53f7\u91cf\uff1a\u9002\u5408\u7b80\u5355\u540c\u6b65\u6216\u8d44\u6e90\u8ba1\u6570\u3002</li> <li>\u4e92\u65a5\u91cf\uff1a\u9002\u5408\u4fdd\u62a4\u5171\u4eab\u8d44\u6e90\u3002</li> <li>\u4e8b\u4ef6\u7ec4\uff1a\u9002\u5408\u591a\u4efb\u52a1\u540c\u6b65\u548c\u590d\u6742\u4e8b\u4ef6\u89e6\u53d1\u3002</li> <li>\u4efb\u52a1\u901a\u77e5\uff1a\u9002\u5408\u8f7b\u91cf\u7ea7\u540c\u6b65\uff0c\u6548\u7387\u6700\u9ad8\u3002</li> </ul>"},{"location":"zh/FREERTOS/EVENT-GROUP/event-group/","title":"\u4e8b\u4ef6\u7ec4 | \u9ad8\u6548\u7684\u4efb\u52a1\u540c\u6b65\u4e0e\u72b6\u6001\u7ba1\u7406","text":"<p>\u53c2\u8003\u51fa\u5904</p> <p>\u672c\u6587\u6863\u53c2\u8003\u4e86DURUOFU\u7684ESP32-\u6559\u7a0b\u3002 </p> <p>Note</p> <p>\u4e8b\u4ef6\u7ec4\u662f\u4e00\u79cd\u5b9e\u73b0\u4efb\u52a1\u95f4\u901a\u4fe1\u548c\u540c\u6b65\u7684\u673a\u5236\uff0c\u4e3b\u8981\u7528\u4e8e\u534f\u8c03\u591a\u4e2a\u4efb\u52a1\u6216\u4e2d\u65ad\u4e4b\u95f4\u7684\u6267\u884c\u3002</p> <p>\u4e8b\u4ef6\u4f4d\uff08\u4e8b\u4ef6\u6807\u5fd7\uff09\uff1a \u4e8b\u4ef6\u4f4d\u7528\u4e8e\u6307\u793a\u4e8b\u4ef6\u662f\u5426\u53d1\u751f\u3002\u4e8b\u4ef6\u4f4d\u901a\u5e38\u79f0\u4e3a\u4e8b\u4ef6\u6807\u5fd7\u3002\u4f8b\u5982\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\uff1a \u5b9a\u4e49\u4e00\u4e2a\u4f4d\uff08\u6216\u6807\u5fd7\uff09\uff0c \u8bbe\u7f6e\u4e3a 1 \u65f6\u8868\u793a\u201c\u5df2\u6536\u5230\u6d88\u606f\u5e76\u51c6\u5907\u597d\u5904\u7406\u201d\uff0c \u8bbe\u7f6e\u4e3a 0 \u65f6\u8868\u793a\u201c\u6ca1\u6709\u6d88\u606f\u7b49\u5f85\u5904\u7406\u201d\u3002 \u5b9a\u4e49\u4e00\u4e2a\u4f4d\uff08\u6216\u6807\u5fd7\uff09\uff0c \u8bbe\u7f6e\u4e3a 1 \u65f6\u8868\u793a\u201c\u5e94\u7528\u7a0b\u5e8f\u5df2\u5c06\u51c6\u5907\u53d1\u9001\u5230\u7f51\u7edc\u7684\u6d88\u606f\u6392\u961f\u201d\uff0c \u8bbe\u7f6e\u4e3a 0 \u65f6\u8868\u793a \u201c\u6ca1\u6709\u6d88\u606f\u9700\u8981\u6392\u961f\u51c6\u5907\u53d1\u9001\u5230\u7f51\u7edc\u201d\u3002 \u5b9a\u4e49\u4e00\u4e2a\u4f4d\uff08\u6216\u6807\u5fd7\uff09\uff0c \u8bbe\u7f6e\u4e3a 1 \u65f6\u8868\u793a\u201c\u9700\u8981\u5411\u7f51\u7edc\u53d1\u9001\u5fc3\u8df3\u6d88\u606f\u201d\uff0c \u8bbe\u7f6e\u4e3a 0 \u65f6\u8868\u793a\u201c\u4e0d\u9700\u8981\u5411\u7f51\u7edc\u53d1\u9001\u5fc3\u8df3\u6d88\u606f\u201d\u3002</p> <p>\u4e8b\u4ef6\u7ec4\uff1a \u4e8b\u4ef6\u7ec4\u5c31\u662f\u4e00\u7ec4\u4e8b\u4ef6\u4f4d\u3002\u4e8b\u4ef6\u7ec4\u4e2d\u7684\u4e8b\u4ef6\u4f4d\u901a\u8fc7\u4f4d\u7f16\u53f7\u6765\u5f15\u7528\u3002\u540c\u6837\uff0c\u4ee5\u4e0a\u9762\u5217\u51fa\u7684\u4e09\u4e2a\u4f8b\u5b50\u4e3a\u4f8b\uff1a \u4e8b\u4ef6\u6807\u5fd7\u7ec4\u4f4d\u7f16\u53f7\u4e3a 0 \u8868\u793a\u201c\u5df2\u6536\u5230\u6d88\u606f\u5e76\u51c6\u5907\u597d\u5904\u7406\u201d\u3002 \u4e8b\u4ef6\u6807\u5fd7\u7ec4\u4f4d\u7f16\u53f7\u4e3a 1 \u8868\u793a\u201c\u5e94\u7528\u7a0b\u5e8f\u5df2\u5c06\u51c6\u5907\u53d1\u9001\u5230\u7f51\u7edc\u7684\u6d88\u606f\u6392\u961f\u201d\u3002 \u4e8b\u4ef6\u6807\u5fd7\u7ec4\u4f4d\u7f16\u53f7\u4e3a 2 \u8868\u793a\u201c\u9700\u8981\u5411\u7f51\u7edc\u53d1\u9001\u5fc3\u8df3\u6d88\u606f\u201d\u3002</p> <p>\u4e8b\u4ef6\u7ec4\u548c\u4e8b\u4ef6\u4f4d\u6570\u636e\u7c7b\u578b\uff1a</p> <p>\u4e8b\u4ef6\u7ec4\u7531 EventGroupHandle_t \u7c7b\u578b\u7684\u53d8\u91cf\u5f15\u7528\u3002</p> <p>\u5982\u679c configUSE_16_BIT_TICKS \u8bbe\u4e3a 1\uff0c\u5219\u4e8b\u4ef6\u7ec4\u4e2d\u5b58\u50a8\u7684\u4f4d\uff08\u6216\u6807\u5fd7\uff09\u6570\u4e3a 8\uff1b \u5982\u679c configUSE_16_BIT_TICKS \u8bbe\u4e3a 0\uff0c\u5219\u4e3a 24\u3002 configUSE_16_BIT_TICKS \u7684\u503c\u53d6\u51b3\u4e8e \u4efb\u52a1\u5185\u90e8\u5b9e\u73b0\u4e2d\u7528\u4e8e\u7ebf\u7a0b\u672c\u5730\u5b58\u50a8\u7684\u6570\u636e\u7c7b\u578b\u3002</p> <p>(ESP-IDF\u4e2d\u9ed8\u8ba4\u4e3a24\u4f4d)</p> <p>\u4e8b\u4ef6\u7ec4\u4e2d\u7684\u6240\u6709\u4e8b\u4ef6\u4f4d\u90fd\u5b58\u50a8\u5728 EventBits_t \u7c7b\u578b\u7684\u5355\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\u53d8\u91cf\u4e2d\u3002\u4e8b\u4ef6\u4f4d 0 \u5b58\u50a8\u5728\u4f4d 0 \u4e2d\uff0c \u4e8b\u4ef6\u4f4d 1 \u5b58\u50a8\u5728\u4f4d1 \u4e2d\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002</p> <p>\u4e0b\u56fe\u8868\u793a\u4e00\u4e2a 24 \u4f4d\u4e8b\u4ef6\u7ec4\uff0c \u4f7f\u7528 3 \u4e2a\u4f4d\u6765\u4fdd\u5b58\u524d\u9762\u63cf\u8ff0\u7684 3 \u4e2a\u793a\u4f8b\u4e8b\u4ef6\u3002\u5728\u56fe\u7247\u4e2d\uff0c\u4ec5\u8bbe\u7f6e\u4e86\u4e8b\u4ef6\u4f4d 2\u3002\uff08\u5305\u542b 24 \u4e2a\u4e8b\u4ef6\u4f4d\u7684\u4e8b\u4ef6\u7ec4\uff0c\u5176\u4e2d\u53ea\u6709\u4e09\u4e2a\u5728\u4f7f\u7528\u4e2d\uff09</p> <p></p> <p>\u4e8b\u4ef6\u7ec4 RTOS API \u51fd\u6570</p> <p>\u63d0\u4f9b\u7684\u4e8b\u4ef6\u7ec4 API \u51fd\u6570\u5141\u8bb8\u4efb\u52a1\u5728\u4e8b\u4ef6\u7ec4\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u6216\u591a\u4e2a\u4e8b\u4ef6\u4f4d\uff0c \u6e05\u9664\u4e8b\u4ef6\u7ec4\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u4e8b\u4ef6\u4f4d\uff0c\u5e76\u6302\u8d77\uff08\u8fdb\u5165\u963b\u585e\u72b6\u6001, \u56e0\u6b64\u4efb\u52a1\u4e0d\u4f1a\u6d88\u8017\u4efb\u4f55\u5904\u7406\u65f6\u95f4\uff09\u4ee5\u7b49\u5f85\u4e8b\u4ef6\u7ec4\u4e2d\u4e00\u4e2a\u6216\u591a\u4e2a\u4e8b\u4ef6\u4f4d\u56fa\u5b9a\u4e0b\u6765\u3002</p> <p>\u4e8b\u4ef6\u7ec4\u4e5f\u53ef\u7528\u4e8e\u540c\u6b65\u4efb\u52a1\uff0c \u521b\u5efa\u901a\u5e38\u79f0\u4e3a\u201c\u96c6\u5408\u201d\u7684\u4efb\u52a1\u3002\u4efb\u52a1\u540c\u6b65\u70b9\u662f\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5728\u8be5\u4f4d\u7f6e\u4efb\u52a1\u5c06\u5728\u963b\u585e\u72b6\u6001\uff08\u4e0d\u6d88\u8017\u4efb\u4f55 CPU \u65f6\u95f4\uff09\u4e0b\u7b49\u5f85\uff0c\u76f4\u5230\u53c2\u4e0e\u540c\u6b65\u7684\u6240\u6709\u5176\u4ed6\u4efb\u52a1\u4e5f\u5230\u8fbe\u5176\u540c\u6b65\u70b9\u3002</p>"},{"location":"zh/FREERTOS/EVENT-GROUP/event-group/#1-api","title":"1. API\u8bf4\u660e\uff1a","text":"<p>\u4e8b\u4ef6\u7ec4\u64cd\u4f5c\u4e3b\u8981\u6d89\u53ca\u4ee5\u4e0b\u51e0\u4e2a API\uff1a</p> \u51fd\u6570\u540d \u529f\u80fd \u5907\u6ce8 xEventGroupCreate \u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u7ec4 \u8fd4\u56de\u4e00\u4e2a\u4e8b\u4ef6\u7ec4\u53e5\u67c4\uff0c\u4f9b\u540e\u7eed\u64cd\u4f5c\u4f7f\u7528 xEventGroupSetBits \u8bbe\u7f6e\u4e00\u4e2a\u6216\u591a\u4e2a\u4e8b\u4ef6\u6807\u5fd7 \u7528\u4e8e\u901a\u77e5\u5176\u4ed6\u4efb\u52a1\u67d0\u4e9b\u4e8b\u4ef6\u5df2\u53d1\u751f xEventGroupClearBits \u6e05\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u4e8b\u4ef6\u6807\u5fd7 \u7528\u4e8e\u590d\u4f4d\u4e8b\u4ef6\u6807\u5fd7\uff0c\u9632\u6b62\u91cd\u590d\u89e6\u53d1 xEventGroupWaitBits \u7b49\u5f85\u4e00\u4e2a\u6216\u591a\u4e2a\u4e8b\u4ef6\u6807\u5fd7\u7684\u8bbe\u7f6e\u72b6\u6001 \u4efb\u52a1\u53ef\u4ee5\u9009\u62e9\u963b\u585e\uff0c\u76f4\u5230\u6307\u5b9a\u4e8b\u4ef6\u53d1\u751f xEventGroupGetBits \u67e5\u8be2\u5f53\u524d\u4e8b\u4ef6\u7ec4\u7684\u72b6\u6001 \u8fd4\u56de\u4e8b\u4ef6\u7ec4\u4e2d\u6240\u6709\u4e8b\u4ef6\u6807\u5fd7\u7684\u5f53\u524d\u72b6\u6001 xEventGroupSync \u540c\u6b65\u591a\u4e2a\u4efb\u52a1 \u7528\u4e8e\u5b9e\u73b0\u591a\u4e2a\u4efb\u52a1\u5728\u540c\u4e00\u65f6\u523b\u8fbe\u5230\u67d0\u4e00\u540c\u6b65\u70b9\u540e\u7ee7\u7eed\u6267\u884c"},{"location":"zh/FREERTOS/EVENT-GROUP/event-group/#xeventgroupcreate","title":"xEventGroupCreate\uff1a\u521b\u5efa\u4e8b\u4ef6\u7ec4","text":"<p>\u539f\u578b\uff1a</p> <pre><code>EventGroupHandle_t xEventGroupCreate(void);\n</code></pre> <p>\u8fd4\u56de\u503c\uff1a\u6210\u529f\u65f6\u8fd4\u56de\u4e8b\u4ef6\u7ec4\u53e5\u67c4\uff1b\u5931\u8d25\u65f6\u8fd4\u56de NULL\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>EventGroupHandle_t xEventGroup;\nxEventGroup = xEventGroupCreate();\nif (xEventGroup == NULL) {\n    // \u521b\u5efa\u4e8b\u4ef6\u7ec4\u5931\u8d25\uff0c\u5904\u7406\u9519\u8bef\n}\n</code></pre>"},{"location":"zh/FREERTOS/EVENT-GROUP/event-group/#xeventgroupsetbits","title":"xEventGroupSetBits\uff1a\u8bbe\u7f6e\u4e8b\u4ef6\u6807\u5fd7","text":"<p>\u539f\u578b\uff1a <pre><code>EventBits_t xEventGroupSetBits(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet);\n</code></pre></p> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> <ul> <li> <p>xEventGroup\uff1a\u4e8b\u4ef6\u7ec4\u53e5\u67c4\u3002</p> </li> <li> <p>uxBitsToSet\uff1a\u9700\u8981\u8bbe\u7f6e\u7684\u4e8b\u4ef6\u6807\u5fd7\u4f4d\uff08\u6309\u4f4d\u8868\u793a\uff0c\u4f8b\u5982 0x01 \u8bbe\u7f6e\u7b2c 0 \u4f4d\uff09\u3002</p> </li> </ul> <p>\u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u4e8b\u4ef6\u7ec4\u5728\u8c03\u7528\u524d\u7684\u72b6\u6001\u3002</p>"},{"location":"zh/FREERTOS/EVENT-GROUP/event-group/#xeventgroupwaitbits","title":"xEventGroupWaitBits\uff1a\u7b49\u5f85\u4e8b\u4ef6\u6807\u5fd7","text":"<p>\u8bfb\u53d6 RTOS \u4e8b\u4ef6\u7ec4\u4e2d\u7684\u4f4d\uff0c\u9009\u62e9\u6027\u5730\u8fdb\u5165\u201c\u963b\u585e\u201d\u72b6\u6001\uff08\u5df2\u8bbe\u7f6e \u8d85\u65f6\u503c\uff09\u4ee5\u7b49\u5f85\u8bbe\u7f6e\u5355\u4e2a\u4f4d\u6216\u4e00\u7ec4\u4f4d\u3002\u65e0\u6cd5\u4ece\u4e2d\u65ad\u8c03\u7528\u6b64\u51fd\u6570\u3002</p> <p>\u539f\u578b\uff1a</p> <pre><code>EventBits_t xEventGroupWaitBits(\n    EventGroupHandle_t xEventGroup,\n    const EventBits_t uxBitsToWaitFor,\n    const BaseType_t xClearOnExit,\n    const BaseType_t xWaitForAllBits,\n    TickType_t xTicksToWait\n);\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> <ul> <li> <p>xEventGroup\uff1a\u4e8b\u4ef6\u7ec4\u53e5\u67c4\u3002</p> </li> <li> <p>uxBitsToWaitFor\uff1a\u9700\u8981\u7b49\u5f85\u7684\u4e8b\u4ef6\u6807\u5fd7\u4f4d\uff08\u6309\u4f4d\u8868\u793a\uff09\u3002</p> </li> <li> <p>xClearOnExit\uff1a\u662f\u5426\u5728\u9000\u51fa\u7b49\u5f85\u65f6\u6e05\u9664\u6307\u5b9a\u7684\u4e8b\u4ef6\u6807\u5fd7\u3002</p> </li> <li> <p>xWaitForAllBits\uff1a\u662f\u5426\u7b49\u5f85\u6240\u6709\u6307\u5b9a\u4e8b\u4ef6\u6807\u5fd7\u90fd\u88ab\u8bbe\u7f6e\uff0c\u8fd8\u662f\u4efb\u610f\u4e00\u4e2a\u5373\u53ef\u3002</p> </li> <li> <p>xTicksToWait\uff1a\u7b49\u5f85\u7684\u6700\u5927\u65f6\u95f4\uff08\u4ee5 Tick \u4e3a\u5355\u4f4d\uff0cportMAX_DELAY \u8868\u793a\u65e0\u9650\u7b49\u5f85\uff09\u3002</p> </li> </ul> <p>\u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u5f53\u524d\u6ee1\u8db3\u6761\u4ef6\u7684\u4e8b\u4ef6\u6807\u5fd7\u72b6\u6001\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>EventBits_t uxBits;\nuxBits = xEventGroupWaitBits(\n    xEventGroup,      // \u4e8b\u4ef6\u7ec4\u53e5\u67c4\n    0x03,             // \u7b49\u5f85\u7b2c 0 \u4f4d\u548c\u7b2c 1 \u4f4d\n    pdTRUE,           // \u9000\u51fa\u7b49\u5f85\u65f6\u6e05\u9664\u4e8b\u4ef6\u6807\u5fd7\n    pdFALSE,          // \u7b49\u5f85\u4efb\u610f\u4e00\u4e2a\u4e8b\u4ef6\n    portMAX_DELAY     // \u65e0\u9650\u7b49\u5f85\n);\n\nif (uxBits &amp; 0x01) {\n    // \u7b2c 0 \u4f4d\u4e8b\u4ef6\u53d1\u751f\n}\n\nif (uxBits &amp; 0x02) {\n    // \u7b2c 1 \u4f4d\u4e8b\u4ef6\u53d1\u751f\n}\n</code></pre>"},{"location":"zh/FREERTOS/EVENT-GROUP/event-group/#xeventgroupsync","title":"xEventGroupSync\uff1a\u540c\u6b65\u4efb\u52a1","text":"<p>\u4ee5\u539f\u5b50\u65b9\u5f0f\u8bbe\u7f6e RTOS \u4e8b\u4ef6\u7ec4\u4e2d\u7684\u4f4d\uff08\u6807\u5fd7\uff09\uff0c\u7136\u540e\u7b49\u5f85\u5728\u540c\u4e00\u4e8b\u4ef6\u7ec4\u4e2d\u8bbe\u7f6e\u4f4d\u7684\u7ec4\u5408\u3002\u6b64\u529f\u80fd\u901a\u5e38\u7528\u4e8e\u540c\u6b65\u591a\u4e2a\u4efb\u52a1\uff08\u901a\u5e38\u79f0\u4e3a\u4efb\u52a1\u96c6\u5408\uff09\uff0c\u5176\u4e2d\u6bcf\u4e2a\u4efb\u52a1\u5fc5\u987b\u7b49\u5f85\u5176\u4ed6\u4efb\u52a1\u5230\u8fbe\u540c\u6b65\u70b9\u540e\u624d\u80fd\u7ee7\u7eed\u3002</p> <p>\u539f\u578b\uff1a <pre><code>EventBits_t xEventGroupSync(\n    EventGroupHandle_t xEventGroup,\n    const EventBits_t uxBitsToSet,\n    const EventBits_t uxBitsToWaitFor,\n    TickType_t xTicksToWait\n);\n</code></pre> \u53c2\u6570\u8bf4\u660e\uff1a</p> <ul> <li> <p>xEventGroup\uff1a\u4e8b\u4ef6\u7ec4\u53e5\u67c4\u3002</p> </li> <li> <p>uxBitsToSet\uff1a\u5f53\u524d\u4efb\u52a1\u8bbe\u7f6e\u7684\u4e8b\u4ef6\u6807\u5fd7\u4f4d\u3002</p> </li> <li> <p>uxBitsToWaitFor\uff1a\u9700\u8981\u7b49\u5f85\u7684\u5176\u4ed6\u4efb\u52a1\u8bbe\u7f6e\u7684\u4e8b\u4ef6\u6807\u5fd7\u4f4d\u3002</p> </li> <li> <p>xTicksToWait\uff1a\u6700\u5927\u7b49\u5f85\u65f6\u95f4\u3002</p> </li> </ul> <p>\u8fd4\u56de\u503c\uff1a</p> <p>\u8fd4\u56de\u4e8b\u4ef6\u7ec4\u7684\u5f53\u524d\u72b6\u6001\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>xEventGroupSync(\n    xEventGroup,  // \u4e8b\u4ef6\u7ec4\u53e5\u67c4\n    0x01,         // \u5f53\u524d\u4efb\u52a1\u8bbe\u7f6e\u7b2c 0 \u4f4d\n    0x03,         // \u7b49\u5f85\u7b2c 0 \u4f4d\u548c\u7b2c 1 \u4f4d\u90fd\u88ab\u8bbe\u7f6e\n    portMAX_DELAY // \u65e0\u9650\u7b49\u5f85\n);\n</code></pre>"},{"location":"zh/FREERTOS/EVENT-GROUP/event-group/#2","title":"2 \u793a\u4f8b\u7a0b\u5e8f\uff1a","text":""},{"location":"zh/FREERTOS/EVENT-GROUP/event-group/#1","title":"1. \u4e8b\u4ef6\u7ec4\u7b49\u5f85","text":"<p>task1\u7b49\u5f85task2\u8bbe\u7f6e\u4e8b\u4ef6\u4f4d\uff0c\u7136\u540e\u6267\u884c\u7a0b\u5e8f\uff1a</p> <pre><code>// \u4e8b\u4ef6\u7ec4\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/event_groups.h\"\n\nstatic const char *TAG = \"main\";\n\nEventGroupHandle_t xCreatedEventGroup;\n\n#define BIT_0 (1 &lt;&lt; 0)\n#define BIT_4 (1 &lt;&lt; 4)\n\nvoid task1(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task1\u542f\u52a8!\");\n\n    while (1)\n    {\n        EventBits_t uxBits;\n        uxBits = xEventGroupWaitBits(\n            xCreatedEventGroup, /* The event group being tested. */\n            BIT_0 | BIT_4,      /* The bits within the event group to wait for. */\n            pdTRUE,             /* BIT_0 &amp; BIT_4 should be cleared before returning. */\n            pdFALSE,            /* Don't wait for both bits, either bit will do. */\n            portMAX_DELAY);     /* Wait a maximum of 100ms for either bit to be set. */\n\n        if ((uxBits &amp; (BIT_0 | BIT_4)) == (BIT_0 | BIT_4))\n        {\n            ESP_LOGI(TAG, \"BIT_0 \u548c BIT_4 \u90fd\u88ab\u8bbe\u7f6e\u4e86\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"BIT_0 \u548c BIT_4 \u6709\u4e00\u4e2a\u88ab\u8bbe\u7f6e\u4e86\");\n        }\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"task2\u542f\u52a8!\");\n    vTaskDelay(pdMS_TO_TICKS(1000));\n    while (1)\n    {\n        xEventGroupSetBits(xCreatedEventGroup, BIT_0);\n        ESP_LOGI(TAG, \"BIT_0 \u88ab\u8bbe\u7f6e\");\n        vTaskDelay(pdMS_TO_TICKS(3000));\n        xEventGroupSetBits(xCreatedEventGroup, BIT_4);\n        ESP_LOGI(TAG, \"BIT_4 \u88ab\u8bbe\u7f6e\");\n        vTaskDelay(pdMS_TO_TICKS(3000));\n        xEventGroupSetBits(xCreatedEventGroup, BIT_0 | BIT_4);\n        ESP_LOGI(TAG, \"BIT_0 \u548c BIT_4 \u90fd\u88ab\u8bbe\u7f6e\");\n        vTaskDelay(pdMS_TO_TICKS(3000));\n    }\n}\n\nvoid app_main(void)\n{\n\n    // \u521b\u5efa\u4e8b\u4ef6\u7ec4\n    xCreatedEventGroup = xEventGroupCreate();\n\n    if (xCreatedEventGroup == NULL)\n    {\n        ESP_LOGE(TAG, \"\u521b\u5efa\u4e8b\u4ef6\u7ec4\u5931\u8d25\");\n    }\n    else\n    {\n        xTaskCreate(task1, \"task1\", 1024 * 2, NULL, 1, NULL);\n        xTaskCreate(task2, \"task2\", 1024 * 2, NULL, 1, NULL);\n    }\n}\n</code></pre>"},{"location":"zh/FREERTOS/EVENT-GROUP/event-group/#2_1","title":"2. \u4e8b\u4ef6\u7ec4\u540c\u6b65","text":"<p>\u6bcf\u4e2a\u4efb\u52a1\u5728\u542f\u52a8\u540e\uff0c\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\uff0c\u7136\u540e\u8c03\u7528xEventGroupSync\u51fd\u6570\u8fdb\u884c\u4e8b\u4ef6\u540c\u6b65\uff0c\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u7684\u4e8b\u4ef6\u4f4d\u90fd\u88ab\u8bbe\u7f6e\u3002 <pre><code>// \u4e8b\u4ef6\u7ec4\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/event_groups.h\"\n\n/* Bits used by the three tasks. */\n#define TASK_0_BIT (1 &lt;&lt; 0)\n#define TASK_1_BIT (1 &lt;&lt; 1)\n#define TASK_2_BIT (1 &lt;&lt; 2)\n\n#define ALL_SYNC_BITS (TASK_0_BIT | TASK_1_BIT | TASK_2_BIT)\n\nstatic const char *TAG = \"main\";\nEventGroupHandle_t xEventBits;\n\n\nvoid task0(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task0\u542f\u52a8!\");\n\n    while (1)\n    {\n        vTaskDelay(pdMS_TO_TICKS(3000));\n        ESP_LOGI(TAG, \"task0: \u4efb\u52a1\u540c\u6b65\u5f00\u59cb\");\n        // \u4e8b\u4ef6\u540c\u6b65\n        xEventGroupSync(\n            xEventBits,     /* The event group being tested. */\n            TASK_0_BIT,     /* The bits within the event group to wait for. */\n            ALL_SYNC_BITS,  /* The bits within the event group to wait for. */\n            portMAX_DELAY); /* Wait a maximum of 100ms for either bit to be set. */\n\n    ESP_LOGI(TAG, \"task0: \u4efb\u52a1\u540c\u6b65\u5b8c\u6210\");\n    vTaskDelay(pdMS_TO_TICKS(3000));\n    }\n}\nvoid task1(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task1\u542f\u52a8!\");\n\n    while (1)\n    {\n        vTaskDelay(pdMS_TO_TICKS(4000));\n        ESP_LOGI(TAG, \"task1: \u4efb\u52a1\u540c\u6b65\u5f00\u59cb\");\n\n        // \u4e8b\u4ef6\u540c\u6b65\n        xEventGroupSync(\n            xEventBits,     /* The event group being tested. */\n            TASK_1_BIT,     /* The bits within the event group to wait for. */\n            ALL_SYNC_BITS,  /* The bits within the event group to wait for. */\n            portMAX_DELAY); /* Wait a maximum of 100ms for either bit to be set. */\n\n        ESP_LOGI(TAG, \"task1: \u4efb\u52a1\u540c\u6b65\u5b8c\u6210\");\n        vTaskDelay(pdMS_TO_TICKS(3000));\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task2\u542f\u52a8!\");\n\n    while (1)\n    {\n        vTaskDelay(pdMS_TO_TICKS(5000));\n        ESP_LOGI(TAG, \"task2: \u4efb\u52a1\u540c\u6b65\u5f00\u59cb\");\n        // \u4e8b\u4ef6\u540c\u6b65\n        xEventGroupSync(\n            xEventBits,     /* The event group being tested. */\n            TASK_2_BIT,     /* The bits within the event group to wait for. */\n            ALL_SYNC_BITS,  /* The bits within the event group to wait for. */\n            portMAX_DELAY); /* Wait a maximum of 100ms for either bit to be set. */\n\n        ESP_LOGI(TAG, \"task2: \u4efb\u52a1\u540c\u6b65\u5b8c\u6210\");\n        vTaskDelay(pdMS_TO_TICKS(3000));\n    }\n}\n\n\nvoid app_main(void)\n{\n    // \u521b\u5efa\u4e8b\u4ef6\u7ec4\n    xEventBits = xEventGroupCreate();\n\n    if (xEventBits == NULL)\n    {\n        ESP_LOGE(TAG, \"\u521b\u5efa\u4e8b\u4ef6\u7ec4\u5931\u8d25\");\n    }\n    else\n    {\n        xTaskCreate(task0, \"task0\", 1024 * 2, NULL, 1, NULL);\n        xTaskCreate(task1, \"task1\", 1024 * 2, NULL, 1, NULL);\n        xTaskCreate(task2, \"task2\", 1024 * 2, NULL, 1, NULL);\n    }\n}\n</code></pre></p> <p>\u4efb\u52a1\u88ab\u5524\u9192</p> <p>\u4efb\u52a1\u5728\u8c03\u7528xEventGroupWaitBits\u51fd\u6570\u7b49\u5f85\u4e8b\u4ef6\u4f4d\u65f6\uff0c\u5982\u679c\u4e8b\u4ef6\u4f4d\u5df2\u7ecf\u88ab\u8bbe\u7f6e\uff0c\u4efb\u52a1\u4f1a\u88ab\u5524\u9192\uff0c\u4ece\u963b\u585e\u72b6\u6001\u53d8\u6210\u5c31\u7eea\u72b6\u6001\uff0c\u7b49\u5f85\u8c03\u5ea6\u5668\u8c03\u5ea6\u3002</p>"},{"location":"zh/FREERTOS/MULTITASK/multitask/","title":"FREERTOS \u591a\u4efb\u52a1\u7ba1\u7406 | \u5b9e\u73b0\u4efb\u52a1\u5e76\u884c\u5904\u7406","text":"<p>\u53c2\u8003\u51fa\u5904</p> <p>\u672c\u6587\u6863\u53c2\u8003\u4e86DURUOFU\u7684ESP32-\u6559\u7a0b\u3002 </p> <p>\u6ce8\u610f\uff1a\u4e0e\u539f\u751f FreeRTOS \u4e0d\u540c\uff0c\u5728 ESP-IDF \u4e2d\u4f7f\u7528 FreeRTOS \u7684\u7528\u6237 \\\u6c38\u8fdc\u4e0d\u5e94\u8c03\u7528 <code>vTaskStartScheduler()</code> \u548c <code>vTaskEndScheduler()</code>\u3002\u76f8\u53cd\uff0cESP-IDF \u4f1a\u81ea\u52a8\u542f\u52a8 FreeRTOS\u3002\u7528\u6237\u5fc5\u987b\u5b9a\u4e49\u4e00\u4e2a <code>void app_main(void)</code> \u51fd\u6570\u4f5c\u4e3a\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\uff0c\u5e76\u5728 ESP-IDF \u542f\u52a8\u65f6\u88ab\u81ea\u52a8\u8c03\u7528\u3002</p> <p>\u901a\u5e38\uff0c\u7528\u6237\u4f1a\u4ece <code>app_main</code> \u4e2d\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u4efb\u52a1\u3002<code>app_main</code> \u51fd\u6570\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u8fd4\u56de\uff08\u5e94\u7528\u7ec8\u6b62\u524d\uff09\u3002<code>app_main</code> \u51fd\u6570\u7531 main \u4efb\u52a1\u8c03\u7528\u3002</p>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#_1","title":"\u4efb\u52a1\u521b\u5efa","text":"<p>FreeRTOS \u63d0\u4f9b\u4e86\u4e24\u79cd\u521b\u5efa\u4efb\u52a1\u7684\u65b9\u6cd5\uff1a <code>xTaskCreate</code> \u548c <code>xTaskCreateStatic</code>\u3002</p>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#xtaskcreate","title":"xTaskCreate : \u52a8\u6001\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1","text":"<p>\u5f53\u9700\u8981\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5206\u914d\u5185\u5b58\u6765\u521b\u5efa\u4efb\u52a1\u65f6\u4f7f\u7528\uff0c\u4e5f\u5c31\u662f\u4e00\u822c\u7684\u6b63\u5e38\u60c5\u51b5\u3002</p> <p>\u539f\u578b\uff1a</p> <pre><code>static inline BaseType_t xTaskCreate(TaskFunction_t pxTaskCode, \n                                     const char *const pcName, \n                                     const configSTACK_DEPTH_TYPE usStackDepth, \n                                     void *const pvParameters, \n                                     UBaseType_t uxPriority, \n                                     TaskHandle_t *const pxCreatedTask)\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2a\u65b0\u4efb\u52a1\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u51c6\u5907\u8fd0\u884c\u7684\u4efb\u52a1\u5217\u8868\u4e2d\u3002\u5728 FreeRTOS \u5b9e\u73b0\u4e2d\uff0c\u4efb\u52a1\u4f7f\u7528\u4e24\u5757\u5185\u5b58\u3002\u7b2c\u4e00\u4e2a\u5757\u7528\u4e8e\u4fdd\u5b58\u4efb\u52a1\u7684\u6570\u636e\u7ed3\u6784\u3002\u4efb\u52a1\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u5757\u4f5c\u4e3a\u5176\u5806\u6808\u3002\u5982\u679c\u4f7f\u7528 xTaskCreate () \u521b\u5efa\u4efb\u52a1\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5185\u5b58\u5757\u5c06\u5728 xTaskCreate () \u51fd\u6570\u4e2d\u81ea\u52a8\u5206\u914d\u3002</p> <p>\u53c2\u6570\uff1a</p> <ul> <li><code>pxTaskCode</code>\uff1a\u6307\u5411\u4efb\u52a1\u5165\u53e3\u51fd\u6570\u7684\u6307\u9488\uff0c\u4efb\u52a1\u5fc5\u987b\u8bbe\u8ba1\u4e3a\u6c38\u4e0d\u8fd4\u56de\uff08\u5373\u4ee5\u65e0\u9650\u5faa\u73af\u5f62\u5f0f\u5b9e\u73b0\uff09\u3002</li> <li><code>pcName</code>\uff1a\u4efb\u52a1\u7684\u63cf\u8ff0\u6027\u540d\u79f0\uff0c\u4e3b\u8981\u7528\u4e8e\u8c03\u8bd5\u65b9\u4fbf\uff0c\u6700\u5927\u957f\u5ea6\u7531 <code>configMAX_TASK_NAME_LEN</code> \u5b9a\u4e49\uff08\u9ed8\u8ba4 16\uff09\u3002</li> <li><code>usStackDepth</code>\uff1a\u4efb\u52a1\u6808\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002\u6ce8\u610f\uff0c\u8fd9\u4e0e\u539f\u751f FreeRTOS \u7684\u9ed8\u8ba4\u5355\u4f4d\u4e0d\u540c\u3002</li> <li><code>pvParameters</code>\uff1a\u4f20\u9012\u7ed9\u4efb\u52a1\u51fd\u6570\u7684\u53c2\u6570\u6307\u9488\uff08\u7c7b\u578b\u4e3avoid\u6307\u9488\uff09\u3002</li> <li><code>uxPriority</code>\uff1a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\uff08\u6570\u5b57\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8,\u6700\u4f4e\u4e3a1\uff09\u3002\u652f\u6301 MPU \u7684\u7cfb\u7edf\u4e2d\uff0c\u901a\u8fc7\u8bbe\u7f6e <code>portPRIVILEGE_BIT</code> \u4f4d\u53ef\u521b\u5efa\u7279\u6743\u4efb\u52a1\uff08\u4f8b\u5982 <code>(2 | portPRIVILEGE_BIT)</code> \u8868\u793a\u4f18\u5148\u7ea7\u4e3a 2 \u7684\u7279\u6743\u4efb\u52a1\uff09\u3002</li> <li><code>pxCreatedTask</code>\uff1a\u7528\u4e8e\u5b58\u50a8\u4efb\u52a1\u53e5\u67c4\uff08\u53ef\u9009\uff09\uff0c\u901a\u8fc7\u53e5\u67c4\u53ef\u4ee5\u5f15\u7528\u521b\u5efa\u7684\u4efb\u52a1\u3002</li> </ul> <p>\u8fd4\u56de\u503c:</p> <ul> <li><code>pdPASS</code>\uff1a\u4efb\u52a1\u521b\u5efa\u6210\u529f\u3002</li> <li><code>errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY</code>\uff1a\u4efb\u52a1\u521b\u5efa\u5931\u8d25\uff08\u5185\u5b58\u4e0d\u8db3\uff09</li> </ul>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#xtaskcreatestatic","title":"xTaskCreateStatic\uff1a\u9759\u6001\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1","text":"<p>\u624b\u52a8\u63d0\u4f9b\u4efb\u52a1\u6808\u548c\u4efb\u52a1\u63a7\u5236\u5757\uff08TCB\uff09\uff0c\u907f\u514d\u52a8\u6001\u5185\u5b58\u5206\u914d\u3002</p> <p>\u539f\u578b\uff1a</p> <pre><code>TaskHandle_t xTaskCreateStatic(\n    TaskFunction_t pvTaskCode,\n    const char * const pcName,\n    const uint32_t ulStackDepth,\n    void * const pvParameters,\n    UBaseType_t uxPriority,\n    StackType_t * const puxStackBuffer,\n    StaticTask_t * const pxTaskBuffer\n);\n</code></pre> <p>\u53c2\u6570\uff1a</p> <ul> <li><code>pvTaskCode</code>\uff1a\u4efb\u52a1\u51fd\u6570\u7684\u5165\u53e3\u5730\u5740\u3002</li> <li><code>pcName</code>\uff1a\u4efb\u52a1\u540d\u79f0\uff08\u7528\u4e8e\u8c03\u8bd5\uff09\u3002</li> <li><code>usStackDepth</code>\uff1a\u4efb\u52a1\u6808\u5927\u5c0f\uff08\u4ee5\u5b57\u4e3a\u5355\u4f4d\uff09\u3002</li> <li><code>pvParameters</code>\uff1a\u4f20\u9012\u7ed9\u4efb\u52a1\u51fd\u6570\u7684\u53c2\u6570\u3002</li> <li><code>uxPriority</code>\uff1a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002</li> <li><code>puxStackBuffer</code>\uff1a\u6307\u5411\u4efb\u52a1\u6808\u7f13\u51b2\u533a\u7684\u6307\u9488\uff08\u7531\u7528\u6237\u63d0\u4f9b\uff09\u3002</li> <li><code>pxTaskBuffer</code>\uff1a\u6307\u5411\u4efb\u52a1\u63a7\u5236\u5757\u7684\u7f13\u51b2\u533a\uff08\u7531\u7528\u6237\u63d0\u4f9b\uff09\u3002</li> </ul> <p>\u8fd4\u56de\u503c:</p> <ul> <li><code>pdPASS</code>\uff1a\u4efb\u52a1\u521b\u5efa\u6210\u529f\u3002</li> <li><code>errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY</code>\uff1a\u4efb\u52a1\u521b\u5efa\u5931\u8d25\uff08\u5185\u5b58\u4e0d\u8db3\uff09</li> </ul>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#_2","title":"\u4ee3\u7801\u793a\u4f8b","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\nstatic const char *TAG = \"main\";\n\n// Task function\nvoid myTask(void *pvParameters)\n{\n    for (;;)\n    {\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n        ESP_LOGI(TAG, \"myTask\");\n    }\n}\n\nvoid app_main(void)\n{\n    // Create a FreeRTOS task\n    // Parameter description:\n    // Task entry function: myTask\n    // Task name: \"myTask\", used for identifying the task during debugging\n    // 3. Task stack size: 2048 bytes (allocate appropriately to avoid stack overflow)\n    // 4. Task parameters: NULL (no parameters passed)\n    // 5. Task priority: 1 (lower priority, idle task has priority 0)\n    // 6. Task handle: NULL (no need to save the task handle)\n    xTaskCreate(myTask, \"myTask\", 2048, NULL, 1, NULL);\n}\n</code></pre>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#_3","title":"\u4efb\u52a1\u5220\u9664","text":"<p>\u4efb\u52a1\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 <code>vTaskDelete</code> \u51fd\u6570\u5220\u9664\u81ea\u8eab\u6216\u5176\u4ed6\u4efb\u52a1\u3002</p>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#vtaskdelete","title":"vTaskDelete\uff1a\u5220\u9664\u4e00\u4e2a\u4efb\u52a1","text":"<p>\u5f53\u4efb\u52a1\u5b8c\u6210\u5176\u529f\u80fd\u540e\uff0c\u9700\u8981\u91ca\u653e\u8d44\u6e90\uff0c\u6216\u5f53\u7cfb\u7edf\u9700\u8981\u52a8\u6001\u8c03\u6574\u4efb\u52a1\u65f6\u4f7f\u7528 \u6ce8\u610f\uff1a\u8c03\u7528\u540e\uff0c\u4efb\u52a1\u8fdb\u5165\u5220\u9664 \u72b6\u6001\uff0c\u4f46\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u9700\u8981\u7531 FreeRTOS \u81ea\u52a8\u91ca\u653e\u3002</p> <p>\u539f\u578b\uff1a</p> <pre><code>void vTaskDelete( TaskHandle_t xTask );\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> <ul> <li>xTask\uff1a\u8981\u5220\u9664\u7684\u4efb\u52a1\u53e5\u67c4\u3002\u5982\u679c\u4f20\u9012 NULL\uff0c\u5219\u5220\u9664\u5f53\u524d\u4efb\u52a1\u3002</li> </ul>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#_4","title":"\u5220\u9664\u522b\u4eba","text":"<pre><code>// Delete other task\n\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\nstatic const char *TAG = \"main\";\n\n// Task function\nvoid myTask(void *pvParameters)\n{\n    for (;;)\n    {\n        vTaskDelay(500 / portTICK_PERIOD_MS);\n        ESP_LOGI(TAG, \"myTask\");\n    }\n}\n\nvoid app_main(void)\n{\n    // Task handle\n    TaskHandle_t taskHandle = NULL;\n    // Create a FreeRTOS task\n    xTaskCreate(myTask, \"myTask\", 2048, NULL, 1, &amp;taskHandle);\n\n    // Delay for 2 seconds\n    vTaskDelay(2000 / portTICK_PERIOD_MS);\n\n    // Delete the task\n    if (taskHandle != NULL)\n    {\n        vTaskDelete(taskHandle);\n    }\n}\n</code></pre>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#_5","title":"\u81ea\u6211\u5220\u9664","text":"<pre><code>// Delete itself\n\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\nstatic const char *TAG = \"main\";\n\n// Task function\nvoid myTask(void *pvParameters)\n{\n    // Delay for 1 second\n    vTaskDelay(1000 / portTICK_PERIOD_MS);\n    ESP_LOGI(TAG, \"myTask:1\");\n\n    // Delay for another 1 second\n    vTaskDelay(1000 / portTICK_PERIOD_MS);\n    ESP_LOGI(TAG, \"myTask:2\");\n\n    // Delay for another 1 second\n    vTaskDelay(1000 / portTICK_PERIOD_MS);\n    ESP_LOGI(TAG, \"myTask:3\");\n\n    // Delete the task (if NULL is passed, the current task is deleted)\n    vTaskDelete(NULL);\n}\n\nvoid app_main(void)\n{\n    // Task handle\n    TaskHandle_t taskHandle = NULL;\n    // Create a FreeRTOS task\n    xTaskCreate(myTask, \"myTask\", 2048, NULL, 1, &amp;taskHandle);\n}\n</code></pre>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#_6","title":"\u4efb\u52a1\u521b\u5efa\u65f6\u4f20\u9012\u53c2\u6570","text":""},{"location":"zh/FREERTOS/MULTITASK/multitask/#_7","title":"\u4ecb\u7ecd","text":"<p>\u5728 FreeRTOS \u4e2d\uff0c\u4efb\u52a1\u51fd\u6570\u7684\u53c2\u6570\u901a\u8fc7\u521b\u5efa\u4efb\u52a1\u65f6\u7684 pvParameters \u6307\u9488\u4f20\u9012\u3002pvParameters \u662f\u4e00\u4e2a void * \u7c7b\u578b\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u4f20\u9012\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\uff08\u6574\u578b\u3001\u6570\u7ec4\u3001\u7ed3\u6784\u4f53\u6216\u5b57\u7b26\u4e32\u7b49\uff09\u3002**\u4efb\u52a1\u63a5\u6536\u5230\u53c2\u6570\u540e\uff0c\u9700\u8981\u5c06\u5176\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u6570\u636e\u7c7b\u578b\uff0c**\u4ee5\u4fbf\u6b63\u786e\u4f7f\u7528\u3002</p>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#_8","title":"\u4ee3\u7801\u793a\u4f8b","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\nstatic const char *TAG = \"main\";\n\n// Define a structure to hold an integer and an array\ntypedef struct\n{\n    int Int;\n    int Array[3];\n} MyStruct;\n\n// Task function 1: Accepts an integer parameter\nvoid Task_1(void *pvParameters)\n{\n    int *pInt = (int *)pvParameters;\n    ESP_LOGI(TAG, \"Received integer parameter: %d\", *pInt);\n    vTaskDelete(NULL); // Delete the task after execution\n}\n\n// Task function 2: Accepts an array parameter\nvoid Task_2(void *pvParameters)\n{\n    int *pArray = (int *)pvParameters;\n    ESP_LOGI(TAG, \"Received array parameters: %d %d %d\", *pArray, *(pArray + 1), *(pArray + 2));\n    vTaskDelete(NULL); // Delete the task after execution\n}\n\n// Task function 3: Accepts a structure parameter\nvoid Task_3(void *pvParameters)\n{\n    MyStruct *pStruct = (MyStruct *)pvParameters;\n    ESP_LOGI(TAG, \"Received structure parameters: %d %d %d %d\", pStruct-&gt;Int, pStruct-&gt;Array[0], pStruct-&gt;Array[1], pStruct-&gt;Array[2]);\n    vTaskDelete(NULL); // Delete the task after execution\n}\n\n// Task function 4: Accepts a string parameter\nvoid Task_4(void *pvParameters)\n{\n    char *pChar = (char *)pvParameters;\n    ESP_LOGI(TAG, \"Received string parameter: %s\", pChar);\n    vTaskDelete(NULL); // Delete the task after execution\n}\n\n// Global parameters to be passed to tasks\nint Parameters_1 = 1;\nint Parameters_2[3] = {1, 2, 3};\nMyStruct Parameters_3 = {1, {1, 2, 3}};\nstatic const char *Parameters_4 = \"Hello World!\";\n\nvoid app_main(void)\n{\n    // Create Task 1 and pass an integer parameter\n    xTaskCreate(Task_1, \"Task_1\", 2048, (void *)&amp;Parameters_1, 1, NULL);\n\n    // Create Task 2 and pass an array parameter\n    xTaskCreate(Task_2, \"Task_2\", 2048, (void *)&amp;Parameters_2, 1, NULL);\n\n    // Create Task 3 and pass a structure parameter\n    xTaskCreate(Task_3, \"Task_3\", 3048, (void *)&amp;Parameters_3, 1, NULL);\n\n    // Create Task 4 and pass a string parameter (note: no address-of operator &amp; is used)\n    xTaskCreate(Task_4, \"Task_4\", 3048, (void *)Parameters_4, 1, NULL);\n}\n</code></pre>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#_9","title":"\u4efb\u52a1\u4f18\u5148\u7ea7","text":"<p>FreeRTOS \u4e2d\u6bcf\u4e2a\u4efb\u52a1\u90fd\u6709\u4e00\u4e2a\u4f18\u5148\u7ea7\uff0c\u4f18\u5148\u7ea7\u51b3\u5b9a\u4e86\u4efb\u52a1\u7684\u6267\u884c\u987a\u5e8f\u3002\u4f18\u5148\u7ea7\u6570\u503c\u8f83\u5927\u7684\u4efb\u52a1\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\uff0c\u4f1a\u5728\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u4e4b\u524d\u88ab\u8c03\u5ea6\u6267\u884c\u3002\u5f53\u591a\u4e2a\u4efb\u52a1\u5177\u6709\u76f8\u540c\u4f18\u5148\u7ea7\u65f6\uff0c\u8c03\u5ea6\u5668\u4f1a\u4f7f\u7528\u65f6\u95f4\u7247\u8f6e\u8f6c\u673a\u5236\u5728\u8fd9\u4e9b\u4efb\u52a1\u4e4b\u95f4\u5206\u914d CPU \u65f6\u95f4\u3002</p> <p>\u5173\u4e8e\u4efb\u52a1\u4f18\u5148\u7ea7\u53ef\u53c2\u8003\u6587\u6863\uff1a\u4efb\u52a1\u4f18\u5148\u7ea7\uff0c\u6587\u6863\u4e2d\u63d0\u5230\uff1a</p> <p>\u6bcf\u4e2a\u4efb\u52a1\u5747\u88ab\u5206\u914d\u4e86\u4ece 0 \u5230 <code>( configMAX_PRIORITIES - 1 )</code> \u7684\u4f18\u5148\u7ea7\uff0c\u5176\u4e2d <code>configMAX_PRIORITIES</code> \u5b9a\u4e49\u4e3a FreeRTOSConfig.h\u3002</p> <p>\u5728ESP-IDF\u4e2dconfigMAX_PRIORITIES\u7684\u503c\u4e3a25\uff0c\u6240\u4ee5\u4efb\u52a1\u4f18\u5148\u7ea7\u4e3a0-24.</p> <p>\u5982\u679c\u6211\u4eec\u521b\u5efa\u4efb\u52a1\u65f6\u8bbe\u5b9a\u4f18\u5148\u7ea7\u4e3a25</p> <pre><code>xTaskCreate(Task_1, \"Task_1\", 2048, NULL, 25, &amp;taskHandle);\n</code></pre> <p>\u5219\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u4f18\u5148\u7ea7\u8d85\u51fa\u4e86\u8303\u56f4\u3002</p> <p>\u4efb\u52a1\u4f18\u5148\u7ea7\u6d89\u53ca\u5230<code>uxTaskPriorityGet</code>\u548c<code>vTaskPrioritySet</code>\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u4e8e\u83b7\u53d6\u548c\u8bbe\u7f6e\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002</p>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#uxtaskpriorityget","title":"uxTaskPriorityGet\uff1a\u83b7\u53d6\u4efb\u52a1\u7684\u4f18\u5148\u7ea7","text":"<p>\u8be5\u51fd\u6570\u7528\u4e8e\u83b7\u53d6\u6307\u5b9a\u4efb\u52a1\u7684\u5f53\u524d\u4f18\u5148\u7ea7\u3002\u5982\u679c\u4efb\u52a1\u53e5\u67c4\u4e3a <code>NULL</code>\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002 \u539f\u578b\uff1a</p> <pre><code>UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask );\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a - xTask\uff1a\u4efb\u52a1\u53e5\u67c4\u3002\u5982\u679c\u4e3a NULL\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002</p> <p>\u8fd4\u56de\u503c\uff1a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002</p>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#vtaskpriorityset","title":"vTaskPrioritySet\uff1a\u8bbe\u7f6e\u4efb\u52a1\u7684\u4f18\u5148\u7ea7","text":"<p>\u8be5\u51fd\u6570\u7528\u4e8e\u8bbe\u7f6e\u6307\u5b9a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002\u5982\u679c\u4efb\u52a1\u53e5\u67c4\u4e3a NULL\uff0c\u5219\u8bbe\u7f6e\u5f53\u524d\u4efb\u52a1\u7684\u4f18\u5148\u7ea7.</p> <p>\u539f\u578b\uff1a</p> <pre><code>void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxPriority );\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> <ul> <li>xTask\uff1a\u4efb\u52a1\u53e5\u67c4\u3002\u5982\u679c\u4e3a NULL\uff0c\u5219\u8bbe\u7f6e\u5f53\u524d\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002</li> <li>uxPriority\uff1a\u8981\u8bbe\u7f6e\u7684\u4f18\u5148\u7ea7\u503c\u3002</li> </ul>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#_10","title":"\u4ee3\u7801\u793a\u4f8b","text":"<pre><code>void app_main(void)\n{\n    UBaseType_t taskPriority_1 = 0;\n    UBaseType_t taskPriority_2 = 0;\n    TaskHandle_t taskHandle_1 = NULL;\n    TaskHandle_t taskHandle_2 = NULL;\n\n    xTaskCreate(Task_1, \"Task_1\", 2048, NULL, 12, &amp;taskHandle_1);\n    taskPriority_1 = uxTaskPriorityGet(taskHandle_1);\n    ESP_LOGI(TAG, \"Task_1 Priority\uff1a%d\", taskPriority_1);\n\n    xTaskCreate(Task_2, \"Task_1\", 2048, NULL, 12, &amp;taskHandle_2);\n    taskPriority_2 = uxTaskPriorityGet(taskHandle_2);\n    ESP_LOGI(TAG, \"Task_1 Priority\uff1a%d\", taskPriority_2);\n}\n</code></pre>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#_11","title":"\u4efb\u52a1\u6302\u8d77\u548c\u6062\u590d","text":"<p>FreeRTOS \u4efb\u52a1\u6302\u8d77\u662f\u6307\u6682\u505c\u4efb\u52a1\u7684\u6267\u884c\uff0c\u76f4\u5230\u901a\u8fc7\u663e\u5f0f\u6062\u590d\u64cd\u4f5c\u518d\u6b21\u542f\u52a8\u4efb\u52a1\u3002\u6302\u8d77\u64cd\u4f5c\u4e0d\u4f1a\u5f71\u54cd\u4efb\u52a1\u6240\u5360\u7528\u7684\u8d44\u6e90\uff0c\u4ec5\u662f\u6682\u505c\u4efb\u52a1\u8c03\u5ea6\u3002\u8fd9\u90e8\u5206\u6d89\u53ca\u5230<code>vTaskSuspend</code>\u548c<code>vTaskResume</code>\u4e24\u4e2a\u51fd\u6570\u3002</p>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#vtasksuspend","title":"vTaskSuspend\uff1a\u6302\u8d77\u4efb\u52a1","text":"<p><code>vTaskSuspend()</code> \u7528\u4e8e\u6302\u8d77\u6307\u5b9a\u4efb\u52a1\uff0c\u4efb\u52a1\u88ab\u6302\u8d77\u540e\u65e0\u6cd5\u518d\u6267\u884c\uff0c\u76f4\u5230\u901a\u8fc7 <code>xTaskResume()</code> \u6062\u590d\u4efb\u52a1\u3002</p> <p>\u539f\u578b\uff1a</p> <pre><code>void vTaskSuspend(TaskHandle_t xTask);\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> <ul> <li>xTask\uff1a\u8981\u6302\u8d77\u7684\u4efb\u52a1\u53e5\u67c4\u3002\u5982\u679c\u4f20\u9012 NULL\uff0c\u5219\u6302\u8d77\u5f53\u524d\u4efb\u52a1\u3002</li> </ul>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#xtaskresume","title":"xTaskResume\uff1a\u6062\u590d\u4efb\u52a1","text":"<p>\u7528\u4e8e\u6062\u590d\u4e00\u4e2a\u6302\u8d77\u7684\u4efb\u52a1\u3002\u6062\u590d\u4efb\u52a1\u540e\uff0c\u4efb\u52a1\u91cd\u65b0\u8fdb\u5165\u51c6\u5907\u5c31\u7eea\u72b6\u6001\uff0c\u7b49\u5f85\u8c03\u5ea6\u5668\u8c03\u5ea6\u3002</p> <p>\u539f\u578b\uff1a</p> <pre><code>BaseType_t xTaskResume(TaskHandle_t xTask);\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a - xTask\uff1a\u8981\u6062\u590d\u7684\u4efb\u52a1\u53e5\u67c4\u3002\u5982\u679c\u4f20\u9012 NULL\uff0c\u5219\u6062\u590d\u5f53\u524d\u4efb\u52a1\u3002</p>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#_12","title":"\u4ee3\u7801\u793a\u4f8b","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"esp_log.h\"\n\nstatic const char *TAG = \"main\";\n\nTaskHandle_t taskHandle_1 = NULL; // Handle for Task 1\n\n// Task 1: Periodically prints logs\nvoid Task_1(void *pvParameters)\n{\n    while (1)\n    {\n        ESP_LOGI(TAG, \"Task 1 is running...\");\n        vTaskDelay(pdMS_TO_TICKS(1000)); // Delay for 1 second\n    }\n}\n\n// Task 2: Controls the suspension and resumption of Task 1\nvoid Task_2(void *pvParameters)\n{\n    while (1)\n    {\n        ESP_LOGI(TAG, \"Suspending Task 1...\");\n        vTaskSuspend(taskHandle_1); // Suspend Task 1\n        vTaskDelay(pdMS_TO_TICKS(5000)); // Delay for 5 seconds\n\n        ESP_LOGI(TAG, \"Resuming Task 1...\");\n        vTaskResume(taskHandle_1); // Resume Task 1\n        vTaskDelay(pdMS_TO_TICKS(5000)); // Delay for another 5 seconds\n    }\n}\n\nvoid app_main(void)\n{\n    // Create Task 1\n    xTaskCreate(Task_1, \"Task_1\", 2048, NULL, 6, &amp;taskHandle_1);\n\n    // Create Task 2\n    xTaskCreate(Task_2, \"Task_2\", 2048, NULL, 5, NULL);\n}\n</code></pre>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#_13","title":"\u7cfb\u7edf\u4efb\u52a1\u4fe1\u606f\u663e\u793a","text":"<p>FreeRTOS \u63d0\u4f9b\u4e86\u591a\u79cd\u65b9\u6cd5\u6765\u663e\u793a\u548c\u5206\u6790\u4efb\u52a1\u4fe1\u606f\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u4e86\u89e3\u7cfb\u7edf\u8fd0\u884c\u72b6\u51b5\u3001\u4f18\u5316\u6027\u80fd\u4ee5\u53ca\u5b9a\u4f4d\u95ee\u9898\u3002</p> <p>\u7cfb\u7edf\u4efb\u52a1\u4fe1\u606f\u663e\u793a\u4e3b\u8981\u901a\u8fc7 <code>vTaskList</code> \u548c <code>uxTaskGetStackHighWaterMark</code> \u51fd\u6570\u5b9e\u73b0\u3002</p>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#vtasklist","title":"vTaskList: \u8f93\u51fa\u4efb\u52a1\u5217\u8868","text":"<p>\u53ef\u901a\u8fc7 <code>vTaskList()</code> \u6765\u534f\u52a9\u5206\u6790\u64cd\u4f5c\u7cfb\u7edf\u5f53\u524d task \u72b6\u6001\uff0c\u4ee5\u5e2e\u52a9\u4f18\u5316\u5185\u5b58\uff0c\u5e2e\u52a9\u5b9a\u4f4d\u6808\u6ea2\u51fa\u95ee\u9898\uff0c\u5e2e\u52a9\u7406\u89e3\u548c\u5b66\u4e60\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u76f8\u5173\u77e5\u8bc6\u3002</p> <p>\u539f\u578b\uff1a <pre><code>void vTaskList( char *pcWriteBuffer );\n</code></pre></p> <p>\u6ce8\u610f\uff1a<code>configUSE_TRACE_FACILITY</code>\u548c<code>configUSE_STATS_FORMATTING_FUNCTIONS</code>\u5fc5\u987b\u5728 FreeRTOSConfig.h \u4e2d\u5b9a\u4e49\u4e3a 1\uff0c\u624d\u53ef\u4f7f\u7528\u6b64\u51fd\u6570\u3002  \u5bf9\u4e8eESP32\u6765\u8bf4\u3002\u4f7f\u7528 vTaskList() \u524d\u9700\u4f7f\u80fd:</p> <p>menuconfig -&gt; Component config -&gt; FreeRTOS -&gt; Kernel-&gt;<code>configUSE_TRACE_FACILITY</code> menuconfig -&gt; Component config -&gt; FreeRTOS -&gt; Kernel-&gt;<code>configUSE_STATS_FORMATTING_FUNCTIONS</code></p>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#uxtaskgetstackhighwatermark","title":"uxTaskGetStackHighWaterMark:\u83b7\u53d6\u4efb\u52a1\u6700\u5c0f\u5269\u4f59\u6808\u7a7a\u95f4","text":"<p>\u7528\u4e8e\u83b7\u53d6\u4efb\u52a1\u5728\u8fd0\u884c\u671f\u95f4\u7684\u6700\u5c0f\u5269\u4f59\u6808\u7a7a\u95f4\uff08\u5373\u6808\u7684\u9ad8\u6c34\u4f4d\u6807\u8bb0\uff09\u3002\u6b64\u51fd\u6570\u53ef\u5e2e\u52a9\u68c0\u6d4b\u4efb\u52a1\u662f\u5426\u5b58\u5728\u6808\u6ea2\u51fa\u7684\u98ce\u9669\u3002</p> <p>\u539f\u578b\uff1a</p> <pre><code>UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask );\n</code></pre> <p>\u53c2\u6570\uff1a</p> <ul> <li>xTask\uff1a\u4efb\u52a1\u53e5\u67c4\u3002\u5982\u679c\u4f20\u9012 NULL\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u4efb\u52a1\u7684\u6808\u9ad8\u6c34\u4f4d\u6807\u8bb0\u3002</li> </ul> <p>\u8fd4\u56de\u503c\uff1a \u5269\u4f59\u6808\u7a7a\u95f4\u7684\u5b57\u6570\uff08\u5355\u4f4d\u4e3a\u5b57\uff09,(\u4f46\u662f\u5728ESP-IDF\u91cc\u4e3a\u5b57\u8282)</p>"},{"location":"zh/FREERTOS/MULTITASK/multitask/#_14","title":"\u4ee3\u7801\u793a\u4f8b","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\nstatic const char *TAG = \"main\";\n\n// Task 1: Periodically prints logs\nvoid Task_1(void *pvParameters)\n{\n    for (;;)\n    {\n        vTaskDelay(1000 / portTICK_PERIOD_MS); // Delay for 1 second\n        ESP_LOGI(TAG, \"Task_1\");\n    }\n    vTaskDelete(NULL); // Delete the task (this line is unreachable in this example)\n}\n\n// Task 2: Periodically prints logs\nvoid Task_2(void *pvParameters)\n{\n    for (;;)\n    {\n        vTaskDelay(1000 / portTICK_PERIOD_MS); // Delay for 1 second\n        ESP_LOGI(TAG, \"Task_2\");\n    }\n    vTaskDelete(NULL); // Delete the task (this line is unreachable in this example)\n}\n\nvoid app_main(void)\n{\n    TaskHandle_t taskHandle_1 = NULL; // Handle for Task 1\n    TaskHandle_t taskHandle_2 = NULL; // Handle for Task 2\n\n    // Create Task 1 with a stack size of 2048 bytes and priority 12\n    xTaskCreate(Task_1, \"Task_1\", 2048, NULL, 12, &amp;taskHandle_1);\n    // Create Task 2 with a stack size of 2048 bytes and priority 12\n    xTaskCreate(Task_2, \"Task_2\", 2048, NULL, 12, &amp;taskHandle_2);\n\n    // Print the task list\n    static char cBuffer[512] = {0}; // Buffer to store task list\n    vTaskList(cBuffer); // Populate the buffer with task list information\n    ESP_LOGI(TAG, \"Task List:\\n%s\", cBuffer); // Log the task list\n\n    while (1)\n    {\n        // Get the remaining stack space for Task 1\n        int istack = uxTaskGetStackHighWaterMark(taskHandle_1);\n        ESP_LOGI(TAG, \"Task_1 Remaining Stack Space: %d\", istack); // Log the stack space\n        vTaskDelay(1000 / portTICK_PERIOD_MS); // Delay for 1 second\n    }\n}\n</code></pre>"},{"location":"zh/FREERTOS/MUTEX/mutex/","title":"\u4e92\u65a5\u9501","text":"<p>\u53c2\u8003\u51fa\u5904</p> <p>\u672c\u6587\u6863\u53c2\u8003\u4e86DURUOFU\u7684ESP32-\u6559\u7a0b\u3002 </p>"},{"location":"zh/FREERTOS/MUTEX/mutex/#1","title":"1. \u4e92\u65a5\u91cf","text":"<p>\u4e92\u65a5\u91cf(\u4e92\u65a5\u9501Mutex):\u4e92\u65a5\u9501\u548c\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u6781\u4e3a\u76f8\u4f3c\uff0c\u4f46\u6709\u4e00\u4e9b\u7ec6\u5fae\u5dee\u5f02\uff1a\u4e92\u65a5\u9501\u5177\u6709**\u4f18\u5148\u7ea7\u7ee7\u627f\u673a\u5236**\uff0c \u4f46\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u6ca1\u6709\u3002</p> <p>Note</p> <p>\u5047\u8bbe\u6709\u4e09\u4e2a\u4efb\u52a1\uff1atask_L, task_M, task_H, \u4f18\u5148\u7ea7\u4f9d\u6b21\u9012\u589e\u3002task_L \u4f18\u5148\u7ea7\u6700\u4f4e\uff0ctask_M \u4f18\u5148\u7ea7\u4e2d\u7b49\uff0ctask_H \u4f18\u5148\u7ea7\u6700\u9ad8\u3002task_L \u548c task_H\u5171\u4eab\u8d44\u6e90\uff0c\u4e4b\u95f4\u6709\u4e92\u65a5\u9501(\u5047\u8bbe\u65e0\u4f18\u5148\u7ea7\u7ee7\u627f)\u4fdd\u62a4\u3002task_L\u9996\u5148\u5f00\u59cb\uff0c\u83b7\u53d6\u4e92\u65a5\u9501\uff0ctask_H\u540e\u5f00\u59cb\uff0c\u5c1d\u8bd5\u83b7\u53d6\u4e92\u65a5\u9501\uff0c\u4f46\u7531\u4e8etask_L\u6301\u6709\u4e92\u65a5\u9501\uff0ctask_H\u4f1a\u88ab\u963b\u585e\u3002\u6b64\u65f6task_M\u5f00\u59cb\uff0ctask_M\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8etask_L\uff0ctask_M\u4f1a\u62a2\u5360task_L\u7684CPU\u65f6\u95f4\u7247\uff0ctask_L\u56e0\u4e3a\u88abtask_M\u62a2\u5360\uff0c\u65e0\u6cd5\u91ca\u653e\u4e92\u65a5\u9501\uff0c\u5bfc\u81f4task_H\u65e0\u6cd5\u6267\u884c\uff0c\u5373\u4fbf\u5176\u4f18\u5148\u7ea7\u6700\u9ad8\u3002\u8fd9\u5c31\u662f\u5178\u578b\u7684**\u4f18\u5148\u7ea7\u53cd\u8f6c\u73b0\u8c61**\u3002</p> <p>\u4f18\u5148\u7ea7\u7ee7\u627f</p> <p>\u4f18\u5148\u7ea7\u7ee7\u627f\u662f\u4e00\u79cd\u89e3\u51b3\u4f18\u5148\u7ea7\u53cd\u8f6c\u95ee\u9898\u7684\u65b9\u6cd5\u3002\u5f53\u4e00\u4e2a\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u6301\u6709\u4e00\u4e2a\u4e92\u65a5\u9501\u65f6\uff0c\u5982\u679c\u4e00\u4e2a\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u8bf7\u6c42\u8fd9\u4e2a\u4e92\u65a5\u9501\uff0c\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u4f1a\u88ab\u63d0\u5347\u5230\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\uff0c\u76f4\u5230\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u91ca\u653e\u4e92\u65a5\u9501\u3002</p>"},{"location":"zh/FREERTOS/MUTEX/mutex/#11","title":"1.1 \u793a\u4f8b\u4ee3\u7801\uff1a","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/semphr.h\"\n\nstatic const char *TAG = \"main\";\n\nSemaphoreHandle_t mutexHandle;\n\nvoid task1(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"task1\u542f\u52a8!\");\n    while (1)\n    {\n        if (xSemaphoreTake(mutexHandle, portMAX_DELAY) == pdTRUE)\n        {\n            ESP_LOGI(TAG, \"task1\u83b7\u53d6\u5230\u4e92\u65a5\u91cf!\");\n            for (int i = 0; i &lt; 10; i++)\n            {\n                ESP_LOGI(TAG, \"task1\u6267\u884c\u4e2d...%d\", i);\n                vTaskDelay(pdMS_TO_TICKS(1000));\n            }\n            xSemaphoreGive(mutexHandle);\n            ESP_LOGI(TAG, \"task1\u91ca\u653e\u4e92\u65a5\u91cf!\");\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"task1\u83b7\u53d6\u4e92\u65a5\u91cf\u5931\u8d25!\");\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"task2\u542f\u52a8!\");\n    vTaskDelay(pdMS_TO_TICKS(1000));\n    while (1)\n    {\n    }\n}\n\nvoid task3(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"task3\u542f\u52a8!\");\n    vTaskDelay(pdMS_TO_TICKS(1000));\n    while (1)\n    {\n        if (xSemaphoreTake(mutexHandle, 1000) == pdPASS)\n        {\n            ESP_LOGI(TAG, \"task3\u83b7\u53d6\u5230\u4e92\u65a5\u91cf!\");\n            for (int i = 0; i &lt; 10; i++)\n            {\n                ESP_LOGI(TAG, \"task3\u6267\u884c\u4e2d...%d\",i);\n                vTaskDelay(pdMS_TO_TICKS(1000));\n            }\n\n            xSemaphoreGive(mutexHandle);\n            ESP_LOGI(TAG, \"task3\u91ca\u653e\u4e92\u65a5\u91cf!\");\n            vTaskDelay(pdMS_TO_TICKS(5000));\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"task3\u672a\u83b7\u53d6\u5230\u4e92\u65a5\u91cf!\");\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n    }\n}\n\nvoid app_main(void)\n{\n    mutexHandle = xSemaphoreCreateMutex();\n    // mutexHandle = xSemaphoreCreateBinary();\n    xTaskCreate(task1, \"task1\", 1024 * 2, NULL, 1, NULL);\n    xTaskCreate(task2, \"task2\", 1024 * 2, NULL, 2, NULL);\n    xTaskCreate(task3, \"task3\", 1024 * 2, NULL, 3, NULL);\n}\n</code></pre>"},{"location":"zh/FREERTOS/MUTEX/mutex/#2","title":"2. \u9012\u5f52\u4e92\u65a5\u91cf","text":"<p>\u975e\u9012\u5f52\u4e92\u65a5\u9501\u53ea\u80fd\u88ab\u4e00\u4e2a\u4efb\u52a1\u83b7\u53d6\u4e00\u6b21\uff0c\u5982\u679c\u540c\u4e00\u4e2a\u4efb\u52a1\u60f3\u518d\u6b21\u83b7\u53d6\u5219\u4f1a\u5931\u8d25\uff0c \u56e0\u4e3a\u5f53\u4efb\u52a1\u7b2c\u4e00\u6b21\u91ca\u653e\u4e92\u65a5\u9501\u65f6\uff0c\u4e92\u65a5\u9501\u5c31\u4e00\u76f4\u5904\u4e8e\u91ca\u653e\u72b6\u6001\u3002\u4e0e\u975e\u9012\u5f52\u4e92\u65a5\u9501\u76f8\u53cd\uff0c\u9012\u5f52\u4e92\u65a5\u9501\u53ef\u4ee5\u88ab\u540c\u4e00\u4e2a\u4efb\u52a1\u83b7\u53d6\u5f88\u591a\u6b21\uff0c \u83b7\u53d6\u591a\u5c11\u6b21\u5c31\u9700\u8981\u91ca\u653e\u591a\u5c11\u6b21\uff0c \u6b64\u65f6\u624d\u4f1a\u8fd4\u56de\u9012\u5f52\u4e92\u65a5\u9501\u3002</p>"},{"location":"zh/FREERTOS/MUTEX/mutex/#21","title":"2.1  \u793a\u4f8b\u4ee3\u7801\uff1a","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/semphr.h\"\n\nstatic const char *TAG = \"main\";\n\nSemaphoreHandle_t mutexHandle;\n\nvoid task1(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task1\u542f\u52a8!\");\n    while (1)\n    {\n        xSemaphoreTakeRecursive(mutexHandle, portMAX_DELAY);\n        ESP_LOGI(TAG, \"task1\u83b7\u53d6\u5230\u4e92\u65a5\u91cf-\u4f7f\u7528\u8d44\u6e90A\");\n        for (int i = 0; i &lt; 10; i++)\n        {\n            ESP_LOGI(TAG, \"task1\u6267\u884c\u4e2d...%d -\u4f7f\u7528\u8d44\u6e90A\", i);\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n\n        xSemaphoreTakeRecursive(mutexHandle, portMAX_DELAY);\n        ESP_LOGI(TAG, \"task1\u83b7\u53d6\u5230\u4e92\u65a5\u91cf-\u4f7f\u7528\u8d44\u6e90B\");\n        for (int i = 0; i &lt; 10; i++)\n        {\n            ESP_LOGI(TAG, \"task1\u6267\u884c\u4e2d...%d -\u4f7f\u7528\u8d44\u6e90B\", i);\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n\n        xSemaphoreGiveRecursive(mutexHandle);\n        ESP_LOGI(TAG, \"task1\u91ca\u653e\u4e92\u65a5\u91cf-\u4f7f\u7528\u8d44\u6e90B\");\n        vTaskDelay(pdMS_TO_TICKS(3000));\n        xSemaphoreGiveRecursive(mutexHandle);\n        ESP_LOGI(TAG, \"task1\u91ca\u653e\u4e92\u65a5\u91cf-\u4f7f\u7528\u8d44\u6e90A\");\n    }\n    vTaskDelete(NULL);\n}\n\nvoid task2(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"task2\u542f\u52a8!\");\n    vTaskDelay(pdMS_TO_TICKS(1000));\n    while (1)\n    {\n        // \u83b7\u53d6\u9012\u5f52\u4e92\u65a5\u9501\n        if (xSemaphoreTakeRecursive(mutexHandle, portMAX_DELAY) == pdTRUE)\n        {\n            ESP_LOGI(TAG, \"task2\u83b7\u53d6\u5230\u4e92\u65a5\u91cf\");\n            for (int i = 0; i &lt; 10; i++)\n            {\n                ESP_LOGI(TAG, \"task2\u6267\u884c\u4e2d...%d\", i);\n                vTaskDelay(pdMS_TO_TICKS(1000));\n            }\n            xSemaphoreGiveRecursive(mutexHandle);\n            ESP_LOGI(TAG, \"task2\u91ca\u653e\u4e92\u65a5\u91cf\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"task2\u83b7\u53d6\u4e92\u65a5\u91cf\u5931\u8d25\");\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n    }\n}\n\nvoid app_main(void)\n{\n    // \u521b\u5efa\u9012\u5f52\u4e92\u65a5\u91cf\n    mutexHandle = xSemaphoreCreateRecursiveMutex();\n\n    xTaskCreate(task1, \"task1\", 1024 * 2, NULL, 1, NULL);\n    xTaskCreate(task2, \"task2\", 1024 * 2, NULL, 2, NULL);\n}\n</code></pre>"},{"location":"zh/FREERTOS/QUEUE/queue/","title":"\u961f\u5217 | \u9ad8\u6548\u7684\u4efb\u52a1\u95f4\u6570\u636e\u4f20\u8f93","text":"<p>\u53c2\u8003\u51fa\u5904</p> <p>\u672c\u6587\u6863\u53c2\u8003\u4e86DURUOFU\u7684ESP32-\u6559\u7a0b\u3002 </p> <p>Tip</p> <p>\u9700\u8981\u7528\u5230\u961f\u5217\u7684\u5730\u65b9\u8981\u5f15\u7528\u5934\u6587\u4ef6 <code>#include \"freertos/queue.h\"</code>\u3002</p>"},{"location":"zh/FREERTOS/QUEUE/queue/#1","title":"1.\u961f\u5217\u7684\u521b\u5efa\u4e0e\u4f20\u53c2","text":"<p>\u961f\u5217\u662f\u4efb\u52a1\u95f4\u901a\u4fe1\u7684\u4e3b\u8981\u5f62\u5f0f\u3002\u5b83\u4eec\u53ef\u4ee5\u7528\u4e8e\u5728**\u4efb\u52a1\u4e4b\u95f4** \u4ee5\u53ca**\u4e2d\u65ad\u548c\u4efb\u52a1\u4e4b\u95f4**\u53d1\u9001\u6d88\u606f\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u961f\u5217\u7528\u4f5c\u7ebf\u7a0b\u5b89\u5168\u7684 FIFO\uff08\u5148\u8fdb\u5148\u51fa\uff09\u7f13\u51b2\u533a\uff0c \u65b0\u6570\u636e\u88ab\u53d1\u9001\u5230\u961f\u5217\u7684\u540e\u9762\uff0c\u4f46\u4e5f\u53ef\u4ee5\u53d1\u9001\u5230\u524d\u9762\u3002</p>"},{"location":"zh/FREERTOS/QUEUE/queue/#11-api","title":"1.1 API \u8bf4\u660e","text":"<p>\u961f\u5217\u64cd\u4f5c\u4e3b\u8981\u6d89\u53ca\u4ee5\u4e0b\u51e0\u4e2aAPI\uff1a</p> \u51fd\u6570\u540d \u529f\u80fd \u5907\u6ce8 xQueueCreate \u521b\u5efa\u4e00\u4e2a\u961f\u5217 \u521b\u5efa\u6307\u5b9a\u957f\u5ea6\u548c\u5927\u5c0f\u7684\u961f\u5217 xQueueSend \u5411\u961f\u5217\u4e2d\u53d1\u9001\u6570\u636e \u5982\u679c\u961f\u5217\u5df2\u6ee1\uff0c\u4efb\u52a1\u53ef\u9009\u62e9\u963b\u585e\u6216\u7acb\u5373\u8fd4\u56de xQueueReceive \u4ece\u961f\u5217\u4e2d\u63a5\u6536\u6570\u636e \u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u4efb\u52a1\u53ef\u9009\u62e9\u963b\u585e\u6216\u7acb\u5373\u8fd4\u56de xQueueSendToFront \u5c06\u6570\u636e\u53d1\u9001\u5230\u961f\u5217\u7684\u961f\u5934\u4f4d\u7f6e \u4e0e xQueueSend \u7c7b\u4f3c\uff0c\u4f46\u4f18\u5148\u7ea7\u66f4\u9ad8 xQueueSendToBack \u5c06\u6570\u636e\u53d1\u9001\u5230\u961f\u5217\u7684\u961f\u5c3e\u4f4d\u7f6e \u9ed8\u8ba4\u884c\u4e3a\uff0c\u7b49\u6548\u4e8e xQueueSend uxQueueMessagesWaiting \u67e5\u8be2\u961f\u5217\u4e2d\u5f53\u524d\u7b49\u5f85\u7684\u6d88\u606f\u6570\u91cf \u8fd4\u56de\u961f\u5217\u4e2d\u5c1a\u672a\u8bfb\u53d6\u7684\u6d88\u606f\u6570"},{"location":"zh/FREERTOS/QUEUE/queue/#xqueuecreate","title":"xQueueCreate\uff1a\u521b\u5efa\u961f\u5217","text":"<p>\u539f\u578b\uff1a</p> <pre><code>QueueHandle_t xQueueCreate(UBaseType_t uxQueueLength, UBaseType_t uxItemSize);\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a - uxQueueLength\uff1a\u961f\u5217\u7684\u957f\u5ea6\uff08\u53ef\u4ee5\u5bb9\u7eb3\u7684\u5143\u7d20\u6570\u91cf\uff09\u3002 - uxItemSize\uff1a\u961f\u5217\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002</p> <p>\u8fd4\u56de\u503c\uff1a \u6210\u529f\u65f6\u8fd4\u56de\u961f\u5217\u53e5\u67c4\uff1b\u5931\u8d25\u65f6\u8fd4\u56de NULL\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>QueueHandle_t xQueue;\nxQueue = xQueueCreate(10, sizeof(int)); // \u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u5b58\u50a8 10 \u4e2a\u6574\u6570\u7684\u961f\u5217\nif (xQueue == NULL) {\n    // \u961f\u5217\u521b\u5efa\u5931\u8d25\uff0c\u5904\u7406\u9519\u8bef\n}\n</code></pre>"},{"location":"zh/FREERTOS/QUEUE/queue/#xqueuesend","title":"xQueueSend\uff1a\u5411\u961f\u5217\u53d1\u9001\u6570\u636e","text":"<p>\u539f\u578b\uff1a</p> <pre><code>BaseType_t xQueueSend(QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait);\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> <ul> <li>xQueue\uff1a\u961f\u5217\u7684\u53e5\u67c4\u3002</li> <li>pvItemToQueue\uff1a\u6307\u5411\u8981\u53d1\u9001\u5230\u961f\u5217\u7684\u6570\u636e\u7684\u6307\u9488\u3002</li> <li>xTicksToWait\uff1a\u5f53\u961f\u5217\u5df2\u6ee1\u65f6\uff0c\u4efb\u52a1\u7b49\u5f85\u7684\u65f6\u95f4\uff08\u4ee5 tick \u4e3a\u5355\u4f4d\uff09\u3002\u8bbe\u7f6e\u4e3a 0 \u8868\u793a\u4e0d\u7b49\u5f85\u3002</li> </ul> <p>\u8fd4\u56de\u503c\uff1a - pdPASS\uff1a\u6570\u636e\u6210\u529f\u53d1\u9001\u5230\u961f\u5217\u3002 - errQUEUE_FULL\uff1a\u961f\u5217\u5df2\u6ee1\uff0c\u6570\u636e\u53d1\u9001\u5931\u8d25\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>int data = 42;\nif (xQueueSend(xQueue, &amp;data, 0) != pdPASS) {\n    // \u6570\u636e\u53d1\u9001\u5931\u8d25\uff0c\u5904\u7406\u9519\u8bef\n}\n</code></pre>"},{"location":"zh/FREERTOS/QUEUE/queue/#xqueuereceive","title":"xQueueReceive\uff1a\u4ece\u961f\u5217\u63a5\u6536\u6570\u636e","text":"<p>\u539f\u578b\uff1a</p> <pre><code>BaseType_t xQueueReceive(QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait);\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a - xQueue\uff1a\u961f\u5217\u7684\u53e5\u67c4\u3002 - pvBuffer\uff1a\u6307\u5411\u63a5\u6536\u6570\u636e\u7684\u7f13\u51b2\u533a\u7684\u6307\u9488\u3002 - xTicksToWait\uff1a\u5f53\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u4efb\u52a1\u7b49\u5f85\u7684\u65f6\u95f4\uff08\u4ee5 tick \u4e3a\u5355\u4f4d\uff09\u3002\u8bbe\u7f6e\u4e3a 0 \u8868\u793a\u4e0d\u7b49\u5f85\u3002</p> <p>\u8fd4\u56de\u503c\uff1a - pdPASS\uff1a\u6570\u636e\u6210\u529f\u63a5\u6536\u3002 - pdFALSE\uff1a\u961f\u5217\u4e3a\u7a7a\uff0c\u63a5\u6536\u5931\u8d25\u3002</p> <p>\u793a\u4f8b\uff1a <pre><code>int receivedData;\nif (xQueueReceive(xQueue, &amp;receivedData, portMAX_DELAY) == pdPASS) {\n    // \u6210\u529f\u63a5\u6536\u6570\u636e\uff0c\u8fdb\u884c\u5904\u7406\n}\n</code></pre></p>"},{"location":"zh/FREERTOS/QUEUE/queue/#12","title":"1.2  \u961f\u5217\u4f20\u53c2\u793a\u4f8b\uff1a","text":""},{"location":"zh/FREERTOS/QUEUE/queue/#1-","title":"\uff081\uff09\u961f\u5217\u4f20\u53c2-\u5e38\u91cf","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/queue.h\"\n\nstatic const char *TAG = \"main\";\n\nvoid Task_1(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    int i = 0;\n\n    for (;;)\n    {\n        // \u53d1\u9001\u6570\u636e\u5230\u961f\u5217\n        if (xQueueSend(xQueue, &amp;i, 0)!= pdPASS) {\n            ESP_LOGI(TAG, \"\u6570\u636e\u53d1\u9001\u5931\u8d25\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u6570\u636e\u53d1\u9001\u6210\u529f\");\n            i++;\n        }\n\n        if(i == 10)\n        {\n            i = 0;\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_2(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    for (;;)\n    {\n        int receivedData;\n        if (xQueueReceive(xQueue, &amp;receivedData, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u6570\u636e\u63a5\u6536\u5931\u8d25\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u6570\u636e\u63a5\u6536\u6210\u529f\uff0c\u6570\u636e\u4e3a\uff1a%d\", receivedData);\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n\n    }\n    vTaskDelete(NULL);\n}\n\nvoid app_main(void)\n{\n    TaskHandle_t taskHandle_1 = NULL;\n    TaskHandle_t taskHandle_2 = NULL;\n    QueueHandle_t xQueue;\n\n    // \u521b\u5efa\u961f\u5217\n    xQueue = xQueueCreate(10, sizeof(int));\n\n    if (xQueue != NULL)\n    {\n        ESP_LOGI(TAG, \"\u961f\u5217\u521b\u5efa\u6210\u529f\");\n        // \u53d1\u9001\u6570\u636e\u4efb\u52a1\n        xTaskCreate(Task_1, \"Task_1\", 1024 * 4, (void *)xQueue, 12, &amp;taskHandle_1);\n        // \u63a5\u6536\u6570\u636e\u4efb\u52a1\n        xTaskCreate(Task_2, \"Task_1\", 1024 * 4, (void *)xQueue, 12, &amp;taskHandle_2);\n    }\n    else\n    {\n        ESP_LOGI(TAG, \"\u961f\u5217\u521b\u5efa\u5931\u8d25\");\n    }\n}\n</code></pre>"},{"location":"zh/FREERTOS/QUEUE/queue/#2-","title":"\uff082\uff09\u961f\u5217\u4f20\u53c2-\u7ed3\u6784\u4f53","text":"<pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/queue.h\"\n\nstatic const char *TAG = \"main\";\n\n// \u5b9a\u4e49\u7ed3\u6784\u4f53\ntypedef struct\n{\n    int id;\n    int data[3];\n} MyStruct;\n\nvoid Task_1(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    MyStruct shendData = {1, {1, 2, 3}};\n\n    for (;;)\n    {\n        // \u53d1\u9001\u6570\u636e\u5230\u961f\u5217\n        if (xQueueSend(xQueue, &amp;shendData, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u6570\u636e\u53d1\u9001\u5931\u8d25\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u6570\u636e\u53d1\u9001\u6210\u529f\");\n            shendData.id++;\n        }\n\n        if (shendData.id == 10)\n        {\n            shendData.id = 0;\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_2(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    for (;;)\n    {\n        MyStruct receivedData;\n        if (xQueueReceive(xQueue, &amp;receivedData, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u6570\u636e\u63a5\u6536\u5931\u8d25\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u6570\u636e\u63a5\u6536\u6210\u529f\uff0c\u6570\u636e\u4e3a\uff1a%d-[%d,%d,%d]\", receivedData.id, receivedData.data[0], receivedData.data[1], receivedData.data[2]);\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n\n    }\n    vTaskDelete(NULL);\n}\n\nvoid app_main(void)\n{\n    TaskHandle_t taskHandle_1 = NULL;\n    TaskHandle_t taskHandle_2 = NULL;\n    QueueHandle_t xQueue;\n\n    // \u521b\u5efa\u961f\u5217\n    xQueue = xQueueCreate(10, sizeof(MyStruct));\n\n    if (xQueue != NULL)\n    {\n        ESP_LOGI(TAG, \"\u961f\u5217\u521b\u5efa\u6210\u529f\");\n        // \u53d1\u9001\u6570\u636e\u4efb\u52a1\n        xTaskCreate(Task_1, \"Task_1\", 1024 * 4, (void *)xQueue, 12, &amp;taskHandle_1);\n        // \u63a5\u6536\u6570\u636e\u4efb\u52a1\n        xTaskCreate(Task_2, \"Task_1\", 1024 * 4, (void *)xQueue, 12, &amp;taskHandle_2);\n    }\n    else\n    {\n        ESP_LOGI(TAG, \"\u961f\u5217\u521b\u5efa\u5931\u8d25\");\n    }\n}\n</code></pre>"},{"location":"zh/FREERTOS/QUEUE/queue/#3-","title":"\uff083\uff09\u961f\u5217\u4f20\u53c2-\u6307\u9488","text":"<pre><code>// \u961f\u5217\u4f20\u53c2_\u6307\u9488: \u4e00\u822c\u7528\u4e8e\u4f20\u9012\u5360\u7528\u5185\u5b58\u8f83\u5927\u7684\u6570\u636e. \u4f20\u9012\u6307\u9488, \u53ef\u4ee5\u907f\u514d\u62f7\u8d1d\u6570\u636e, \u63d0\u9ad8\u6548\u7387.\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/queue.h\"\n\nstatic const char *TAG = \"main\";\n\nvoid Task_1(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    int i = 0;\n\n    for (;;)\n    {\n        char *pCharSend = (char *)malloc(50); // \u7533\u8bf7\u5185\u5b58\n        snprintf(pCharSend, 50, \"Hello World! - %d\", i);\n        i++;\n        // \u53d1\u9001\u6570\u636e\u5230\u961f\u5217\n        if (xQueueSend(xQueue, &amp;pCharSend, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u6570\u636e\u53d1\u9001\u5931\u8d25\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u6570\u636e\u53d1\u9001\u6210\u529f\");\n\n        }\n\n        if (i == 10)\n        {\n            i = 0;\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_2(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n\n    char *pCharReceived = NULL; // \u63a5\u6536\u6570\u636e\n    for (;;)\n    {\n        if (xQueueReceive(xQueue, &amp;pCharReceived, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u6570\u636e\u63a5\u6536\u5931\u8d25\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u6570\u636e\u63a5\u6536\u6210\u529f\uff0c\u6570\u636e\u4e3a\uff1a%s\", pCharReceived);\n            free(pCharReceived); // \u91ca\u653e\u5185\u5b58\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n\n    }\n    vTaskDelete(NULL);\n}\n\nvoid app_main(void)\n{\n    TaskHandle_t taskHandle_1 = NULL;\n    TaskHandle_t taskHandle_2 = NULL;\n    QueueHandle_t xQueue;\n\n    // \u521b\u5efa\u961f\u5217\n    xQueue = xQueueCreate(10, sizeof(char *));\n\n    if (xQueue != NULL)\n    {\n        ESP_LOGI(TAG, \"\u961f\u5217\u521b\u5efa\u6210\u529f\");\n        // \u53d1\u9001\u6570\u636e\u4efb\u52a1\n        xTaskCreate(Task_1, \"Task_1\", 1024 * 4, (void *)xQueue, 12, &amp;taskHandle_1);\n        // \u63a5\u6536\u6570\u636e\u4efb\u52a1\n        xTaskCreate(Task_2, \"Task_1\", 1024 * 4, (void *)xQueue, 12, &amp;taskHandle_2);\n    }\n    else\n    {\n        ESP_LOGI(TAG, \"\u961f\u5217\u521b\u5efa\u5931\u8d25\");\n    }\n}\n</code></pre>"},{"location":"zh/FREERTOS/QUEUE/queue/#2","title":"2.\u961f\u5217\u591a\u8fdb\u5355\u51fa\u6a21\u578b","text":"<p>Info</p> <p>\u5b9e\u9645\u4e0a\u662f\u591a\u4e2a\u4efb\u52a1\u5411\u4e00\u4e2a\u961f\u5217\u53d1\u9001\u6570\u636e\uff0c\u4e00\u4e2a\u4efb\u52a1\u4ece\u961f\u5217\u4e2d\u63a5\u6536\u6570\u636e\u3002\u8fd9\u79cd\u6a21\u578b\u5e38\u7528\u4e8e\u6570\u636e\u76d1\u542c\u3002</p> <p>\u793a\u4f8b\u4ee3\u7801\uff1a</p> <pre><code>// \u961f\u5217\u591a\u8fdb\u5355\u51fa: \u4efb\u52a11\u548c\u4efb\u52a12\u53d1\u9001\u6570\u636e\u5230\u961f\u5217\uff0c\u4efb\u52a13\u63a5\u6536\u6570\u636e  \u4efb\u52a13\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4efb\u52a11\u548c\u4efb\u52a12,\u5df2\u8fbe\u5230\u6570\u636e\u76d1\u542c\u7684\u76ee\u7684\n// \u53c2\u8003:https://www.bilibili.com/video/BV1R44y177VS/?spm_id_from=333.788.top_right_bar_window_history.content.click&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e\n\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/queue.h\"\n\nstatic const char *TAG = \"main\";\n\nvoid Task_1(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    int i = 111;\n\n    for (;;)\n    {\n        // \u53d1\u9001\u6570\u636e\u5230\u961f\u5217\n        if (xQueueSend(xQueue, &amp;i, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a11\u6570\u636e\u53d1\u9001\u5931\u8d25\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a11\u6570\u636e\u53d1\u9001\u6210\u529f\");\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_2(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    int i = 222;\n\n    for (;;)\n    {\n        // \u53d1\u9001\u6570\u636e\u5230\u961f\u5217\n        if (xQueueSend(xQueue, &amp;i, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a12\u6570\u636e\u53d1\u9001\u5931\u8d25\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a12\u6570\u636e\u53d1\u9001\u6210\u529f\");\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_3(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    for (;;)\n    {\n        int receivedData;\n        // \u4f7f\u7528portMAX_DELAY\u963b\u585e\u7b49\u5f85\u6570\u636e\n        if (xQueueReceive(xQueue, &amp;receivedData, portMAX_DELAY) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a13\u6570\u636e\u63a5\u6536\u5931\u8d25\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a13\u6570\u636e\u63a5\u6536\u6210\u529f\uff0c\u6570\u636e\u4e3a\uff1a%d\", receivedData);\n        }\n    }\n    vTaskDelete(NULL);\n}\n\nvoid app_main(void)\n{\n\n    QueueHandle_t xQueue;\n\n    // \u521b\u5efa\u961f\u5217\n    xQueue = xQueueCreate(10, sizeof(int));\n\n    if (xQueue != NULL)\n    {\n        ESP_LOGI(TAG, \"\u961f\u5217\u521b\u5efa\u6210\u529f\");\n        // \u53d1\u9001\u6570\u636e\u4efb\u52a1\n        xTaskCreate(Task_1, \"Task_1\", 1024 * 4, (void *)xQueue, 1, NULL);\n        xTaskCreate(Task_2, \"Task_1\", 1024 * 4, (void *)xQueue, 1, NULL);\n        // \u63a5\u6536\u6570\u636e\u4efb\u52a1\n        xTaskCreate(Task_3, \"Task_1\", 1024 * 4, (void *)xQueue, 2, NULL);\n    }\n    else\n    {\n        ESP_LOGI(TAG, \"\u961f\u5217\u521b\u5efa\u5931\u8d25\");\n    }\n}\n</code></pre>"},{"location":"zh/FREERTOS/QUEUE/queue/#3","title":"3.\u961f\u5217\u96c6\u5408","text":"<p>Note</p> <p>FreeRTOS \u961f\u5217\u96c6\u5408\uff08Queue Sets\uff09\u662f\u4e00\u79cd\u673a\u5236\uff0c\u7528\u4e8e\u540c\u65f6\u76d1\u542c\u591a\u4e2a\u961f\u5217\u548c\u4fe1\u53f7\u91cf\uff0c\u4ee5\u5b9e\u73b0\u4efb\u52a1\u95f4\u7684\u9ad8\u6548\u901a\u4fe1\u3002</p>"},{"location":"zh/FREERTOS/QUEUE/queue/#31-api","title":"3.1 API\u8bf4\u660e\uff1a","text":"\u51fd\u6570\u540d \u529f\u80fd \u5907\u6ce8 xQueueCreateSet \u521b\u5efa\u4e00\u4e2a\u961f\u5217\u96c6\u5408 \u961f\u5217\u96c6\u5408\u5fc5\u987b\u4e0e\u961f\u5217\u6216\u4fe1\u53f7\u91cf\u914d\u5408\u4f7f\u7528 xQueueAddToSet \u5c06\u961f\u5217\u6216\u4fe1\u53f7\u91cf\u6dfb\u52a0\u5230\u961f\u5217\u96c6\u5408 \u88ab\u6dfb\u52a0\u7684\u961f\u5217\u6216\u4fe1\u53f7\u91cf\u5fc5\u987b\u4e3a\u7a7a xQueueRemoveFromSet \u4ece\u961f\u5217\u96c6\u5408\u4e2d\u79fb\u9664\u961f\u5217\u6216\u4fe1\u53f7\u91cf xQueueSelectFromSet \u4ece\u961f\u5217\u96c6\u5408\u4e2d\u9009\u62e9\u4e00\u4e2a\u6709\u6570\u636e\u53ef\u7528\u7684\u961f\u5217\u6216\u4fe1\u53f7\u91cf \u8fd4\u56de\u975e\u7a7a\u7684\u961f\u5217\u6216\u4fe1\u53f7\u91cf"},{"location":"zh/FREERTOS/QUEUE/queue/#32","title":"3.2 \u793a\u4f8b\u4ee3\u7801\uff1a","text":"<pre><code>// \u961f\u5217\u96c6\u5408:\n// https : // www.bilibili.com/video/BV1zq4y1m7UK?spm_id_from=333.788.videopod.sections&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e\n\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/queue.h\"\n\nstatic const char *TAG = \"main\";\n\nvoid Task_1(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    int i = 111;\n\n    for (;;)\n    {\n        // \u53d1\u9001\u6570\u636e\u5230\u961f\u5217\n        if (xQueueSend(xQueue, &amp;i, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a11\u6570\u636e\u53d1\u9001\u5931\u8d25\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a11\u6570\u636e\u53d1\u9001\u6210\u529f\");\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_2(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t xQueue = (QueueHandle_t)pvParameters;\n    int i = 222;\n\n    for (;;)\n    {\n        // \u53d1\u9001\u6570\u636e\u5230\u961f\u5217\n        if (xQueueSend(xQueue, &amp;i, 0) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a12\u6570\u636e\u53d1\u9001\u5931\u8d25\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a12\u6570\u636e\u53d1\u9001\u6210\u529f\");\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_3(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u96c6\u5408\u53e5\u67c4\n    QueueSetHandle_t xQueueSet = (QueueSetHandle_t)pvParameters;\n    // \u53d6\u5f97\u6709\u6570\u636e\u961f\u5217\u53e5\u67c4\n    QueueSetMemberHandle_t QueueData;\n    for (;;)\n    {\n        QueueData = xQueueSelectFromSet(xQueueSet, portMAX_DELAY);\n        if (QueueData != NULL)\n        {\n            int i;\n            if (xQueueReceive(QueueData, &amp;i, portMAX_DELAY) != pdPASS)\n            {\n                ESP_LOGI(TAG, \"\u4efb\u52a13\u6570\u636e\u63a5\u6536\u5931\u8d25\");\n            }\n            else\n            {\n                ESP_LOGI(TAG, \"\u4efb\u52a13\u6570\u636e\u63a5\u6536\u6210\u529f\uff0c\u6570\u636e\u4e3a\uff1a%d\", i);\n            }\n        }\n    }\n    vTaskDelete(NULL);\n}\n\nvoid app_main(void)\n{\n    QueueHandle_t xQueue_1;\n    QueueHandle_t xQueue_2;\n    // \u521b\u5efa\u961f\u5217\n    xQueue_1 = xQueueCreate(10, sizeof(int));\n    xQueue_2 = xQueueCreate(10, sizeof(int));\n\n    // \u521b\u5efa\u961f\u5217\u96c6\u5408\n    QueueSetHandle_t xQueueSet;\n    xQueueSet = xQueueCreateSet(20);\n\n    // \u5c06\u961f\u5217\u6dfb\u52a0\u5230\u961f\u5217\u96c6\u5408\n    xQueueAddToSet(xQueue_1, xQueueSet);\n    xQueueAddToSet(xQueue_2, xQueueSet);\n\n    if ((xQueue_1 != NULL )&amp;&amp; (xQueue_2 != NULL) &amp;&amp; (xQueueSet != NULL))\n    {\n        ESP_LOGI(TAG, \"\u961f\u5217\u521b\u5efa\u6210\u529f\");\n        // \u53d1\u9001\u6570\u636e\u4efb\u52a1\n        xTaskCreate(Task_1, \"Task_1\", 1024 * 4, (void *)xQueue_1, 1, NULL);\n        xTaskCreate(Task_2, \"Task_1\", 1024 * 4, (void *)xQueue_2, 1, NULL);\n        // \u63a5\u6536\u6570\u636e\u4efb\u52a1\n        xTaskCreate(Task_3, \"Task_1\", 1024 * 4, (void *)xQueueSet, 2, NULL);\n    }\n    else\n    {\n        ESP_LOGI(TAG, \"\u961f\u5217\u521b\u5efa\u5931\u8d25\");\n    }\n}\n</code></pre>"},{"location":"zh/FREERTOS/QUEUE/queue/#4","title":"4.\u961f\u5217\u90ae\u7bb1","text":"<p>FreeRTOS\u7684\u90ae\u7bb1\u6982\u5ff5\u8ddf\u522b\u7684RTOS\u4e0d\u4e00\u6837,\u5b83\u662f\u4e00\u4e2a\u961f\u5217\uff0c\u961f\u5217\u957f\u5ea6\u53ea\u67091. \u5199\u90ae\u7bb1\uff1a\u65b0\u6570\u636e\u8986\u76d6\u65e7\u6570\u636e,\u8bfb\u90ae\u7bb1\uff1a\u8bfb\u6570\u636e\u65f6\uff0c\u6570\u636e\u4e0d\u4f1a\u88ab\u79fb\u9664\uff1b\u8fd9\u610f\u5473\u7740\uff0c\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u4f1a\u56e0\u4e3a\u65e0\u6570\u636e\u800c\u963b\u585e\uff0c\u4e00\u65e6\u66fe\u7ecf\u5199\u5165\u6570\u636e\uff0c\u4ee5\u540e\u8bfb\u90ae\u7bb1\u65f6\u603b\u80fd\u6210\u529f\u3002</p> <pre><code>// \u961f\u5217\u90ae\u7bb1: FreeRTOS\u7684\u90ae\u7bb1\u6982\u5ff5\u8ddf\u522b\u7684RTOS\u4e0d\u4e00\u6837,\u5b83\u662f\u4e00\u4e2a\u961f\u5217\uff0c\u961f\u5217\u957f\u5ea6\u53ea\u67091.\n// \u5199\u90ae\u7bb1\uff1a\u65b0\u6570\u636e\u8986\u76d6\u65e7\u6570\u636e,\u8bfb\u90ae\u7bb1\uff1a\u8bfb\u6570\u636e\u65f6\uff0c\u6570\u636e\u4e0d\u4f1a\u88ab\u79fb\u9664\uff1b\n// \u8fd9\u610f\u5473\u7740\uff0c\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u4f1a\u56e0\u4e3a\u65e0\u6570\u636e\u800c\u963b\u585e\uff0c\u4e00\u65e6\u66fe\u7ecf\u5199\u5165\u6570\u636e\uff0c\u4ee5\u540e\u8bfb\u90ae\u7bb1\u65f6\u603b\u80fd\u6210\u529f\u3002\n// https : // www.bilibili.com/video/BV1zq4y1m7UK?spm_id_from=333.788.videopod.sections&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e\n\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/queue.h\"\n\nstatic const char *TAG = \"main\";\n\n// \u5199\u6570\u636e\u961f\u5217\nvoid Task_1(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t Mailbox = (QueueHandle_t)pvParameters;\n    int i = 0;\n\n    for (;;)\n    {\n        // \u53d1\u9001\u6570\u636e\u5230\u961f\u5217\n        if (xQueueOverwrite(Mailbox, &amp;i) != pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a11\u6570\u636e\u53d1\u9001\u5931\u8d25\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a11\u6570\u636e\u53d1\u9001\u6210\u529f\");\n        }\n        i++;\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\n\n// \u8bfb\u6570\u636e\u961f\u5217\nvoid Task_2(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t Mailbox = (QueueHandle_t)pvParameters;\n\n    int i = 0;\n\n    for (;;)\n    {\n        // \u8bfb\u53d6\u6570\u636e\n        if (xQueuePeek(Mailbox, &amp;i, portMAX_DELAY) == pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a12\u6570\u636e\u8bfb\u53d6\u6210\u529f\uff0c\u6570\u636e\u4e3a\uff1a%d\", i);\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a12\u6570\u636e\u8bfb\u53d6\u5931\u8d25\");\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_3(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t Mailbox = (QueueHandle_t)pvParameters;\n    int i = 0;\n\n    for (;;)\n    {\n        // \u8bfb\u53d6\u6570\u636e\n        if (xQueuePeek(Mailbox, &amp;i, portMAX_DELAY) == pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a13\u6570\u636e\u8bfb\u53d6\u6210\u529f\uff0c\u6570\u636e\u4e3a\uff1a%d\", i);\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a13\u6570\u636e\u8bfb\u53d6\u5931\u8d25\");\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid Task_4(void *pvParameters)\n{\n    // \u53d6\u5f97\u961f\u5217\u53e5\u67c4\n    QueueHandle_t Mailbox = (QueueHandle_t)pvParameters;\n    int i = 0;\n\n    for (;;)\n    {\n        // \u8bfb\u53d6\u6570\u636e\n        if (xQueuePeek(Mailbox, &amp;i, portMAX_DELAY) == pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a14\u6570\u636e\u8bfb\u53d6\u6210\u529f\uff0c\u6570\u636e\u4e3a\uff1a%d\", i);\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u4efb\u52a14\u6570\u636e\u8bfb\u53d6\u5931\u8d25\");\n        }\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n    }\n    vTaskDelete(NULL);\n}\n\nvoid app_main(void)\n{\n    QueueHandle_t Mailbox; // \u521b\u5efa\u90ae\u7bb1\n\n    // \u521b\u5efa\u961f\u5217(\u6ce8\u610f\uff1a\u961f\u5217\u957f\u5ea6\u53ea\u67091)\n    Mailbox = xQueueCreate(1, sizeof(int));\n\n    if ((Mailbox != NULL) )\n    {\n        ESP_LOGI(TAG, \"\u961f\u5217\u521b\u5efa\u6210\u529f\");\n        // \u5199\u6570\u636e\u4efb\u52a1\n        xTaskCreate(Task_1, \"Task_1\", 1024 * 4, (void *)Mailbox, 2, NULL);\n        xTaskCreate(Task_2, \"Task_2\", 1024 * 4, (void *)Mailbox, 1, NULL);\n        xTaskCreate(Task_3, \"Task_3\", 1024 * 4, (void *)Mailbox, 1, NULL);\n        xTaskCreate(Task_4, \"Task_4\", 1024 * 4, (void *)Mailbox, 1, NULL);\n    }\n    else\n    {\n        ESP_LOGI(TAG, \"\u961f\u5217\u521b\u5efa\u5931\u8d25\");\n    }\n}\n</code></pre>"},{"location":"zh/FREERTOS/SEMAPHORE/semaphore/","title":"\u4fe1\u53f7\u91cf | \u63a7\u5236\u4efb\u52a1\u7684\u6267\u884c\u987a\u5e8f\u4e0e\u5171\u4eab\u8d44\u6e90\u8bbf\u95ee","text":"<p>\u53c2\u8003\u51fa\u5904</p> <p>\u672c\u6587\u6863\u53c2\u8003\u4e86DURUOFU\u7684ESP32-\u6559\u7a0b\u3002 </p> <p>Note</p> <p>FreeRTOS \u63d0\u4f9b\u4e86\u4fe1\u53f7\u91cf\u548c\u4e92\u65a5\u9501\uff0c\u7528\u4e8e\u4efb\u52a1\u95f4\u7684\u540c\u6b65\u548c\u8d44\u6e90\u5171\u4eab\u7ba1\u7406\u3002\u4fe1\u53f7\u91cf\u66f4\u504f\u5411\u4e8e\u4efb\u52a1\u540c\u6b65\uff0c\u800c\u4e92\u65a5\u9501\u7528\u4e8e\u4fdd\u62a4\u5171\u4eab\u8d44\u6e90\u3002</p>"},{"location":"zh/FREERTOS/SEMAPHORE/semaphore/#1","title":"1. \u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf","text":"<p>\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u662f\u6700\u57fa\u672c\u7684\u4fe1\u53f7\u91cf\uff0c\u4ec5\u6709\u4e24\u4e2a\u72b6\u6001\uff1a\u53ef\u7528\u548c\u4e0d\u53ef\u7528\uff08\u6216 1 \u548c 0\uff09\u3002 \u901a\u5e38\u7528\u4e8e\u4efb\u52a1\u4e4b\u95f4\u6216\u4e2d\u65ad\u4e0e\u4efb\u52a1\u4e4b\u95f4\u7684\u540c\u6b65\uff0c\u5f53\u4e00\u4e2a\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u7531\u4e2d\u65ad\u6216\u4efb\u52a1\u91ca\u653e\u4fe1\u53f7\u91cf\uff0c\u7b49\u5f85\u4fe1\u53f7\u91cf\u7684\u4efb\u52a1\u5c31\u4f1a\u88ab\u5524\u9192\u3002 \u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u9002\u7528\u4e8e\u7b80\u5355\u7684\u4e8b\u4ef6\u901a\u77e5\u573a\u666f\uff0c\u6bd4\u5982\u901a\u77e5\u67d0\u4e2a\u4efb\u52a1\u5904\u7406\u5916\u90e8\u8f93\u5165\u6216\u5b8c\u6210\u67d0\u9879\u4efb\u52a1\u3002</p>"},{"location":"zh/FREERTOS/SEMAPHORE/semaphore/#11-api","title":"1.1 API\u8bf4\u660e\uff1a","text":"API\u51fd\u6570 \u63cf\u8ff0 <code>xSemaphoreCreateBinary()</code> \u521b\u5efa\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u3002 <code>xSemaphoreTake()</code> \u83b7\u53d6\u4fe1\u53f7\u91cf\u3002 <code>xSemaphoreGive()</code> \u91ca\u653e\u4fe1\u53f7\u91cf\u3002"},{"location":"zh/FREERTOS/SEMAPHORE/semaphore/#12","title":"1.2 \u793a\u4f8b\u4ee3\u7801\uff1a","text":"<pre><code>// \u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/semphr.h\"\n\nstatic const char *TAG = \"main\";\n\n// \u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\nSemaphoreHandle_t semaphoreHandle;\n\n// \u516c\u5171\u53d8\u91cf\nint shareVariable = 0;\n\nvoid task1(void *pvParameters)\n{\n    for (;;)\n    {\n        // \u83b7\u53d6\u4fe1\u53f7\u91cf,\u4fe1\u53f7\u91cf\u53d8\u4e3a0\n        xSemaphoreTake(semaphoreHandle, portMAX_DELAY);\n        for (int i = 0; i &lt; 10; i++)\n        {\n            shareVariable++;\n            ESP_LOGI(TAG, \"task1 shareVariable:%d\", shareVariable);\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n        // \u91ca\u653e\u4fe1\u53f7\u91cf,\u4fe1\u53f7\u91cf\u53d8\u4e3a1\n        xSemaphoreGive(semaphoreHandle);\n        vTaskDelay(pdMS_TO_TICKS(1000));\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    for (;;)\n    {\n        // \u83b7\u53d6\u4fe1\u53f7\u91cf\n        xSemaphoreTake(semaphoreHandle, portMAX_DELAY);\n        for (int i = 0; i &lt; 10; i++)\n        {\n            shareVariable++;\n            ESP_LOGI(TAG, \"task2 shareVariable:%d\", shareVariable);\n            vTaskDelay(pdMS_TO_TICKS(1000));\n        }\n        // \u91ca\u653e\u4fe1\u53f7\u91cf,\u4fe1\u53f7\u91cf\u53d8\u4e3a1\n        xSemaphoreGive(semaphoreHandle);\n        vTaskDelay(pdMS_TO_TICKS(1000));\n    }\n}\n\nvoid app_main(void)\n{\n    semaphoreHandle = xSemaphoreCreateBinary();\n    xSemaphoreGive(semaphoreHandle);\n\n    // \u521b\u5efa\u4efb\u52a1\n    xTaskCreate(task1, \"task1\", 1024 * 2, NULL, 10, NULL);\n    xTaskCreate(task2, \"task2\", 1024 * 2, NULL, 10, NULL);\n}\n</code></pre>"},{"location":"zh/FREERTOS/SEMAPHORE/semaphore/#2","title":"2. \u8ba1\u6570\u4fe1\u53f7\u91cf","text":""},{"location":"zh/FREERTOS/SEMAPHORE/semaphore/#21","title":"2.1 \u793a\u4f8b\u4ee3\u7801\uff1a","text":"<pre><code>// \u8ba1\u6570\u578b\u4fe1\u53f7\u91cf(\u5360\u5ea7)\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"freertos/semphr.h\"\n\nstatic const char *TAG = \"main\";\n\n// \u4fe1\u53f7\u91cf\nSemaphoreHandle_t semaphoreHandle;\n\n\n// \u5360\u5ea7\u4efb\u52a1\nvoid task1(void *pvParameters)\n{\n    // \u5b9a\u4e49\u7a7a\u4f4d\n    int seat = 0;\n    for (;;)\n    {\n        // \u83b7\u53d6\u4fe1\u53f7\u91cf\n        seat = uxSemaphoreGetCount(semaphoreHandle);\n        // \u8f93\u51fa\u7a7a\u4f4d\n        ESP_LOGI(TAG, \"\u5f53\u524d\u7a7a\u4f4d:%d\", seat);\n\n        // \u83b7\u53d6\u4fe1\u53f7\u91cf(\u5360\u5ea7)\n        if (xSemaphoreTake(semaphoreHandle, portMAX_DELAY) == pdPASS)\n        {\n            ESP_LOGI(TAG, \"\u5360\u5ea7\u6210\u529f\");\n        }\n        else\n        {\n            ESP_LOGI(TAG, \"\u5360\u5ea7\u5931\u8d25\");\n        }\n        vTaskDelay(pdMS_TO_TICKS(1000));\n    }\n}\n\n// \u79bb\u5f00\u5ea7\u4f4d\u4efb\u52a1\nvoid task2(void *pvParameters)\n{\n    for (;;)\n    {\n        vTaskDelay(pdMS_TO_TICKS(6000));\n        // \u91ca\u653e\u4fe1\u53f7\u91cf\n        xSemaphoreGive(semaphoreHandle);\n        ESP_LOGI(TAG, \"\u91ca\u653e\u5ea7\u4f4d\");\n    }\n}\n\nvoid app_main(void)\n{\n    semaphoreHandle = xSemaphoreCreateCounting(5, 5);\n\n    // \u521b\u5efa\u5360\u5ea7\u4efb\u52a1\n    xTaskCreate(task1, \"task1\", 1024 * 2, NULL, 10, NULL);\n    // \u521b\u5efa\u79bb\u5f00\u5ea7\u4f4d\u4efb\u52a1\n    xTaskCreate(task2, \"task2\", 1024 * 2, NULL, 10, NULL);\n}\n</code></pre>"},{"location":"zh/FREERTOS/TASK-NOTIFICATION/task-notification/","title":"\u4efb\u52a1\u901a\u77e5 | \u9ad8\u6548\u7684\u4efb\u52a1\u95f4\u901a\u8baf\u673a\u5236","text":"<p>\u53c2\u8003\u51fa\u5904</p> <p>\u672c\u6587\u6863\u53c2\u8003\u4e86DURUOFU\u7684ESP32-\u6559\u7a0b\u3002 </p> <p>\u4efb\u52a1\u901a\u77e5\uff08Task Notifications\uff09\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u4efb\u52a1\u95f4\u901a\u4fe1\u548c\u540c\u6b65\u673a\u5236\uff0c\u5b83\u6bd4\u961f\u5217\u6216\u4e8b\u4ef6\u7ec4\u66f4\u52a0\u9ad8\u6548\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9700\u8981\u52a8\u6001\u5206\u914d\u5185\u5b58\u3002\u6bcf\u4e2a\u4efb\u52a1\u90fd\u5185\u7f6e\u4e86\u4e00\u4e2a\u4efb\u52a1\u901a\u77e5\u503c\uff0c\u5176\u4ed6\u4efb\u52a1\u6216\u4e2d\u65ad\u670d\u52a1\u4f8b\u7a0b\uff08ISR\uff09\u53ef\u4ee5\u7528\u5b83\u6765\u901a\u77e5\u8be5\u4efb\u52a1\u4e8b\u4ef6\u7684\u53d1\u751f\u3002</p> <p>\u7279\u70b9\uff1a</p> <ul> <li> <p>\u6bcf\u4e2a\u4efb\u52a1\u90fd\u6709\u4e00\u4e2a\u4efb\u52a1\u901a\u77e5\u503c\uff0832 \u4f4d\u6574\u6570\uff09\uff0c\u53ef\u4ee5\u7528\u4e8e\u5b58\u50a8\u4fe1\u606f\u3002</p> </li> <li> <p>\u4efb\u52a1\u901a\u77e5\u503c\u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a 0\u3002</p> </li> <li> <p>\u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5\u901a\u8fc7 \u901a\u77e5\u51fd\u6570 \u6765\u64cd\u4f5c\u53e6\u4e00\u4e2a\u4efb\u52a1\u7684\u901a\u77e5\u503c\u3002</p> </li> <li> <p>\u53ef\u4ee5\u5c06\u4efb\u52a1\u901a\u77e5\u503c\u7528\u4f5c\u4e8c\u503c\u4fe1\u53f7\u91cf\u3001\u8ba1\u6570\u4fe1\u53f7\u91cf\u6216\u7b80\u5355\u7684 32 \u4f4d\u53d8\u91cf\u3002</p> </li> <li> <p>\u5f53\u4e00\u4e2a\u4efb\u52a1\u6536\u5230\u901a\u77e5\u65f6\uff0c\u5b83\u53ef\u4ee5\u9009\u62e9\u963b\u585e\uff08\u7b49\u5f85\u901a\u77e5\uff09\u6216\u5904\u7406\u8be5\u901a\u77e5\u3002</p> </li> </ul>"},{"location":"zh/FREERTOS/TASK-NOTIFICATION/task-notification/#1-api","title":"1. API\u8bf4\u660e\uff1a","text":"<p>\u4efb\u52a1\u901a\u77e5\u4e3b\u8981\u6d89\u53ca\u4ee5\u4e0b\u51e0\u4e2a API\uff1a</p> \u51fd\u6570\u540d \u529f\u80fd xTaskNotify \u5411\u6307\u5b9a\u4efb\u52a1\u53d1\u9001\u901a\u77e5\uff0c\u901a\u77e5\u503c\u53ef\u4ee5\u88ab\u8986\u76d6 xTaskNotifyGive \u7b80\u5316\u7248\u901a\u77e5\u51fd\u6570\uff0c\u7528\u4e8e\u53d1\u9001\u4fe1\u53f7\u91cf\u901a\u77e5 xTaskNotifyWait \u7b49\u5f85\u901a\u77e5\u503c\u66f4\u65b0\uff0c\u5e76\u9009\u62e9\u662f\u5426\u6e05\u9664\u901a\u77e5\u503c ulTaskNotifyTake \u7b49\u5f85\u4efb\u52a1\u901a\u77e5\u5e76\u81ea\u52a8\u51cf\u5c11\u901a\u77e5\u503c\uff08\u901a\u5e38\u7528\u4e8e\u8ba1\u6570\u4fe1\u53f7\u91cf\uff09 xTaskNotifyStateClear \u6e05\u9664\u4efb\u52a1\u7684\u901a\u77e5\u72b6\u6001"},{"location":"zh/FREERTOS/TASK-NOTIFICATION/task-notification/#xtasknotify","title":"xTaskNotify","text":"<p>\u529f\u80fd\uff1a \u5411\u6307\u5b9a\u4efb\u52a1\u53d1\u9001\u901a\u77e5\uff0c\u5e76\u4fee\u6539\u8be5\u4efb\u52a1\u7684\u901a\u77e5\u503c\u3002</p> <p>\u539f\u578b\uff1a</p> <p><pre><code>BaseType_t xTaskNotify(\n    TaskHandle_t xTaskToNotify,\n    uint32_t ulValue,\n    eNotifyAction eAction\n);\n</code></pre> \u53c2\u6570\uff1a</p> <ul> <li> <p>xTaskToNotify\uff1a\u63a5\u6536\u901a\u77e5\u7684\u4efb\u52a1\u53e5\u67c4\u3002</p> </li> <li> <p>ulValue\uff1a\u8981\u53d1\u9001\u7684\u901a\u77e5\u503c\u3002</p> </li> <li> <p>eAction\uff1a\u901a\u77e5\u503c\u7684\u64cd\u4f5c\u7c7b\u578b\u3002</p> </li> <li> <p>eSetBits\uff1a\u8bbe\u7f6e\u901a\u77e5\u503c\u7684\u6307\u5b9a\u4f4d\u3002</p> </li> <li> <p>eIncrement\uff1a\u901a\u77e5\u503c\u9012\u589e\u3002</p> </li> <li> <p>eSetValueWithOverwrite\uff1a\u8986\u76d6\u901a\u77e5\u503c\u3002</p> </li> <li> <p>eSetValueWithoutOverwrite\uff1a\u5982\u679c\u901a\u77e5\u503c\u672a\u5904\u7406\uff0c\u5219\u4e0d\u8986\u76d6\u5f53\u524d\u503c\u3002</p> </li> </ul> <p>\u8fd4\u56de\u503c\uff1a</p> <ul> <li> <p>pdPASS\uff1a\u64cd\u4f5c\u6210\u529f\u3002</p> </li> <li> <p>pdFAIL\uff1a\u64cd\u4f5c\u5931\u8d25\uff08\u901a\u5e38\u5728 eSetValueWithoutOverwrite \u65f6\u53d1\u751f\uff09\u3002</p> </li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>xTaskNotify(xTaskHandle, 0x01, eSetBits); // \u8bbe\u7f6e\u4efb\u52a1\u901a\u77e5\u503c\u7684\u7b2c 0 \u4f4d\n</code></pre>"},{"location":"zh/FREERTOS/TASK-NOTIFICATION/task-notification/#xtasknotifygive","title":"xTaskNotifyGive","text":"<p>\u529f\u80fd\uff1a \u5411\u4efb\u52a1\u53d1\u9001\u4e00\u4e2a \"\u4fe1\u53f7\u91cf\u98ce\u683c\" \u7684\u901a\u77e5\uff0c\u7b49\u6548\u4e8e xTaskNotify() \u7684 eIncrement \u6a21\u5f0f\u3002</p> <p>\u539f\u578b\uff1a</p> <pre><code>void xTaskNotifyGive(TaskHandle_t xTaskToNotify);\n</code></pre> <p>\u53c2\u6570\uff1a</p> <ul> <li>xTaskToNotify\uff1a\u63a5\u6536\u901a\u77e5\u7684\u4efb\u52a1\u53e5\u67c4\u3002</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>xTaskNotifyGive(xTaskHandle); // \u53d1\u9001\u901a\u77e5\uff0c\u901a\u77e5\u503c\u9012\u589e 1\n</code></pre>"},{"location":"zh/FREERTOS/TASK-NOTIFICATION/task-notification/#ultasknotifytake","title":"ulTaskNotifyTake","text":"<p>\u529f\u80fd\uff1a \u4efb\u52a1\u7b49\u5f85\u901a\u77e5\uff0c\u5e76\u5728\u63a5\u6536\u5230\u901a\u77e5\u65f6\u81ea\u52a8\u51cf\u5c11\u901a\u77e5\u503c\uff08\u901a\u5e38\u7528\u4e8e\u5b9e\u73b0\u8ba1\u6570\u4fe1\u53f7\u91cf\uff09\u3002</p> <p>\u539f\u578b\uff1a</p> <p><pre><code>uint32_t ulTaskNotifyTake(BaseType_t xClearCountOnExit, TickType_t xTicksToWait);\n</code></pre> \u53c2\u6570\uff1a</p> <ul> <li> <p>xClearCountOnExit\uff1a   pdTRUE\uff1a\u9000\u51fa\u7b49\u5f85\u65f6\u5c06\u901a\u77e5\u503c\u6e05\u96f6\u3002   pdFALSE\uff1a\u9000\u51fa\u7b49\u5f85\u65f6\u4fdd\u7559\u5269\u4f59\u901a\u77e5\u503c\u3002</p> </li> <li> <p>xTicksToWait\uff1a\u7b49\u5f85\u901a\u77e5\u7684\u65f6\u95f4\uff08Tick \u6570\uff0cportMAX_DELAY \u8868\u793a\u65e0\u9650\u7b49\u5f85\uff09\u3002</p> </li> </ul> <p>\u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u901a\u77e5\u503c\uff08\u5982\u679c\u662f\u8ba1\u6570\u4fe1\u53f7\u91cf\uff0c\u8868\u793a\u5269\u4f59\u4fe1\u53f7\u91cf\u8ba1\u6570\uff09\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>if (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) &gt; 0) {\n    // \u6536\u5230\u901a\u77e5\uff0c\u5904\u7406\u4efb\u52a1\n}\n</code></pre>"},{"location":"zh/FREERTOS/TASK-NOTIFICATION/task-notification/#xtasknotifywait","title":"xTaskNotifyWait","text":"<p>\u529f\u80fd\uff1a \u4efb\u52a1\u7b49\u5f85\u901a\u77e5\uff0c\u53ef\u4ee5\u9009\u62e9\u83b7\u53d6\u901a\u77e5\u503c\u7684\u5185\u5bb9\uff0c\u5e76\u51b3\u5b9a\u662f\u5426\u6e05\u9664\u901a\u77e5\u503c\u3002</p> <p>\u539f\u578b\uff1a</p> <p><pre><code>BaseType_t xTaskNotifyWait(\n    uint32_t ulBitsToClearOnEntry,\n    uint32_t ulBitsToClearOnExit,\n    uint32_t *pulNotificationValue,\n    TickType_t xTicksToWait\n);\n</code></pre> \u53c2\u6570\uff1a</p> <ul> <li> <p>ulBitsToClearOnEntry\uff1a\u8fdb\u5165\u7b49\u5f85\u65f6\u6e05\u9664\u7684\u901a\u77e5\u503c\u4f4d\u3002</p> </li> <li> <p>ulBitsToClearOnExit\uff1a\u9000\u51fa\u7b49\u5f85\u65f6\u6e05\u9664\u7684\u901a\u77e5\u503c\u4f4d\u3002</p> </li> <li> <p>pulNotificationValue\uff1a\u4fdd\u5b58\u901a\u77e5\u503c\u7684\u6307\u9488\u3002</p> </li> <li> <p>xTicksToWait\uff1a\u7b49\u5f85\u65f6\u95f4\uff08Tick \u6570\uff09\u3002</p> </li> </ul> <p>\u8fd4\u56de\u503c\uff1a</p> <ul> <li> <p>pdTRUE\uff1a\u6536\u5230\u901a\u77e5\u3002</p> </li> <li> <p>pdFALSE\uff1a\u8d85\u65f6\u672a\u6536\u5230\u901a\u77e5\u3002</p> </li> </ul> <p>\u793a\u4f8b\uff1a <pre><code>uint32_t ulNotificationValue;\nif (xTaskNotifyWait(0x00, 0xFFFFFFFF, &amp;ulNotificationValue, portMAX_DELAY) == pdTRUE) {\n    // \u6536\u5230\u901a\u77e5\uff0culNotificationValue \u4fdd\u5b58\u901a\u77e5\u503c\n}\n</code></pre></p>"},{"location":"zh/FREERTOS/TASK-NOTIFICATION/task-notification/#xtasknotifystateclear","title":"xTaskNotifyStateClear","text":"<p>\u529f\u80fd\uff1a \u6e05\u9664\u4efb\u52a1\u7684\u901a\u77e5\u72b6\u6001\uff08\u5373\u6807\u8bb0\u4efb\u52a1\u4e3a\u201c\u672a\u901a\u77e5\u201d\uff09\u3002</p> <p>\u539f\u578b\uff1a</p> <p><pre><code>void vTaskNotifyStateClear(TaskHandle_t xTask);\n</code></pre> \u53c2\u6570\uff1axTask\uff1a\u9700\u8981\u6e05\u9664\u901a\u77e5\u72b6\u6001\u7684\u4efb\u52a1\u53e5\u67c4\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>vTaskNotifyStateClear(xTaskHandle); // \u6e05\u9664\u901a\u77e5\u72b6\u6001\n</code></pre>"},{"location":"zh/FREERTOS/TASK-NOTIFICATION/task-notification/#2","title":"2. \u793a\u4f8b\u4ee3\u7801\uff1a","text":""},{"location":"zh/FREERTOS/TASK-NOTIFICATION/task-notification/#1","title":"1.\u76f4\u63a5\u4efb\u52a1\u901a\u77e5","text":"<p>\u7531task2\u63a7\u5236task1\u7684\u8fd0\u884c\uff1a <pre><code>// \u4e8b\u4ef6\u7ec4\n#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\nstatic const char *TAG = \"main\";\n\nstatic TaskHandle_t xTask1 = NULL, xTask2 = NULL;\n\nvoid task1(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task1\u542f\u52a8!\");\n\n    while (1)\n    {\n        ESP_LOGI(TAG, \"task1: \u7b49\u5f85task\u901a\u77e5\");\n        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);\n\n        ESP_LOGI(TAG, \"task1: \u6536\u5230task\u901a\u77e5\");\n        vTaskDelay(pdMS_TO_TICKS(3000));\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task2\u542f\u52a8!\");\n\n    while (1)\n    {\n        vTaskDelay(pdMS_TO_TICKS(5000));\n        ESP_LOGI(TAG, \"task2: \u53d1\u9001task\u901a\u77e5\");\n        xTaskNotifyGive(xTask1);\n    }\n}\n\nvoid app_main(void)\n{\n\n    xTaskCreate(task1, \"task1\", 1024 * 2, NULL, 1, &amp;xTask1);\n    xTaskCreate(task2, \"task2\", 1024 * 2, NULL, 1, &amp;xTask2);\n}\n</code></pre></p>"},{"location":"zh/FREERTOS/TASK-NOTIFICATION/task-notification/#2_1","title":"2.\u4efb\u52a1\u901a\u77e5\u503c","text":"<p>\u4efb\u52a1\u901a\u77e5\u503c\u6309\u4f4d\u5224\u65ad-\u4ee3\u66ff\u961f\u5217\u90ae\u7bb1\u6216\u8005\u4e8b\u4ef6\u7ec4</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"esp_log.h\"\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\nstatic const char *TAG = \"main\";\n\nstatic TaskHandle_t xTask1 = NULL, xTask2 = NULL;\n\nvoid task1(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task1\u542f\u52a8!\");\n\n    uint32_t ulNotifiedValue;\n\n    while (1)\n    {\n        ESP_LOGI(TAG, \"task1: \u7b49\u5f85task\u901a\u77e5\");\n        xTaskNotifyWait(0x00, ULONG_MAX, &amp;ulNotifiedValue, portMAX_DELAY);\n        // \u901a\u8fc7\u4e0d\u540c\u7684bit\u4f4d\u6765\u5224\u65ad\u901a\u77e5\u7684\u6765\u6e90\n        if ((ulNotifiedValue &amp; 0x01) != 0)\n        {\n            ESP_LOGI(TAG, \"task1: \u6536\u5230task\u901a\u77e5-bit0\");\n        }\n        if ((ulNotifiedValue &amp; 0x02) != 0)\n        {\n            ESP_LOGI(TAG, \"task1: \u6536\u5230task\u901a\u77e5-bit1\");\n        }\n        if ((ulNotifiedValue &amp; 0x04) != 0)\n        {\n            ESP_LOGI(TAG, \"task1: \u6536\u5230task\u901a\u77e5-bit2\");\n        }\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    ESP_LOGI(TAG, \"-------------------------------\");\n    ESP_LOGI(TAG, \"task2\u542f\u52a8!\");\n\n    while (1)\n    {\n        vTaskDelay(pdMS_TO_TICKS(5000));\n        ESP_LOGI(TAG, \"task2: \u53d1\u9001task\u901a\u77e5-bit0\");\n        xTaskNotify(xTask1, 0x01, eSetValueWithOverwrite);\n\n        vTaskDelay(pdMS_TO_TICKS(5000));\n        ESP_LOGI(TAG, \"task2: \u53d1\u9001task\u901a\u77e5-bit1\");\n        xTaskNotify(xTask1, 0x02, eSetValueWithOverwrite);\n\n        vTaskDelay(pdMS_TO_TICKS(5000));\n        ESP_LOGI(TAG, \"task2: \u53d1\u9001task\u901a\u77e5-bit2\");\n        xTaskNotify(xTask1, 0x04, eSetValueWithOverwrite);\n\n    }\n}\n\nvoid app_main(void)\n{\n\n    xTaskCreate(task1, \"task1\", 1024 * 4, NULL, 1, &amp;xTask1);\n    xTaskCreate(task2, \"task2\", 1024 * 4, NULL, 1, &amp;xTask2);\n}\n</code></pre>"},{"location":"zh/GET_STARTED/COMMON-COMMAND/common-command/","title":"\u5e38\u89c1\u547d\u4ee4","text":"<p>\u521b\u5efa\u5de5\u7a0b</p> <pre><code>idf.py create-project &lt;project_name&gt;\n</code></pre> <p>\u521b\u5efa\u7ec4\u4ef6</p> <pre><code>idf.py -C &lt;component_dir&gt;   create-component &lt;component_name&gt;\n</code></pre> <p>\u9009\u62e9\u82af\u7247\u578b\u53f7</p> <pre><code>idf.py set-target &lt;target&gt;\n</code></pre> <p>\u7f16\u8bd1\u5de5\u7a0b</p> <pre><code>idf.py build\n</code></pre> <p>\u6e05\u9664\u7f16\u8bd1\u7ed3\u679c</p> <pre><code>idf.py fullclean\n</code></pre> <p>\u5411\u4e32\u53e3\u70e7\u5f55\u56fa\u4ef6</p> <pre><code>idf.py -p &lt;port&gt; flash\n</code></pre> <p>\u6253\u5f00\u4e32\u53e3\u76d1\u89c6\u5668</p> <pre><code>idf.py -p &lt;port&gt; monitor\n</code></pre> <p>\u914d\u7f6e\u83dc\u5355</p> <pre><code>idf.py menuconfig\n</code></pre> <p>\u7f16\u8bd1+\u70e7\u5f55+\u76d1\u89c6\u5668</p> <pre><code>idf.py build flash monitor\n</code></pre>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/","title":"ESP32 \u5f00\u53d1\u73af\u5883\u8bbe\u7f6e","text":"<p>Tip</p> <p>\u5728\u7ee7\u7eed\u4e4b\u524d\uff0c\u5f3a\u70c8\u5efa\u8bae\u60a8\u9605\u8bfb\u5b98\u65b9\u6307\u5357\u4ee5\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\u3002\u5b98\u65b9\u6307\u5357\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002</p> <p>Note</p> <p>\u5982\u9700\u5728 ESP32 \u4e0a\u4f7f\u7528 ESP-IDF\uff0c\u8bf7\u5b89\u88c5\u4ee5\u4e0b\u8f6f\u4ef6\uff1a</p> <ul> <li> <p>\u8bbe\u7f6e\u5de5\u5177\u94fe\uff0c\u7528\u4e8e\u7f16\u8bd1 ESP32 \u4ee3\u7801\uff1b</p> </li> <li> <p>\u7f16\u8bd1\u6784\u5efa\u5de5\u5177 \u2014\u2014 CMake\u548cNinja\u7f16\u8bd1\u6784\u5efa\u5de5\u5177\uff0c\u7528\u4e8e\u7f16\u8bd1ESP32\u5e94\u7528\u7a0b\u5e8f\uff1b</p> </li> <li> <p>\u83b7\u53d6ESP-IDF\u8f6f\u4ef6\u5f00\u53d1\u6846\u67b6\u3002\u8be5\u6846\u67b6\u5df2\u7ecf\u57fa\u672c\u5305\u542bESP32\u4f7f\u7528\u7684API\uff08\u8f6f\u4ef6\u5e93\u548c\u6e90\u4ee3\u7801\uff09\u548c\u8fd0\u884c\u5de5\u5177\u94fe\u7684\u811a\u672c\uff1b</p> </li> </ul> <p></p> <p>Note</p> <p>\u6709\u4e24\u79cd ESP32 ESP-IDF \u7f16\u7a0b\u65b9\u5f0f\uff1a</p> <ul> <li> <p>\u547d\u4ee4\u884c\u754c\u9762\uff08CLI\uff09\uff1aESP-IDF \u7f16\u7a0b\u7684\u57fa\u7840\uff1b</p> </li> <li> <p>\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08IDE\uff09\uff1a\u9002\u5408\u521d\u5b66\u8005\u3002</p> </li> </ul>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#cli","title":"CLI","text":"<ul> <li> <p> How to Install the ESP-IDF Toolchain on Windows (CLI)</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#ide","title":"IDE","text":"<ul> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011\uff5c\u4f7f\u7528\u4e00\u952e\u5b89\u88c5\u5de5\u5177\u5feb\u901f\u642d\u5efa ESP-IDF \u5f00\u53d1\u73af\u5883 (Windows) \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#linux","title":"LINUX","text":"<p>Tip</p> <p>ESP-IDF \u5728 Linux \u4e0a\u6bd4\u5728 Windows \u4e0a\u5feb\u5f97\u591a\u3002\u5efa\u8bae\u4f7f\u7528 Linux \u8fdb\u884c ESP-IDF \u5f00\u53d1\u3002</p>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#cli_1","title":"CLI \ud83c\udfaf","text":"<p>Note</p> <p>\u4e00\u5171\u6709\u4e94\u4e2a\u6b65\u9aa4\uff1a</p> <ul> <li> <p>\u7b2c\u4e00\u6b65\uff1a\u5b89\u88c5\u51c6\u5907</p> </li> <li> <p>\u7b2c\u4e8c\u6b65\uff1a\u83b7\u53d6ESP-IDF</p> </li> <li> <p>\u7b2c\u4e09\u6b65\uff1a\u8bbe\u7f6e\u5de5\u5177</p> </li> <li> <p>\u7b2c\u56db\u6b65\uff1a\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf</p> </li> <li> <p>\u7b2c\u4e94\u6b65\uff1a\u5f00\u59cb\u4f7f\u7528</p> </li> </ul>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#-","title":"\u7b2c\u4e00\u6b65 - \u5b89\u88c5\u51c6\u5907","text":"<ul> <li>UBUNTU &amp; DEBIAN</li> </ul> <pre><code>sudo apt-get install git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0\n</code></pre> <ul> <li>CENTOS</li> </ul> <pre><code>sudo yum -y update &amp;&amp; sudo yum install git wget flex bison gperf python3 python3-setuptools cmake ninja-build ccache dfu-util libusbx\n</code></pre>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#-esp-idf","title":"\u7b2c\u4e8c\u6b65 - \u83b7\u53d6 ESP-IDF","text":"<p>\u5728\u56f4\u7ed5 ESP32 \u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\uff0c\u8bf7\u5148\u83b7\u53d6\u4e50\u946b\u63d0\u4f9b\u7684\u8f6f\u4ef6\u5e93\u6587\u4ef6 ESP-IDF \u4ed3\u5e93\u3002</p> <p>\u83b7\u53d6 ESP-IDF \u7684\u672c\u5730\u526f\u672c\uff1a\u6253\u5f00\u7ec8\u7aef\uff0c\u5207\u6362\u5230\u8981\u4fdd\u5b58 ESP-IDF \u7684\u5de5\u4f5c\u76ee\u5f55\uff0c\u4f7f\u7528 git clone \u547d\u4ee4\u514b\u9686\u8fdc\u7a0b\u4ed3\u5e93\u3002\u9488\u5bf9\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u7684\u8be6\u7ec6\u6b65\u9aa4\uff0c\u8bf7\u89c1\u4e0b\u6587\u3002</p> <p>\u6253\u5f00\u7ec8\u7aef\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <p><pre><code>mkdir -p ~/esp\ncd ~/esp\ngit clone --recursive https://github.com/espressif/esp-idf.git\n</code></pre> ESP-IDF \u5c06\u4e0b\u8f7d\u81f3 <code>~/esp/esp-idf</code>\u3002</p> <p>\u8bf7\u524d\u5f80ESP-IDF \u7248\u672c\u7b80\u4ecb\uff0c\u67e5\u770b ESP-IDF \u4e0d\u540c\u7248\u672c\u7684\u5177\u4f53\u9002\u7528\u573a\u666f\u3002</p>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#-_1","title":"\u7b2c\u4e09\u6b65 - \u8bbe\u7f6e\u5de5\u5177","text":"<p>\u9664\u4e86 ESP-IDF \u672c\u8eab\uff0c\u8fd8\u9700\u8981\u4e3a\u652f\u6301 ESP32 \u7684\u9879\u76ee\u5b89\u88c5 ESP-IDF \u4f7f\u7528\u7684\u5404\u79cd\u5de5\u5177\uff0c\u6bd4\u5982\u7f16\u8bd1\u5668\u3001\u8c03\u8bd5\u5668\u3001Python \u5305\u7b49\u3002</p> <pre><code>cd ~/esp/esp-idf\n./install.sh all\n</code></pre>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#-_2","title":"\u7b2c\u56db\u6b65 - \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf","text":"<p>\u6b64\u65f6\uff0c\u521a\u521a\u5b89\u88c5\u7684\u5de5\u5177\u5c1a\u672a\u6dfb\u52a0\u81f3 PATH \u73af\u5883\u53d8\u91cf\uff0c\u65e0\u6cd5\u901a\u8fc7\u201c\u547d\u4ee4\u7a97\u53e3\u201d\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u3002\u56e0\u6b64\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7 ESP-IDF \u63d0\u4f9b\u7684\u53e6\u4e00\u4e2a\u811a\u672c\u8fdb\u884c\u8bbe\u7f6e\u3002</p> <p>\u8bf7\u5728\u9700\u8981\u8fd0\u884c ESP-IDF \u7684\u7ec8\u7aef\u7a97\u53e3\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>. $HOME/esp/esp-idf/export.sh\n</code></pre> <p>\u5982\u679c\u9700\u8981\u7ecf\u5e38\u8fd0\u884c ESP-IDF\uff0c\u53ef\u4ee5\u4e3a\u6267\u884c export.sh \u521b\u5efa\u4e00\u4e2a\u522b\u540d\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <p>(1) \u6253\u5f00 shell \u914d\u7f6e\u6587\u4ef6</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>(2) \u590d\u5236\u5e76\u7c98\u8d34\u4ee5\u4e0b\u547d\u4ee4\u5230 shell \u914d\u7f6e\u6587\u4ef6\u4e2d</p> <pre><code>alias get_idf='. $HOME/esp/esp-idf/export.sh'\n</code></pre> <p>(3) \u901a\u8fc7\u91cd\u542f\u7ec8\u7aef\u7a97\u53e3\u6216\u8fd0\u884c <code>source [path to profile]</code>\uff0c\u5982 <code>source ~/.bashrc</code> \u6765\u5237\u65b0\u914d\u7f6e\u6587\u4ef6\u3002</p> <p>\u73b0\u5728\u53ef\u4ee5\u5728\u4efb\u4f55\u7ec8\u7aef\u7a97\u53e3\u4e2d\u8fd0\u884c <code>get_idf</code> \u6765\u8bbe\u7f6e\u6216\u5237\u65b0 ESP-IDF \u73af\u5883\u3002</p> <p>\u4e0d\u5efa\u8bae\u76f4\u63a5\u5c06 <code>export.sh</code> \u6dfb\u52a0\u5230 shell \u7684\u914d\u7f6e\u6587\u4ef6\u3002\u8fd9\u6837\u505a\u4f1a\u5bfc\u81f4\u5728\u6bcf\u4e2a\u7ec8\u7aef\u4f1a\u8bdd\u4e2d\u90fd\u6fc0\u6d3b IDF \u865a\u62df\u73af\u5883\uff08\u5305\u62ec\u65e0\u9700\u4f7f\u7528 ESP-IDF \u7684\u4f1a\u8bdd\uff09\u3002\u8fd9\u8fdd\u80cc\u4e86\u4f7f\u7528\u865a\u62df\u73af\u5883\u7684\u76ee\u7684\uff0c\u8fd8\u53ef\u80fd\u5f71\u54cd\u5176\u4ed6\u8f6f\u4ef6\u7684\u4f7f\u7528\u3002</p>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#-_3","title":"\u7b2c\u4e94\u6b65 - \u5f00\u59cb\u4f7f\u7528","text":"<p>\u8bf7\u53c2\u8003\u5176\u4ed6\u6559\u7a0b\uff0c\u5f00\u59cb\u4f7f\u7528 ESP-IDF\u3002</p>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#ide_1","title":"IDE","text":"<ul> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011\uff5c\u4f7f\u7528 VS Code \u5feb\u901f\u642d\u5efa ESP-IDF \u5f00\u53d1\u73af\u5883 (Windows\u3001Linux\u3001MacOS) \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>Recommended.</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#esp-idf","title":"\u5378\u8f7dESP-IDF","text":"<p>(1) \u5220\u9664 ESP-IDF \u6587\u4ef6\u5939</p> <p>\u9996\u5148\uff0c\u627e\u5230\u5b89\u88c5 ESP-IDF \u7684\u76ee\u5f55\uff08\u901a\u5e38\u5728 <code>~/esp/esp-idf</code>\uff09\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5220\u9664\u8be5\u76ee\u5f55\uff1a</p> <pre><code>rm -rf ~/esp/esp-idf\n</code></pre> <p>(2) \u5220\u9664\u5de5\u5177\u94fe</p> <p>ESP-IDF \u7684 install.sh \u811a\u672c\u4f1a\u4e0b\u8f7d\u5e76\u5b89\u88c5\u4e00\u4e9b\u5de5\u5177\u94fe\u548c\u4f9d\u8d56\uff0c\u901a\u5e38\u4f4d\u4e8e <code>~/.espressif</code> \u76ee\u5f55\u3002\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5220\u9664\u8be5\u76ee\u5f55\uff1a</p> <pre><code>rm -rf ~/.espressif\n</code></pre> <p>(3) \u5220\u9664\u73af\u5883\u53d8\u91cf \u5982\u679c\u4f60\u5728 shell \u914d\u7f6e\u6587\u4ef6\uff08\u4f8b\u5982 <code>~/.bashrc</code> \u6216 <code>~/.zshrc</code>\uff09\u4e2d\u6dfb\u52a0\u4e86\u7528\u4e8e\u5feb\u901f\u52a0\u8f7d ESP-IDF \u73af\u5883\u53d8\u91cf\u7684\u522b\u540d\uff08\u5982 <code>get_idf</code>\uff09\uff0c\u5219\u9700\u8981\u7f16\u8f91\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u5e76\u5220\u9664\u8be5\u522b\u540d\u3002\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u6253\u5f00\u5e76\u7f16\u8f91\u6587\u4ef6</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>(4) \u5237\u65b0\u914d\u7f6e\u6587\u4ef6</p> <p>\u6700\u540e\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u4f7f\u66f4\u6539\u751f\u6548\uff1a</p> <pre><code>source ~/.bashrc\n</code></pre>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#vscode-esp-idf","title":"VSCode ESP-IDF\u63d2\u4ef6","text":"<p>Note</p> <p>\u8fd9\u662f\u5f53\u524d\u6700\u6d41\u884c\u7684ESP-IDF\u5f00\u53d1\u65b9\u5f0f\u4e4b\u4e00\u3002VSCode\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u4ee3\u7801\u7f16\u8f91\u5668\uff0c\u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u5305\u62ecC/C++\u3002ESP-IDF\u63d2\u4ef6\u4e3aVSCode\u63d0\u4f9b\u4e86\u5bf9ESP-IDF\u7684\u5b8c\u6574\u652f\u6301\uff0c\u5305\u62ec\u4ee3\u7801\u81ea\u52a8\u5b8c\u6210\u3001\u8c03\u8bd5\u3001\u6784\u5efa\u548c\u70e7\u5f55\u7b49\u529f\u80fd\u3002</p> <ol> <li> <p>\u5b89\u88c5VSCode</p> <p>\u9996\u5148\uff0c\u4f60\u9700\u8981\u5b89\u88c5VSCode\u3002\u4f60\u53ef\u4ee5\u4ece\u8fd9\u91cc\u4e0b\u8f7d\u9002\u7528\u4e8e\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b89\u88c5\u7a0b\u5e8f\u3002</p> </li> <li> <p>\u5b89\u88c5ESP-IDF\u63d2\u4ef6</p> <p>\u5b89\u88c5ESP-IDF\u63d2\u4ef6\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ul> <li>\u6253\u5f00VSCode\u3002</li> <li>\u70b9\u51fb\u5de6\u4fa7\u7684\u6269\u5c55\u56fe\u6807\u3002</li> <li>\u5728\u641c\u7d22\u6846\u4e2d\u8f93\u5165\u201cESP-IDF\u201d\u3002</li> <li>\u70b9\u51fb\u201c\u5b89\u88c5\u201d\u6309\u94ae\u3002</li> </ul> </li> <li> <p>\u914d\u7f6eESP-IDF\u8def\u5f84 \u548c ESP-IDF tools\u8def\u5f84</p> <p>\u5b89\u88c5ESP-IDF\u63d2\u4ef6\u540e\uff0c\u4f60\u9700\u8981\u914d\u7f6eESP-IDF\u8def\u5f84\u548cESP-IDF tools\u8def\u5f84\u3002\u8fd9\u4e9b\u8def\u5f84\u544a\u8bc9\u63d2\u4ef6\u5728\u54ea\u91cc\u627e\u5230ESP-IDF\u548c\u76f8\u5173\u5de5\u5177\u3002</p> <ul> <li>\u6253\u5f00VSCode\u3002</li> <li>\u70b9\u51fb\u5de6\u4e0b\u89d2\u7684\u201c\u8bbe\u7f6e\u201d\u56fe\u6807\u3002</li> <li>\u5728\u641c\u7d22\u6846\u4e2d\u8f93\u5165\u201cESP-IDF\u201d\u3002</li> <li>\u5728\u201cESP-IDF\u8def\u5f84\u201d\u548c\u201cESP-IDF tools\u8def\u5f84\u201d\u5b57\u6bb5\u4e2d\u8f93\u5165ESP-IDF\u548cESP-IDF tools\u7684\u8def\u5f84\u3002\uff08\u5982\u679c\u7535\u8111\u4e0a\u6ca1\u6709\uff0c\u8bbe\u7f6e\u597d\u8def\u5f84\uff0c\u63d2\u4ef6\u4f1a\u81ea\u52a8\u4e0b\u8f7d\uff09</li> <li>\u4fdd\u5b58\u8bbe\u7f6e\u3002</li> </ul> </li> <li> <p>\u521b\u5efa\u65b0\u9879\u76ee</p> </li> </ol>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/","title":"\u4e0a\u624b\u5b9e\u8df5","text":""},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_2","title":"\u7a0b\u5e8f\u51c6\u5907","text":"<p>\u8fd9\u91cc\u6211\u4eec\u627e\u4e00\u4e2a\u5408\u9002\u7684\u8def\u5f84\uff0c\u4e0b\u8f7d\u4e00\u4e9b\u6848\u4f8b\u7a0b\u5e8f\uff1a</p> <pre><code>git clone --recursive https://gitee.com/vi-iot/esp32-board.git\n</code></pre>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_3","title":"\u786c\u4ef6\u51c6\u5907","text":"<p>\u5c06ESP32\u5f00\u53d1\u677f\u4e0e\u7535\u8111\u8fde\u63a5</p>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_4","title":"\u9009\u5b9a\u6848\u4f8b\u7a0b\u5e8f","text":"<p>\u8fdb\u5165\u6211\u4eec\u521a\u521a\u4e0b\u8f7d\u7684\u4ed3\u5e93esp32-board\uff0c\u627e\u5230\u4e00\u4e2a\u6848\u4f8b\u7a0b\u5e8f\uff0c\u6bd4\u5982<code>helloworld</code>\uff0c\u8fdb\u5165\u8be5\u76ee\u5f55\uff1a</p> <pre><code>cd esp32-board\ncd helloworld\n</code></pre>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_5","title":"\u8bbe\u5b9a\u5f00\u53d1\u677f\u7c7b\u578b","text":"<p>ESP32\u73af\u5883\u95ee\u9898</p> <p>\u5982\u679c\u4f60\u5f53\u524d\u4e0d\u5728ESP32\u73af\u5883\u4e2d\uff0c\u53ef\u4ee5\u8f93\u5165<code>get_idf</code>\u6765\u8c03\u7528ESP32\u73af\u5883\u3002\u6ce8\u610f\uff0c\u53ea\u6709\u6b63\u786e\u8bbe\u7f6e\u4e86SHELL\u4e2d\u7684\u522b\u540d\u540e\uff0c\u624d\u80fd\u4f7f\u7528<code>get_idf</code>, \u8bf7\u53c2\u8003\u4e0a\u4e00\u7bc7\u6559\u7a0b\u3002</p> <p>\u5982\u679c\u662f\u4e00\u822c\u7684esp32\u5f00\u53d1\u677f\uff0c\u8fd9\u4e00\u6b65\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u7ba1\uff0c\u4f46\u662f\u5982\u679c\u662f\u5176\u4ed6\u5f00\u53d1\u677f\uff0c\u6700\u597d\u6307\u5b9a\u4e00\u4e0b\u5f00\u53d1\u677f\u7c7b\u578b\uff0c\u6bd4\u5982esp32-s3\uff1a</p> <pre><code>idf.py set-target esp32s3\n</code></pre>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_6","title":"\u7f16\u8bd1\u7a0b\u5e8f","text":"<pre><code>idf.py build\n</code></pre>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_7","title":"\u70e7\u5f55\u7a0b\u5e8f","text":"<p><pre><code>idf.py flash\n</code></pre> \u6ce8\u610f\uff0c\u53ef\u4ee5\u67e5\u770b\u8bbe\u5907\u6240\u5728usb\u7aef\u53e3\uff1a</p> <pre><code>ls /dev/tty*\n</code></pre> <p>\u901a\u8fc7\u94fe\u63a5/\u975e\u94fe\u63a5\u5bf9\u6bd4\uff0c\u627e\u5230\u8bbe\u5907\u6240\u5728\u7aef\u53e3\uff0c\u6bd4\u5982<code>/dev/ttyACM1</code>\uff0c\u7136\u540e\u70e7\u5f55\u7a0b\u5e8f\uff1a</p> <pre><code>idf.py -p /dev/ttyACM1 flash\n</code></pre>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_8","title":"\u76d1\u6d4b\u7a0b\u5e8f\u8fd0\u884c","text":"<pre><code>idf.py monitor\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u6307\u5b9a\u7aef\u53e3\uff1a</p> <pre><code>idf.py -p /dev/ttyACM1 monitor\n</code></pre>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_9","title":"\u9000\u51fa\u76d1\u6d4b","text":"<p>\u6309\u4e0b<code>Ctrl</code> + <code>]</code>\u5373\u53ef\u9000\u51fa\u76d1\u6d4b\u3002</p>"},{"location":"zh/GET_STARTED/HARDWARE/hardware/","title":"\u786c\u4ef6\u5e73\u53f0","text":"<p>DNESP32S3M</p> <p>\u672c\u6587\u6863\u4f7f\u7528\u7684\u786c\u4ef6\u5e73\u53f0\u4e3a\u6b63\u70b9\u539f\u5b50\u7684DNESP32S3M,\u57fa\u4e8eESP32-S3\uff0c\u5982\u4e0a\u56fe\u6240\u793a\u3002\u76f8\u5173\u7a0b\u5e8f\u8fc1\u79fb\u5230\u5176\u4ed6\u5f00\u53d1\u677f\u5e94\u8be5\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8fdb\u884c\u9002\u914d\u3002</p> <p>DNESP32S3M \u786c\u4ef6\u7279\u6027</p> <p>ESP32-S3 SoC \u82af\u7247\u652f\u6301\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ul> <li> <p>2.4 GHz Wi-Fi</p> </li> <li> <p>\u4f4e\u529f\u8017\u84dd\u7259</p> </li> <li> <p>\u9ad8\u6027\u80fd Xtensa\u00ae 32 \u4f4d LX7 \u53cc\u6838\u5904\u7406\u5668</p> </li> <li> <p>\u8fd0\u884c RISC-V \u6216 FSM \u5185\u6838\u7684\u8d85\u4f4e\u529f\u8017\u534f\u5904\u7406\u5668</p> </li> <li> <p>\u591a\u79cd\u5916\u8bbe</p> </li> <li> <p>\u5185\u7f6e\u5b89\u5168\u786c\u4ef6</p> </li> <li> <p>USB OTG \u63a5\u53e3</p> </li> <li> <p>USB \u4e32\u53e3/JTAG \u63a7\u5236\u5668</p> </li> </ul> <p>ESP32-S3 \u91c7\u7528 40 nm \u5de5\u827a\u5236\u6210\uff0c\u5177\u6709\u6700\u4f73\u7684\u529f\u8017\u6027\u80fd\u3001\u5c04\u9891\u6027\u80fd\u3001\u7a33\u5b9a\u6027\u3001\u901a\u7528\u6027\u548c\u53ef\u9760\u6027\uff0c\u9002\u7528\u4e8e\u5404\u79cd\u5e94\u7528\u573a\u666f\u548c\u4e0d\u540c\u529f  \u8017\u9700\u6c42\u3002</p> <p>\u4e50\u946b\u4e3a\u7528\u6237\u63d0\u4f9b\u5b8c\u6574\u7684\u8f6f\u3001\u786c\u4ef6\u8d44\u6e90\uff0c\u8fdb\u884c ESP32-S3 \u786c\u4ef6\u8bbe\u5907\u7684\u5f00\u53d1\u3002\u5176\u4e2d\uff0c\u4e50\u946b\u7684\u8f6f\u4ef6\u5f00\u53d1\u73af\u5883 ESP-IDF \u65e8\u5728\u534f\u52a9\u7528\u6237\u5feb \u901f\u5f00\u53d1\u7269\u8054\u7f51 (IoT) \u5e94\u7528\uff0c\u53ef\u6ee1\u8db3\u7528\u6237\u5bf9 Wi-Fi\u3001\u84dd\u7259\u3001\u4f4e\u529f\u8017\u7b49\u65b9\u9762\u7684\u8981\u6c42\u3002</p> <p>Note</p> <p>\u5f00\u59cb\u7f16\u7a0b\u524d\uff0c\u60a8\u9700\u8981\uff1a</p> <ul> <li> <p>\u4e00\u53f0\u5e26\u6709 USB \u7aef\u53e3\u7684\u8ba1\u7b97\u673a</p> </li> <li> <p>\u4e00\u6839 USB \u6570\u636e\u7ebf</p> </li> <li> <p>\u4e00\u5757 DNESP32S3M \u5f00\u53d1\u677f\u6216\u5176\u4ed6 ESP32 \u5f00\u53d1\u677f</p> </li> </ul>"},{"location":"zh/GET_STARTED/TEMPLATE/template/","title":"\u6a21\u677f\u9879\u76ee\u642d\u5efa","text":""},{"location":"zh/GET_STARTED/TEMPLATE/template/#_2","title":"\u73af\u5883\u51c6\u5907","text":"<p>Info</p> <p>\u6211\u4eec\u4f7f\u7528 VSCode + ESP-IDF \u8fdb\u884c\u5f00\u53d1\u3002\u6709\u5173\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\u7684\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728\u4e92\u8054\u7f51\u4e0a\u627e\u5230\u3002\u6211\u5047\u8bbe\u60a8\u5df2\u7ecf\u8bbe\u7f6e\u597d\u4e86\u5f00\u53d1\u73af\u5883\u3002\u6ce8\u610f\u4e0b\u56fe\u4e2d\u7684\u914d\u7f6e\u65b9\u5f0f\u7b49\u4ef7\u4e8e\u4f7f\u7528idf.py menuconfig\u3002</p>"},{"location":"zh/GET_STARTED/TEMPLATE/template/#_3","title":"\u521b\u5efa\u65b0\u9879\u76ee","text":"<ol> <li>\u542f\u52a8 VSCode\uff0c\u7136\u540e\u901a\u8fc7\u6309 <code>Ctrl+Shift+P</code>\uff08Windows/Linux\uff09\u6216 <code>Cmd+Shift+P</code>\uff08macOS\uff09\u6253\u5f00\u547d\u4ee4\u9762\u677f\u3002</li> <li>\u8f93\u5165 <code>ESP-IDF: New Project</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>\u8fdb\u5165\u9879\u76ee\u914d\u7f6e UI \u5e76\u586b\u5199\u6240\u9700\u4fe1\u606f\u3002 </li> <li>\u9009\u62e9\u4e00\u4e2a\u6a21\u677f\u6765\u521b\u5efa\u65b0\u9879\u76ee\u3002 </li> <li>\u5728\u65b0\u7a97\u53e3\u4e2d\u6253\u5f00\u3002  </li> </ol>"},{"location":"zh/GET_STARTED/TEMPLATE/template/#_4","title":"\u6a21\u677f\u5316\u9879\u76ee\u7ed3\u6784","text":"<pre><code>sample_proj/ # \u9879\u76ee\u6839\u76ee\u5f55\n\u251c\u2500\u2500 CMakeLists.txt # \u9879\u76ee CMake \u914d\u7f6e\u6587\u4ef6\n\u251c\u2500\u2500 main/ # \u4e3b\u5e94\u7528\u7a0b\u5e8f\u76ee\u5f55\n\u2502   \u251c\u2500\u2500 CMakeLists.txt # \u5e94\u7528\u7a0b\u5e8f CMake \u914d\u7f6e\u6587\u4ef6\n\u2502   \u2514\u2500\u2500 main.c # \u5e94\u7528\u7a0b\u5e8f\u6e90\u6587\u4ef6\n\u2514\u2500\u2500 sdkconfig # \u9879\u76ee\u914d\u7f6e\u6587\u4ef6\n</code></pre>"},{"location":"zh/GET_STARTED/TEMPLATE/template/#_5","title":"\u9879\u76ee\u914d\u7f6e","text":"<p>Note</p> <p>\u8fd9\u4e00\u6b65\u662f\u4e3a\u4e86\u914d\u7f6e\u9879\u76ee\u8bbe\u7f6e\u4ee5\u6700\u5927\u5316\u786c\u4ef6\u7684\u6027\u80fd\uff0c\u5373\u4f7f\u7528\u7279\u5b9a\u4e8e\u76ee\u6807\u7684\u914d\u7f6e\u800c\u4e0d\u662f\u9ed8\u8ba4\u914d\u7f6e\u3002</p> <p>Warning</p> <p>\u5728\u6253\u5f00\u9879\u76ee\u914d\u7f6e UI \u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5728 VSCode \u4e2d\u6253\u5f00\u4e86\u9879\u76ee\uff0c\u5c06\u76ee\u6807\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u677f\u5b50\uff0c\u5e76\u5b89\u88c5\u4e86 ESP-IDF \u6269\u5c55\u3002</p> <ol> <li>\u901a\u8fc7\u6309 <code>Ctrl+Shift+P</code>\uff08Windows/Linux\uff09\u6216 <code>Cmd+Shift+P</code>\uff08macOS\uff09\u5e76\u8f93\u5165 <code>ESP-IDF: Configure Project</code> \u8fdb\u5165\u9879\u76ee\u914d\u7f6e UI\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u70b9\u51fb VSCode \u7a97\u53e3\u5e95\u90e8\u83dc\u5355\u7684\u9f7f\u8f6e\u56fe\u6807\u3002 </li> <li>'FLASH' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>flash</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>'Partition Table' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>partition</code> \u5e76\u6309 <code>Enter</code>\u3002  \u8be6\u7ec6\u4fe1\u606f\u7a0d\u540e\u63d0\u4f9b</li> <li>'PSRAM' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>psram</code> \u5e76\u6309 <code>Enter</code>\u3002 \u8bf7\u9996\u5148\u52fe\u9009PSRAM\u524d\u9762\u7684\u590d\u9009\u6846\uff0c\u7136\u540e\u8fdb\u884c\u5982\u4e0b\u914d\u7f6e\u3002\u6ce8\u610f\u5982\u679c\u80cc\u666f\u989c\u8272\u592a\u6df1\uff0c\u53ef\u80fd\u65e0\u6cd5\u770b\u5230\u590d\u9009\u6846\u3002 </li> <li>\u66f4\u6539 CPU \u9891\u7387\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>cpu</code> \u5e76\u6309 <code>Enter</code>\u3002\u5c06 CPU \u9891\u7387\u4fee\u6539\u4e3a 240 MHz\u3002 </li> <li>\u4fee\u6539 FreeRTOS tick \u65f6\u949f\u9891\u7387\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>tick</code> \u5e76\u6309 <code>Enter</code>\u3002\u5c06\u9891\u7387\u4fee\u6539\u4e3a 1000\u3002 </li> <li>\u4fee\u6539\u5206\u533a\u8868\u3002\u5728\u547d\u4ee4\u9762\u677f\u4e2d\u8f93\u5165 <code>ESP-IDF: Open Partition Table Editor UI</code>\u3002 </li> <li>\u4fee\u6539\u5206\u533a\u8868\u5982\u4e0b\u6240\u793a\u3002 </li> <li>\u4fdd\u5b58\u6240\u6709\u4fee\u6539\u3002</li> </ol> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u9879\u76ee\u521d\u59cb\u5316\u3002\u914d\u7f6e\u4fe1\u606f\u73b0\u5728\u4e0e\u786c\u4ef6\u677f\u4e0a\u8d44\u6e90\u4e00\u81f4\u3002</p>"},{"location":"zh/GET_STARTED/TEMPLATE/template/#_6","title":"\u6a21\u677f\u7a0b\u5e8f","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u6765\u6d4b\u8bd5\u677f\u5b50\u3002</p> <p>\u8f6c\u5230 main.c \u6587\u4ef6\u5e76\u7528\u4ee5\u4e0b\u4ee3\u7801\u66ff\u6362\u5185\u5bb9\uff1a</p> <pre><code>#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"nvs_flash.h\"\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        vTaskDelay(1000);\n    }\n}\n</code></pre> <p>\u7136\u540e\uff0c\u786e\u4fdd\u4e32\u53e3\u6b63\u786e\uff0c\u677f\u5b50\u8bbe\u7f6e\u6b63\u786e\uff0c\u7136\u540e\u7f16\u8bd1\u5e76\u70e7\u5f55\u7a0b\u5e8f\u3002\u7136\u540e\uff0c\u4f60\u5e94\u8be5\u4f1a\u770b\u5230\u4e32\u53e3\u8f93\u51fa\u663e\u793a\u5f00\u53d1\u677f\u4fe1\u606f\u548c <code>Hello-ESP32</code> \u6d88\u606f\u3002</p>"},{"location":"zh/GET_STARTED/TEMPLATE/template/#_7","title":"\u7ed3\u8bba","text":"<p>Note</p> <p>\u8fd9\u4e2a\u9879\u76ee\u5bf9DNESP32S3M\u6700\u5c0f\u7cfb\u7edf\u677f\u8fdb\u884c\u4e86\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u53ef\u4ee5\u4e3a\u540e\u7eed\u5f00\u53d1\u63d0\u4f9b\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u6a21\u677f\u3002\u76f8\u6bd4\u8f83\u4e0eSTM32\uff0cESP32\u7684\u5f00\u53d1\u9690\u85cf\u4e86\u8bb8\u591a\u7ec6\u8282\uff0c\u540c\u65f6\u4e5f\u4f7f\u5f97\u8bbe\u7f6e\u6d41\u7a0b\u66f4\u52a0\u7b80\u5355\u3002</p>"},{"location":"zh/INTERFACING/KEY/key-itr/","title":"\u6309\u952e-\u4e2d\u65ad\u65b9\u5f0f","text":""},{"location":"zh/INTERFACING/KEY/key-itr/#_1","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bbaDNESP32S3M\u5f00\u53d1\u677f\u4e0a\u7684\u677f\u8f7d\u6309\u952e\u3002\u533a\u522b\u4e8e\u5148\u524d\u7684\u5f00\u53d1\u65b9\u5f0f\uff0c\u672c\u8282\u4e2d\u6309\u952e\u7684\u8bfb\u53d6\u65b9\u5f0f\u91c7\u7528\u4e2d\u65ad\u65b9\u5f0f\u3002</p> <p>Tip</p> <p>\u6ce8\u610f\u672c\u9875\u5185\u5bb9\u5b9e\u8d28\u4e0a\u5bf9\u975e\u4e2d\u65ad\u65b9\u5f0f\u7684key\u662f\u66ff\u4ee3\u5173\u7cfb\uff0c\u56e0\u6b64\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u53ea\u9700\u9009\u62e9\u4e00\u79cd\u65b9\u5f0f\u5373\u53ef\u3002</p> <p></p>"},{"location":"zh/INTERFACING/KEY/key-itr/#_2","title":"\u6982\u89c8","text":"<p>\u5728\u9879\u76ee\u4e2d\uff0c\u6211\u4eec\u5728components\u76ee\u5f55\u4e0b\u65b0\u5efa\u4e86\u4e00\u4e2aKEY\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653e\u6309\u952e\u9a71\u52a8\u4ee3\u7801\uff0c\u5305\u62eckey.h\u548ckey.c\u6587\u4ef6\u3002</p>"},{"location":"zh/INTERFACING/KEY/key-itr/#_3","title":"\u5f15\u811a\u914d\u7f6e","text":"<p>\u6839\u636e\u56fe\u7eb8\uff0c\u677f\u8f7dLED\u706f\u8fde\u63a5\u5230GPIO0\u3002</p> <p></p>"},{"location":"zh/INTERFACING/KEY/key-itr/#_4","title":"\u4ee3\u7801","text":""},{"location":"zh/INTERFACING/KEY/key-itr/#_5","title":"\u6d4b\u8bd5\u7a0b\u5e8f","text":"<p>\u5c06main.c\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>/**\n * @file main.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief \n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"rgb.h\"\n#include \"exit.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    // BSP\n    led_init();\n    rgb_init();\n    // key_init();\n    exit_init();\n\n    while (1)\n    {\n        vTaskDelay(10);\n\n    }\n\n}\n</code></pre>"},{"location":"zh/INTERFACING/KEY/key/","title":"\u6309\u952e","text":""},{"location":"zh/INTERFACING/KEY/key/#_2","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bbaDNESP32S3M\u5f00\u53d1\u677f\u4e0a\u7684\u677f\u8f7d\u6309\u952e\u3002</p> <p>\u6b63\u70b9\u539f\u5b50 DNESP32S3M\u5f00\u53d1\u677f\u6709\u4e00\u4e2a\u6309\u952e\u6309\u94ae\uff08boot\uff09\u7528\u4e8e\u7528\u6237\u8f93\u5165\u3002\u5728\u590d\u4f4d\u4e4b\u524d\uff0cBOOT\u53ef\u4ee5\u7528\u4e8e\u9009\u62e9\u542f\u52a8\u6a21\u5f0f\u3002\u590d\u4f4d\u540e\uff0cBOOT\u53ef\u4ee5\u7528\u4f5c\u666e\u901a\u6309\u952e\u3002</p> <p></p>"},{"location":"zh/INTERFACING/KEY/key/#_3","title":"\u6982\u89c8","text":"<p>\u5728\u9879\u76ee\u4e2d\uff0c\u6211\u4eec\u5728components\u76ee\u5f55\u4e0b\u65b0\u5efa\u4e86\u4e00\u4e2aKEY\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653e\u6309\u952e\u9a71\u52a8\u4ee3\u7801\uff0c\u5305\u62eckey.h\u548ckey.c\u6587\u4ef6\u3002</p>"},{"location":"zh/INTERFACING/KEY/key/#_4","title":"\u5f15\u811a\u914d\u7f6e","text":"<p>\u6839\u636e\u56fe\u7eb8\uff0c\u677f\u8f7dLED\u706f\u8fde\u63a5\u5230GPIO0\u3002</p> <p></p>"},{"location":"zh/INTERFACING/KEY/key/#_5","title":"\u4ee3\u7801","text":""},{"location":"zh/INTERFACING/KEY/key/#_6","title":"\u6d4b\u8bd5\u7a0b\u5e8f","text":"<p>\u5c06main.c\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>/**\n * @file main.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief \n * @version 1.0\n * @date 2024-11-17\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n#include \"esp_log.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"key.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    uint8_t key;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    // BSP\n    led_init();\n    key_init();\n\n    while (1)\n    {\n        key = key_scan(0);\n\n        switch(key)\n        {\n            case BOOT_PRES:\n                led_toggle();\n                break;\n            default:\n                break;\n        }\n\n        vTaskDelay(10);\n\n    }\n\n}\n</code></pre>"},{"location":"zh/INTERFACING/LCD/lcd/","title":"\u6db2\u6676\u663e\u793a\u5c4f","text":"<p>ESP32S3 \u6700\u5c0f\u7cfb\u7edf\u677f\u677f\u8f7d 0.96 \u82f1\u5bf8\u9ad8\u6e05 IPS LCD \u663e\u793a\u5c4f\uff0c\u5176\u5206\u8fa8\u7387\u4e3a 160x80\uff0c\u652f\u6301 16 \u4f4d\u771f\u5f69\u8272\u663e\u793a\u3002\u8be5\u663e\u793a\u5c4f\u91c7\u7528 ST7735S \u4f5c\u4e3a\u9a71\u52a8\u82af\u7247\uff0c\u5176\u5185\u7f6e RAM \u65e0\u9700\u5916\u90e8\u9a71\u52a8\u5668\u6216\u5b58\u50a8\u5668\u3002ESP32S3 \u82af\u7247\u4ec5\u9700\u901a\u8fc7 SPI \u63a5\u53e3\u5373\u53ef\u8f7b\u677e\u9a71\u52a8\u6b64\u663e\u793a\u5c4f\u30020.96 \u5bf8 LCD \u5c4f\u5728\u56db\u7ebf SPI \u901a\u8baf\u6a21\u5f0f\u4e0b\uff0c\u4ec5\u9700\u56db\u6839\u4fe1\u53f7\u7ebf\uff08CS\u3001SCL\u3001SDA\u3001RS\uff08DC\uff09\uff09\u5c31\u80fd\u591f\u9a71\u52a8\u3002</p> <p></p> <p></p> <p>\u8be5\u5c4f\u5e55\u901a\u8fc7 13 \u4e2a\u5f15\u811a\u4e0e PCB \u7535\u8def\u8fde\u63a5\u3002\u5f15\u811a\u8be6\u7ec6\u63cf\u8ff0\uff0c\u5982\u4e0b\u8868\u6240\u793a\u3002</p> \u5e8f\u53f7 \u540d\u79f0 \u8bf4\u660e 1 TP0 NC 2 TP1 NC 3 SDA SPI \u901a\u8baf MOSI \u4fe1\u53f7\u7ebf 4 SCL SPI \u901a\u8baf SCK \u4fe1\u53f7\u7ebf 5 RS \u5199\u547d\u4ee4/\u6570\u636e\u4fe1\u53f7\u7ebf\uff08\u4f4e\u7535\u5e73\uff1a\u5199\u547d\u4ee4\uff1b\u9ad8\u7535\u5e73\uff1a\u5199\u6570\u636e\uff09 6 RES \u786c\u4ef6\u590d\u4f4d\u5f15\u811a\uff08\u4f4e\u7535\u5e73\u6709\u6548\uff09 7 CS SPI \u901a\u8baf\u7247\u9009\u4fe1\u53f7\uff08\u4f4e\u7535\u5e73\u6709\u6548\uff09 8 GND \u7535\u6e90\u5730 9 NC NC 10 VCC 3.3V \u7535\u6e90\u4f9b\u7535 11 LEDK LCD \u80cc\u5149\u63a7\u5236\u5f15\u811a\uff08\u9634\u6781\uff09 12 LEDA LCD \u80cc\u5149\u63a7\u5236\u5f15\u811a\uff08\u9633\u6781\uff09 13 GND \u7535\u6e90\u5730 <p> </p> <p>\u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c0.96 \u5bf8 LCD \u6a21\u5757\u56db\u7ebf SPI \u7684\u5199\u5468\u671f\u662f\u975e\u5e38\u5feb\u7684\uff08TSCYCW = 66ns\uff09\uff0c\u800c\u8bfb\u5468\u671f\u5c31\u76f8\u5bf9\u6162\u4e86\u5f88\u591a\uff08TSCYCR = 150ns\uff09\u3002</p> <p>0.96 \u5bf8 LCD \u5c4f\u91c7\u7528 ST7735S \u4f5c\u4e3a LCD \u9a71\u52a8\u5668\uff0cLCD \u7684\u663e\u5b58\u53ef\u76f4\u63a5\u5b58\u653e\u5728 ST7735S \u7684\u7247\u4e0aRAM\u4e2d\uff0cST7735S\u7684\u7247\u4e0aRAM\u6709132*162*18-bits\uff0c\u5e76\u4e14ST7735S\u4f1a\u5728\u6ca1\u6709\u5916\u90e8\u65f6\u949f\u7684\u60c5\u51b5\u4e0b\uff0c\u81ea\u52a8\u5c06\u5176\u7247\u4e0a RAM \u7684\u6570\u636e\u663e\u793a\u81f3 LCD \u4e0a\uff0c\u4ee5\u6700\u5c0f\u5316\u529f\u8017\u3002</p> <p>\u5728\u6bcf\u6b21\u521d\u59cb\u5316\u663e\u793a\u6a21\u5757\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u901a\u8fc7 RST \u5f15\u811a\u5bf9\u663e\u793a\u6a21\u5757\u8fdb\u884c\u786c\u4ef6\u590d\u4f4d\uff0c\u786c\u4ef6\u590d\u4f4d\u8981\u6c42 RST \u81f3\u5c11\u88ab\u62c9\u4f4e 10 \u5fae\u79d2\uff0c\u62c9\u9ad8 RST \u7ed3\u675f\u786c\u4ef6\u590d\u4f4d\u540e\uff0c\u987b\u5ef6\u65f6 120 \u6beb\u79d2\u7b49\u5f85\u590d\u4f4d\u5b8c\u6210\u540e\uff0c\u624d\u80fd\u591f\u5f80\u663e\u793a\u6a21\u5757\u4f20\u8f93\u6570\u636e\u3002</p> <p>LEDK \u5f15\u811a\u7528\u4e8e\u63a7\u5236\u663e\u793a\u6a21\u5757\u7684 LCD \u80cc\u5149\uff0c\u8be5\u5f15\u811a\u81ea\u5e26\u4e0b\u62c9\u7535\u963b\uff0c\u5f53 LEDK \u5f15\u811a\u88ab\u62c9\u9ad8\u6216\u60ac\u7a7a\u65f6\uff0c0.96 \u5bf8 LCD \u6a21\u5757\u7684 LCD \u80cc\u5149\u90fd\u5904\u4e8e\u5173\u95ed\u72b6\u6001\uff0c\u5f53 LEDK \u5f15\u811a\u88ab\u62c9\u4f4e\u65f6\uff0c\u663e\u793a\u6a21\u5757\u7684LCD \u80cc\u5149\u624d\u4f1a\u70b9\u4eae\u3002</p> <p>ST7735S \u6700\u9ad8\u652f\u6301 18 \u4f4d\u8272\u6df1\uff08262K \u8272\uff09\uff0c\u4e0d\u8fc7\u4e00\u822c\u4f7f\u7528 16 \u4f4d\u989c\u8272\u6df1\u5ea6\uff0865K \u8272\uff09\uff0cRGB565\u683c\u5f0f\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728 16 \u4f4d\u8272\u6df1\u4e0b\u8fbe\u5230\u6700\u5feb\u7684\u901f\u5ea6\u3002\u5728 16 \u4f4d\u8272\u6df1\u6a21\u5f0f\u4e0b\uff0cST7789V \u91c7\u7528 RGB565\u683c\u5f0f\u4f20\u8f93\u3001\u5b58\u50a8\u989c\u8272\u6570\u636e\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p>\u4e0a\u56fe\u662f\u4e00\u4e2a\u4f20\u8f93\u50cf\u7d20\u6570\u636e\u7684\u65f6\u5e8f\u8fc7\u7a0b\uff0cD/CX \u7ebf\u9700\u8981\u62c9\u9ad8\uff0c\u8868\u793a\u4f20\u8f93\u7684\u662f\u6570\u636e\u3002\u4e00\u4e2a\u50cf\u7d20\u7684\u989c\u8272\u6570\u636e\u9700\u8981\u4f7f\u7528 16\u6bd4\u7279\u6765\u4f20\u8f93\uff0c\u8fd9 16 \u6bd4\u7279\u6570\u636e\u4e2d\uff0c\u9ad8 5 \u6bd4\u7279\u7528\u4e8e\u8868\u793a\u7ea2\u8272\uff0c\u4f4e 5 \u6bd4\u7279\u7528\u4e8e\u8868\u793a\u84dd\u8272\uff0c\u4e2d\u95f4\u7684 6 \u6bd4\u7279\u7528\u4e8e\u8868\u793a\u7eff\u8272\u3002\u6570\u636e\u7684\u6570\u503c\u8d8a\u5927\uff0c\u5bf9\u5e94\u8868\u793a\u7684\u989c\u8272\u5c31\u8d8a\u6df1\u3002</p> <p>ST7735S\u652f\u6301\u8fde\u7eed\u8bfb\u5199RAM\u4e2d\u5b58\u653e\u7684LCD\u4e0a\u989c\u8272\u5bf9\u5e94\u7684\u6570\u636e\uff0c\u5e76\u4e14\u8fde\u7eed\u8bfb\u5199\u7684\u65b9\u5411\uff08LCD\u7684\u626b\u63cf\u65b9\u5411\uff09\u662f\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 0x36 \u8fdb\u884c\u914d\u7f6e\u7684\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u547d\u4ee4 0x36 \u53ef\u4ee5\u914d\u7f6e 6 \u4e2a\u53c2\u6570\uff0c\u4f46\u5bf9\u4e8e\u914d\u7f6e LCD \u7684\u626b\u63cf\u65b9\u5411\uff0c\u4ec5\u9700\u5173\u5fc3 MY\u3001MX \u548c MV \u8fd9\u4e09\u4e2a\u53c2\u6570\uff0c\u5982\u4e0b\u8868\u6240\u793a\u3002</p> MY MX MY LCD \u626b\u63cf\u65b9\u5411\uff08RAM \u81ea\u589e\u65b9\u5411\uff09 0 0 0 \u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b 1 0 0 \u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0b\u5230\u4e0a 0 1 0 \u4ece\u53f3\u5230\u5de6\uff0c\u4ece\u4e0a\u5230\u4e0b 1 1 0 \u4ece\u53f3\u5230\u5de6\uff0c\u4ece\u4e0b\u5230\u4e0a 0 0 1 \u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3 1 0 1 \u4ece\u4e0b\u5230\u4e0a\uff0c\u4ece\u5de6\u5230\u53f3 0 1 1 \u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u53f3\u5230\u5de6 1 1 1 \u4ece\u4e0b\u5230\u4e0a\uff0c\u4ece\u53f3\u5230\u5de6 <p>\u8fd9\u6837\uff0c\u6211\u4eec\u5728\u4f7f\u7528 ST7735S \u663e\u793a\u5185\u5bb9\u7684\u65f6\u5019\uff0c\u5c31\u6709\u5f88\u5927\u7075\u6d3b\u6027\u4e86\uff0c\u6bd4\u5982\u663e\u793a BMP \u56fe\u7247\uff0cBMP\u89e3\u7801\u6570\u636e\uff0c\u5c31\u662f\u4ece\u56fe\u7247\u7684\u5de6\u4e0b\u89d2\u5f00\u59cb\uff0c\u6162\u6162\u663e\u793a\u5230\u53f3\u4e0a\u89d2\uff0c\u5982\u679c\u8bbe\u7f6eLCD\u626b\u63cf\u65b9\u5411\u4e3a\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0b\u5230\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8bbe\u7f6e\u4e00\u6b21\u5750\u6807\uff0c\u7136\u540e\u5c31\u4e0d\u505c\u7684\u5f80 LCD \u586b\u5145\u989c\u8272\u6570\u636e\u5373\u53ef\uff0c\u8fd9 \u6837\u53ef\u4ee5\u5927\u5927\u63d0\u9ad8\u663e\u793a\u901f\u5ea6\u3002</p> <p>\u5728\u5f80 ST7735S \u5199\u5165\u989c\u8272\u6570\u636e\u524d\uff0c\u8fd8\u9700\u8981\u8bbe\u7f6e\u5730\u5740\uff0c\u4ee5\u786e\u5b9a\u968f\u540e\u5199\u5165\u7684\u989c\u8272\u6570\u636e\u5bf9\u5e94 LCD \u4e0a\u7684\u54ea\u4e00\u4e2a\u50cf\u7d20\uff0c\u901a\u8fc7\u547d\u4ee4 0x2A \u548c\u547d\u4ee4 0x2B \u53ef\u4ee5\u5206\u522b\u8bbe\u7f6e ST7735S \u663e\u793a\u989c\u8272\u6570\u636e\u7684\u5217\u5730\u5740\u548c\u884c\u5730\u5740\uff0c\u547d\u4ee4 0x2A \u7684\u63cf\u8ff0\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u547d\u4ee4 0x2B \u7684\u63cf\u8ff0\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u4ee5\u9ed8\u8ba4\u7684 LCD \u626b\u63cf\u65b9\u5f0f\uff08\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\uff09\u4e3a\u4f8b\uff0c\u547d\u4ee4 0x2A \u7684\u53c2\u6570 XS \u548c XE \u548c\u547d\u4ee40x2B \u7684\u53c2\u6570 YS \u548c YE \u5c31\u5728 LCD \u4e0a\u786e\u5b9a\u4e86\u4e00\u4e2a\u533a\u57df\uff0c\u5728\u8fde\u8bfb\u8bfb\u5199\u989c\u8272\u6570\u636e\u65f6\uff0cST7735S \u5c31\u4f1a\u6309\u7167\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u7684\u626b\u63cf\u65b9\u5f0f\u8bfb\u5199\u8bbe\u4e2a\u533a\u57df\u7684\u989c\u8272\u6570\u636e</p>"},{"location":"zh/INTERFACING/LCD/lcd/#_2","title":"\u4ee3\u7801","text":""},{"location":"zh/INTERFACING/LED/led/#_1","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>\u672c\u7ae0\u6211\u4eec\u8bb2\u89e3DNESP32S3M\u5f00\u53d1\u677f\u4e0a\u7684\u677f\u8f7dLED\u706f\u7684\u9a71\u52a8\u548c\u63a7\u5236\u3002</p> <p></p>"},{"location":"zh/INTERFACING/LED/led/#_2","title":"\u6982\u89c8","text":"<p>\u6211\u4eec\u5728\u9879\u76ee\u4e2d\uff0c\u5728components\u76ee\u5f55\u4e0b\uff0c\u65b0\u5efa\u4e86\u4e00\u4e2aLED\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653eLED\u706f\u7684\u9a71\u52a8\u4ee3\u7801\uff0c\u5305\u62ecled.h\u548cled.c\u6587\u4ef6\u3002</p>"},{"location":"zh/INTERFACING/LED/led/#_3","title":"\u5f15\u811a\u914d\u7f6e","text":"<p>\u6839\u636e\u56fe\u7eb8\uff0c\u677f\u8f7dLED\u706f\u8fde\u63a5\u5230GPIO1\u3002</p> <p></p>"},{"location":"zh/INTERFACING/LED/led/#_4","title":"\u4ee3\u7801","text":""},{"location":"zh/INTERFACING/LED/led/#_5","title":"\u6838\u5fc3\u51fd\u6570","text":""},{"location":"zh/INTERFACING/LED/led/#_6","title":"\u6d4b\u8bd5\u7a0b\u5e8f","text":"<p>\u5c06main.c\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u66ff\u6362\u4e3a\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    // BSP\n    led_init(); \n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        led_toggle();\n        vTaskDelay(1000);\n    }\n}\n</code></pre>"},{"location":"zh/INTERFACING/RGB/rgb/","title":"RGB LED \u706f\u6a21\u5757","text":""},{"location":"zh/INTERFACING/RGB/rgb/#_1","title":"\u4ecb\u7ecd","text":"<p>Note</p> <p>RGB LED \u706f\u6a21\u5757\u662f\u4e00\u79cd\u96c6\u6210\u4e86\u7ea2\u3001\u7eff\u3001\u84dd\u4e09\u79cd\u989c\u8272\u7684 LED \u706f\u6a21\u5757\uff0c\u5bf9\u4e8e\u672c\u9879\u76ee\u4e3b\u63a7\u800c\u8a00\uff0c\u8be5\u6a21\u5757\u5c5e\u4e8e\u5916\u63a5\u6a21\u5757\u3002</p>"},{"location":"zh/INTERFACING/RGB/rgb/#overview","title":"Overview","text":"<p>\u6211\u4eec\u5728\u9879\u76eecomponents\u76ee\u5f55\u4e0b\uff0c\u65b0\u5efa\u4e86\u4e00\u4e2aRGB\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653eRGB LED\u706f\u7684\u9a71\u52a8\u4ee3\u7801\uff0c\u5305\u62ecrgb.h\u548crgb.c\u6587\u4ef6\u3002</p>"},{"location":"zh/INTERFACING/RGB/rgb/#_2","title":"\u5f15\u811a\u914d\u7f6e","text":"<p>\u7531\u4e8e\u662f\u5916\u63a5\u6a21\u5757\uff0c\u6ca1\u6709\u76f8\u5173\u56fe\u7eb8\uff0c\u8bf7\u53c2\u8003\u4ee5\u4e0b\u8868\u683c\u8fdb\u884c\u8fde\u7ebf\u3002</p> RGB LED \u6a21\u5757\u5f15\u811a \u4e3b\u63a7\u5f15\u811a/\u7535\u6e90 R GPIO_NUM_19 G GPIO_NUM_20 B GPIO_NUM_21 GND GND <p></p>"},{"location":"zh/INTERFACING/RGB/rgb/#_3","title":"\u4ee3\u7801","text":""},{"location":"zh/INTERFACING/RGB/rgb/#_4","title":"\u6838\u5fc3\u51fd\u6570","text":""},{"location":"zh/INTERFACING/RGB/rgb/#rgb_init","title":"rgb_init()","text":"<p>Note</p> <p>\u521d\u59cb\u5316RGB\u706f\u3002</p>"},{"location":"zh/INTERFACING/RGB/rgb/#rgbint-r-int-g-int-b","title":"rgb(int r, int g, int b)","text":"<p>Note</p> <p>\u63a7\u5236RGB\u706f\u3002</p>"},{"location":"zh/INTERFACING/RGB/rgb/#rgb_toggle","title":"rgb_toggle()","text":""},{"location":"zh/INTERFACING/RGB/rgb/#_5","title":"\u6d4b\u8bd5\u7a0b\u5e8f","text":"<p>\u5c06<code>main.c</code>\u6587\u4ef6\u4e2d<code>main</code>\u51fd\u6570\u7684\u5185\u5bb9\u66ff\u6362\u4e3a\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>/* Dependencies */\n// Basic\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n#include \"nvs_flash.h\"\n\n// RTOS\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// BSP\n#include \"led.h\"\n#include \"rgb.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    // BSP\n    led_init(); \n    rgb_init();\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        led_toggle();\n        rgb(1, 0, 0);\n        vTaskDelay(200);\n        rgb(0, 1, 0);\n        vTaskDelay(200);\n        rgb(0, 0, 1);\n        vTaskDelay(200);\n        rgb(1, 1, 0);\n        vTaskDelay(200);\n        rgb(1, 0, 1);\n        vTaskDelay(200);\n        rgb(0, 1, 1);\n        vTaskDelay(200);\n        rgb(1, 1, 1);\n        vTaskDelay(200);\n    }\n}\n</code></pre>"},{"location":"zh/MAIN-CONTROL/RNG/rng/","title":"\u968f\u673a\u6570\u53d1\u751f\u5668 RNG","text":"<p>Info</p> <p>ESP32-S3 \u5185\u7f6e\u4e00\u4e2a\u771f\u968f\u673a\u6570\u53d1\u751f\u5668\uff08RNG\uff09\uff0c\u5176\u751f\u6210\u7684 32 \u4f4d\u968f\u673a\u6570\u53ef\u4f5c\u4e3a\u52a0\u5bc6\u7b49\u64cd\u4f5c\u7684\u57fa\u7840\u3002ESP32-S3 \u7684\u968f\u673a\u6570\u53d1\u751f\u5668\u53ef\u901a\u8fc7\u7269\u7406\u8fc7\u7a0b\u800c\u975e\u7b97\u6cd5\u751f\u6210\u771f\u968f\u673a\u6570\uff0c\u6240\u6709\u751f\u6210\u7684\u968f\u673a\u6570\u5728\u7279\u5b9a\u8303\u56f4\u5185\u51fa\u73b0\u7684\u6982\u7387\u5b8c\u5168\u4e00\u81f4\u3002</p>"},{"location":"zh/MAIN-CONTROL/RNG/rng/#rng_1","title":"RNG \u529f\u80fd\u63cf\u8ff0","text":"<p>\u4e0b\u9762\u5148\u6765\u4e86\u89e3\u566a\u58f0\u6e90\uff0c\u901a\u8fc7\u5b66\u4e60\u566a\u58f0\u6e90\u4f1a\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6574\u4f53\u638c\u63e1\uff0c\u540c\u65f6\u5bf9\u4e4b\u540e\u7684\u7f16\u7a0b\u4e5f\u4f1a\u6709\u4e00\u4e2a\u6e05\u6670\u7684\u601d\u8def\u3002EDP32- S3 \u7684\u968f\u673a\u6570\u53d1\u751f\u5668\u566a\u58f0\u6e90\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>ESP32 \u7684\u968f\u673a\u6570\u53d1\u751f\u5668\u901a\u8fc7 RNG_DATA_REG \u63d0\u4f9b 32 \u4f4d\u771f\u968f\u673a\u6570\uff0c\u5176\u566a\u58f0\u6e90\u4e3b\u8981\u6765\u81ea\u7cfb\u7edf\u4e2d\u7684\u70ed\u566a\u58f0\u548c\u5f02\u6b65\u65f6\u949f\u3002\u70ed\u566a\u58f0\u53ef\u6765\u6e90\u4e8e SAR ADC \u6216\u9ad8\u901f ADC\uff0c\u5f53\u8fd9\u4e9b\u6a21\u5757\u5de5\u4f5c\u65f6\uff0c\u4f1a\u4ea7\u751f\u6bd4\u7279\u6d41\uff0c\u5e76\u901a\u8fc7\u5f02\u6216 (XOR) \u8fd0\u7b97\u4f5c\u4e3a\u968f\u673a\u6570\u79cd\u5b50\u8f93\u5165\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u540c\u65f6\uff0c\u5f53\u6570\u5b57\u5185\u6838\u4f7f\u80fd RC_FAST_CLK\uff0820MHz\uff09\u65f6\uff0c\u968f\u673a\u6570\u53d1\u751f\u5668\u4f1a\u5bf9\u5176\u8fdb\u884c\u91c7\u6837\uff0c\u5229\u7528\u5f02\u6b65\u65f6\u949f\u6e90\u7684\u4e9a\u7a33\u6001\u7279\u6027\u589e\u52a0\u71b5\u503c\u3002\u4e3a\u4e86\u4fdd\u8bc1\u968f\u673a\u6570\u7684\u6700\u5927\u71b5\u503c\uff0c\u5efa\u8bae\u81f3\u5c11\u4f7f\u80fd\u4e00\u8def ADC\uff08SAR ADC \u6216\u9ad8\u901f ADC\uff09\u4f5c\u4e3a\u968f\u673a\u6570\u79cd\u5b50\uff0c\u540c\u65f6\u7ed3\u5408 RC_FAST_CLK \u63d0\u9ad8\u71b5\u503c\u3002</p>"},{"location":"zh/MAIN-CONTROL/RNG/rng/#rnd","title":"RND \u968f\u673a\u6570\u5bc4\u5b58\u5668","text":"<p>RNG_DATA_REG \u968f\u673a\u6570\u6570\u636e 0x0110 \u53ea\u8bfb</p> <p></p>"},{"location":"zh/MAIN-CONTROL/RNG/rng/#_1","title":"\u4f8b\u7a0b","text":"<p>\u672c\u5b9e\u9a8c\u4f7f\u7528 ESP32-S3 \u81ea\u5e26\u7684\u786c\u4ef6\u968f\u673a\u6570\u751f\u6210\u5668\uff08RNG\uff09\uff0c\u83b7\u53d6\u968f\u673a\u6570\uff0c\u5e76\u663e\u793a\u5728 LCD \u5c4f\u5e55\u4e0a\u3002\u6309 BOOT \u6309\u952e\u53ef\u4ee5\u83b7\u53d6\u4e00\u6b21\u968f\u673a\u6570\u3002\u540c\u65f6\u7a0b\u5e8f\u81ea\u52a8\u83b7\u53d6 0~9 \u8303\u56f4\u5185\u7684\u968f\u673a\u6570\uff0c\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u3002LED \u95ea\u70c1\u7528\u4e8e\u63d0\u793a\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c\u3002</p>"},{"location":"zh/MAIN-CONTROL/RNG/rng/#_2","title":"\u6d89\u53ca\u8d44\u6e90","text":"<ol> <li>LED - LED - IO1</li> <li>\u72ec\u7acb\u6309\u952e</li> <li>0.96 \u5bf8 LCD</li> <li>RNG\uff08\u786c\u4ef6\u968f\u673a\u6570\u751f\u6210\u5668\uff09</li> </ol>"},{"location":"zh/MAIN-CONTROL/RNG/rng/#_3","title":"\u5173\u952e\u6a21\u5757\u4e0e\u51fd\u6570","text":"<p>\u9996\u5148\u5bfc\u5165\u5934\u6587\u4ef6\uff1a</p> <pre><code>#include \"esp_random.h\"\n</code></pre> <p>\u5173\u952e\u51fd\u6570\uff1a</p> <pre><code>uint32_t esp_random(void);\n</code></pre>"},{"location":"zh/MAIN-CONTROL/RNG/rng/#_4","title":"\u4ee3\u7801","text":""},{"location":"zh/MAIN-CONTROL/RTC/rtc/","title":"\u5b9e\u65f6\u65f6\u949f (RTC)","text":"<p>Note</p> <p>\u672c\u7ae0\u4ecb\u7ecd ESP32-S3 \u5b9e\u65f6\u65f6\u949f\uff08RTC\uff09\u7684\u4f7f\u7528\uff0c\u5b9e\u65f6\u65f6\u949f\u80fd\u4e3a\u7cfb\u7edf\u63d0\u4f9b\u4e00\u4e2a\u51c6\u786e\u7684\u65f6\u95f4\uff0c\u5373\u65f6\u7cfb\u7edf\u590d\u4f4d\u6216\u4e3b\u7535\u6e90\u65ad\u7535\uff0cRTC \u4f9d\u7136\u80fd\u591f\u8fd0\u884c\uff0c\u56e0\u6b64 RTC \u4e5f\u7ecf\u5e38\u7528\u4e8e\u5404\u79cd\u4f4e\u529f\u8017\u573a\u666f\u3002</p> <p>\u5b9e\u65f6\u65f6\u949f</p> <p>RTC\uff08\u5b9e\u65f6\u65f6\u949f\uff09\u662f\u6307\u5b89\u88c5\u5728\u7535\u5b50\u8bbe\u5907\u6216\u5b9e\u73b0\u5176\u529f\u80fd\u7684 IC\uff08\u96c6\u6210\u7535\u8def\uff09\u4e0a\u7684\u65f6\u949f\u3002</p> <p>\u5f53\u60a8\u5728\u6570\u5b57\u7535\u8def\u4e2d\u79f0\u5176\u4e3a\u201c\u65f6\u949f\u201d\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u60f3\u5230\u5468\u671f\u4fe1\u53f7\uff0c\u4f46\u5728\u82f1\u8bed\u4e2d\uff0cclock \u4e5f\u610f\u5473\u7740\u201c\u65f6\u949f\u201d\u3002\u90a3\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5355\u72ec\u7684 RTC?</p> <p>\u539f\u56e0\u662f CPU \u7684\u5b9a\u65f6\u5668\u65f6\u949f\u529f\u80fd\u53ea\u5728\u201c\u542f\u52a8\u201d\u5373\u201c\u901a\u7535\u65f6\u201d\u8fd0\u884c\uff0c\u65ad\u7535\u65f6\u505c\u6b62\u3002\u5f53\u7136\uff0c\u5982\u679c\u65f6\u949f\u4e0d\u80fd\u8fde\u7eed\u8ddf\u8e2a\u65f6\u95f4\uff0c\u5219\u5fc5\u987b\u624b\u52a8\u8bbe\u7f6e\u65f6\u95f4\u3002</p> <p>\u901a\u5e38\uff0cRTC \u914d\u5907\u4e00\u4e2a\u5355\u72ec\u5206\u79bb\u7684\u7535\u6e90\uff0c\u5982\u7ebd\u6263\u7535\u6c60\uff08\u5907\u7528\u7535\u6c60\uff09\uff0c\u5373\u4f7f DNESP32S3M \u6700\u5c0f\u7cfb\u7edf\u677f\u7535\u6e90\u5173\u95ed\uff0c\u5b83\u4e5f\u80fd\u4fdd\u6301\u8fd0\u4f5c\uff0c\u968f\u65f6\u53ef\u4ee5\u5b9e\u65f6\u663e\u793a\u65f6\u95f4\u3002\u7136\u540e\uff0c\u5f53 DNESP32S3M \u6700\u5c0f\u7cfb\u7edf\u677f\u518d\u6b21\u6253\u5f00\u65f6\uff0c\u8ba1\u7b97\u673a\u5185\u7f6e\u7684\u5b9a\u65f6\u5668\u65f6\u949f\u4ece RTC \u8bfb\u53d6\u5f53\u524d\u65f6\u95f4\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u4f9b\u7535\u7684\u540c\u65f6\uff0c\u65f6\u95f4\u5728\u5176\u81ea\u8eab\u673a\u5236\u4e0b\u663e\u793a\u3002\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u7531\u4e8e\u7ebd\u6263\u7535\u6c60\u76f8\u5bf9\u4fbf\u5b9c\u4e14\u4f7f\u7528\u5bff\u547d\u957f\uff0c\u56e0\u6b64 RTC \u53ef\u4ee5\u4ee5\u6781\u4f4e\u7684\u6210\u672c\u8fd0\u884c\u3002\u57fa\u4e8e\u6b64\u8fd9\u4e2a\u4f5c\u7528\uff0c\u5b83\u4e5f\u53ef\u4ee5\u7528\u4f5c\u5185\u5b58\u3002</p> <p>Note</p> <p>\u5728 ESP32-S3 \u4e2d\uff0c\u5e76\u6ca1\u6709\u50cf STM32 \u82af\u7247\u4e00\u6837\uff0c\u5177\u6709 RTC \u5916\u8bbe\uff0c\u4f46\u662f\u5b58\u5728\u4e00\u4e2a\u7cfb\u7edf\u65f6\u95f4\uff0c\u5229\u7528\u7cfb\u7edf\u65f6\u95f4\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u65f6\u949f\u7684\u529f\u80fd\u6548\u679c\u3002 ESP32-S3 \u4f7f\u7528\u4e24\u79cd\u786c\u4ef6\u65f6\u949f\u6e90\u5efa\u7acb\u548c\u4fdd\u6301\u7cfb\u7edf\u65f6\u95f4\u3002\u6839\u636e\u5e94\u7528\u76ee\u7684\u53ca\u5bf9\u7cfb\u7edf\u65f6\u95f4\u7684\u7cbe\u5ea6\u8981\u6c42\uff0c\u65e2\u53ef\u4ee5\u4ec5\u4f7f\u7528\u5176\u4e2d\u4e00\u79cd\u65f6\u949f\u6e90\uff0c\u4e5f\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u4e24\u79cd\u65f6\u949f\u6e90\u3002\u8fd9\u4e24\u79cd\u786c\u4ef6\u65f6\u949f\u6e90\u4e3a RTC \u5b9a\u65f6\u5668 \u548c \u9ad8\u5206\u8fa8\u7387\u5b9a\u65f6\u5668 \u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u662f\u4f7f\u7528\u8fd9\u4e24\u79cd\u5b9a\u65f6\u5668\u3002\u4e0b\u9762\u6211\u4eec\u5c06\u9010\u4e00\u4ecb\u7ecd\u3002</p>"},{"location":"zh/MAIN-CONTROL/RTC/rtc/#_1","title":"\u7528\u4f8b","text":"<ol> <li>\u901a\u8fc7 LCD \u5b9e\u65f6\u663e\u793a RTC \u65f6\u95f4</li> <li>LED \u95ea\u70c1\uff0c\u6307\u793a\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c</li> </ol>"},{"location":"zh/MAIN-CONTROL/RTC/rtc/#_2","title":"\u6d89\u53ca\u8d44\u6e90","text":"<ol> <li>LED LED0 - IO1</li> <li>0.96 \u5bf8 LCD</li> <li>RTC</li> </ol>"},{"location":"zh/MAIN-CONTROL/RTC/rtc/#_3","title":"\u4f9d\u8d56","text":"<p>newlib</p>"},{"location":"zh/MAIN-CONTROL/RTC/rtc/#_4","title":"\u4ee3\u7801","text":""},{"location":"zh/MAIN-CONTROL/SPI/spi/#spi_1","title":"SPI\u4ecb\u7ecd","text":"<p>Serial Peripheral interface</p> <p>SPI\uff0cSerial Peripheral interface\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u4e32\u884c\u5916\u56f4\u8bbe\u5907\u63a5\u53e3\uff0c\u662f\u7531\u539f\u6469\u6258\u7f57\u62c9\u516c\u53f8\u5728\u5176 MC68HCXX \u7cfb\u5217\u5904\u7406\u5668\u4e0a\u5b9a\u4e49\u7684\u3002SPI \u662f\u4e00\u79cd\u9ad8\u901f\u7684\u5168\u53cc\u5de5\u3001\u540c\u6b65\u3001\u4e32\u884c\u7684\u901a\u4fe1\u603b\u7ebf\uff0c\u5df2\u7ecf\u5e7f\u6cdb\u5e94\u7528\u5728\u4f17\u591a MCU\u3001\u5b58\u50a8\u82af\u7247\u3001AD \u8f6c\u6362\u5668\u548c LCD \u4e4b\u95f4\u3002 SPI \u901a\u4fe1\u8ddf IIC \u901a\u4fe1\u4e00\u6837\uff0c\u901a\u4fe1\u603b\u7ebf\u4e0a\u5141\u8bb8\u6302\u8f7d\u4e00\u4e2a\u4e3b\u8bbe\u5907\u548c\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u4ece\u8bbe\u5907\u3002\u4e3a\u4e86\u8ddf\u4ece\u8bbe\u5907\u8fdb\u884c\u901a\u4fe1\uff0c\u4e00\u4e2a\u4e3b\u8bbe\u5907\u81f3\u5c11\u9700\u8981 4 \u8ddf\u6570\u636e\u7ebf\uff0c\u5206\u522b\u4e3a\uff1a</p> <ul> <li> <p>MOSI\uff08Master Out / Slave In\uff09\uff1a\u4e3b\u6570\u636e\u8f93\u51fa\uff0c\u4ece\u6570\u636e\u8f93\u5165\uff0c\u7528\u4e8e\u4e3b\u673a\u5411\u4ece\u673a\u53d1\u9001\u6570\u636e\u3002</p> </li> <li> <p>MISO\uff08Master In / Slave Out\uff09\uff1a\u4e3b\u6570\u636e\u8f93\u5165\uff0c\u4ece\u6570\u636e\u8f93\u51fa\uff0c\u7528\u4e8e\u4ece\u673a\u5411\u4e3b\u673a\u53d1\u9001\u6570\u636e\u3002</p> </li> <li> <p>SCLK\uff08Serial Clock\uff09\uff1a\u65f6\u949f\u4fe1\u53f7\uff0c\u7531\u4e3b\u8bbe\u5907\u4ea7\u751f\uff0c\u51b3\u5b9a\u901a\u4fe1\u7684\u901f\u7387\u3002</p> </li> <li> <p>CS\uff08Chip Select\uff09\uff1a\u4ece\u8bbe\u5907\u7247\u9009\u4fe1\u53f7\uff0c\u7531\u4e3b\u8bbe\u5907\u4ea7\u751f\uff0c\u4f4e\u7535\u5e73\u65f6\u9009\u4e2d\u4ece\u8bbe\u5907\u3002</p> </li> </ul> <p>\u591a\u4ece\u673aSPI\u901a\u4fe1\u7f51\u7edc\u8fde\u63a5\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u4ece\u4e0a\u56fe\u53ef\u4ee5\u77e5\u9053\uff0cMOSI\u3001MISO\u3001SCLK \u5f15\u811a\u8fde\u63a5 SPI \u603b\u7ebf\u4e0a\u6bcf\u4e00\u4e2a\u8bbe\u5907\uff0c\u5982\u679c CS \u5f15\u811a\u4e3a\u4f4e\u7535\u5e73\uff0c\u5219\u4ece\u8bbe\u5907\u53ea\u4fa6\u542c\u4e3b\u673a\u5e76\u4e0e\u4e3b\u673a\u901a\u4fe1\u3002SPI\u4e3b\u8bbe\u5907\u4e00\u6b21\u53ea\u80fd\u548c\u4e00\u4e2a\u4ece\u8bbe\u5907\u8fdb\u884c\u901a\u4fe1\u3002\u5982\u679c\u4e3b\u8bbe\u5907\u8981\u548c\u53e6\u5916\u4e00\u4e2a\u4ece\u8bbe\u5907\u901a\u4fe1\uff0c\u5fc5\u987b\u5148\u7ec8\u6b62\u548c\u5f53\u524d\u4ece\u8bbe\u5907\u901a\u4fe1\uff0c\u5426\u5219\u4e0d\u80fd\u901a\u4fe1\u3002</p> <p>SPI \u901a\u4fe1\u6709 4 \u79cd\u4e0d\u540c\u7684\u6a21\u5f0f\uff0c\u4e0d\u540c\u7684\u4ece\u673a\u53ef\u80fd\u5728\u51fa\u5382\u65f6\u5c31\u914d\u7f6e\u4e3a\u67d0\u79cd\u6a21\u5f0f\uff0c\u8fd9\u662f\u4e0d\u80fd\u6539\u53d8\u7684\u3002\u901a\u4fe1\u53cc\u65b9\u5fc5\u987b\u5de5\u4f5c\u5728\u540c\u4e00\u6a21\u5f0f\u4e0b\uff0c\u624d\u80fd\u6b63\u5e38\u8fdb\u884c\u901a\u4fe1\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9\u4e3b\u673a\u7684 SPI \u6a21\u5f0f\u8fdb\u884c\u914d\u7f6e\u3002SPI \u901a\u4fe1\u6a21\u5f0f\u662f\u901a\u8fc7\u914d\u7f6e CPOL\uff08\u65f6\u949f\u6781\u6027\uff09\u548c CPHA\uff08\u65f6\u949f\u76f8\u4f4d\uff09\u6765\u9009\u62e9\u7684\u3002</p> <p>CPOL\uff0c\u8be6\u79f0 Clock Polarity\uff0c\u5c31\u662f\u65f6\u949f\u6781\u6027\uff0c\u5f53\u4e3b\u4ece\u673a\u6ca1\u6709\u6570\u636e\u4f20\u8f93\u7684\u65f6\u5019\u5373\u7a7a\u95f2\u72b6\u6001\uff0cSCL \u7ebf\u7684\u7535\u5e73\u72b6\u6001\uff0c\u5047\u5982\u7a7a\u95f2\u72b6\u6001\u662f\u9ad8\u7535\u5e73\uff0cCPOL=1\uff1b\u82e5\u7a7a\u95f2\u72b6\u6001\u65f6\u4f4e\u7535\u5e73\uff0c\u90a3\u4e48 CPOL = 0\u3002</p> <p>CPHA\uff0c\u8be6\u79f0 Clock Phase\uff0c\u5c31\u662f\u65f6\u949f\u76f8\u4f4d\uff0c\u5b9e\u8d28\u6307\u7684\u662f\u6570\u636e\u7684\u91c7\u6837\u65f6\u523b\u3002CPHA = 0 \u8868\u793a\u6570\u636e\u7684\u91c7\u6837\u662f\u4ece\u7b2c 1 \u4e2a\u8fb9\u6cbf\u4fe1\u53f7\u4e0a\u5373\u5947\u6570\u8fb9\u6cbf\uff0c\u5177\u4f53\u662f\u4e0a\u5347\u6cbf\u8fd8\u662f\u4e0b\u964d\u6cbf\u7684\u95ee\u9898\uff0c\u662f\u7531 CPOL \u51b3\u5b9a\u7684\u3002CPHA=1 \u8868\u793a\u6570\u636e\u91c7\u6837\u662f\u4ece\u7b2c 2 \u4e2a\u8fb9\u6cbf\u5373\u5076\u6570\u8fb9\u6cbf\u3002</p> <p></p> <p>1\uff09\u6a21\u5f0f 0\uff0cCPOL=0\uff0cCPHA=0\uff1b\u7a7a\u95f2\u65f6\uff0cSCL \u5904\u4e8e\u4f4e\u7535\u5e73\uff0c\u6570\u636e\u91c7\u6837\u5728\u7b2c 1 \u4e2a\u8fb9\u6cbf\uff0c\u5373SCL \u7531\u4f4e\u7535\u5e73\u5230\u9ad8\u7535\u5e73\u7684\u8df3\u53d8\uff0c\u6570\u636e\u91c7\u6837\u5728\u4e0a\u5347\u6cbf\uff0c\u6570\u636e\u53d1\u9001\u5728\u4e0b\u964d\u6cbf\u3002</p> <p>2\uff09\u6a21\u5f0f 1\uff0cCPOL=0\uff0cCPHA=1\uff1b\u7a7a\u95f2\u65f6\uff0cSCL \u5904\u4e8e\u4f4e\u7535\u5e73\uff0c\u6570\u636e\u91c7\u6837\u5728\u7b2c 2 \u4e2a\u8fb9\u6cbf\uff0c\u5373SCL \u7531\u9ad8\u7535\u5e73\u5230\u4f4e\u7535\u5e73\u7684\u8df3\u53d8\uff0c\u6570\u636e\u91c7\u6837\u5728\u4e0b\u5347\u6cbf\uff0c\u6570\u636e\u53d1\u9001\u5728\u4e0a\u964d\u6cbf\u3002</p> <p>3\uff09\u6a21\u5f0f 2\uff0cCPOL=1\uff0cCPHA=0\uff1b\u7a7a\u95f2\u65f6\uff0cSCL \u5904\u4e8e\u9ad8\u7535\u5e73\uff0c\u6570\u636e\u91c7\u6837\u5728\u7b2c 1 \u4e2a\u8fb9\u6cbf\uff0c\u5373SCL \u7531\u9ad8\u7535\u5e73\u5230\u4f4e\u7535\u5e73\u7684\u8df3\u53d8\uff0c\u6570\u636e\u91c7\u6837\u5728\u4e0b\u5347\u6cbf\uff0c\u6570\u636e\u53d1\u9001\u5728\u4e0a\u964d\u6cbf\u3002</p> <p>4\uff09\u6a21\u5f0f 3\uff0cCPOL=1\uff0cCPHA=1\uff1b\u7a7a\u95f2\u65f6\uff0cSCL \u5904\u4e8e\u9ad8\u7535\u5e73\uff0c\u6570\u636e\u91c7\u6837\u5728\u7b2c 2 \u4e2a\u8fb9\u6cbf\uff0c\u5373SCL \u7531\u4f4e\u7535\u5e73\u5230\u9ad8\u7535\u5e73\u7684\u8df3\u53d8\uff0c\u6570\u636e\u91c7\u6837\u5728\u4e0a\u5347\u6cbf\uff0c\u6570\u636e\u53d1\u9001\u5728\u4e0b\u964d\u6cbf\u3002</p>"},{"location":"zh/MAIN-CONTROL/SPI/spi/#esp32-s3-spi","title":"ESP32-S3 SPI \u63a7\u5236\u5668","text":"<p>ESP32-S3 \u82af\u7247\u96c6\u6210\u4e86\u56db\u4e2a SPI \u63a7\u5236\u5668\uff0c\u5206\u522b\u4e3a SPI0\u3001SPI1\u3001SPI2 \u548c SPI3\u3002SPI0 \u548c SPI1 \u63a7\u5236\u5668\u4e3b\u8981\u4f9b\u5185\u90e8\u4f7f\u7528\u4ee5\u8bbf\u95ee\u5916\u90e8 FLASH \u548c PSRAM\uff0c\u6240\u4ee5\u53ea\u80fd\u4f7f\u7528 SPI2 \u548c SPI3 \u3002SPI2 \u53c8\u79f0\u4e3aHSPI\uff0c\u800c SPI3 \u53c8\u79f0\u4e3a VSPI\uff0c\u8fd9\u4e24\u4e2a\u5c5e\u4e8e GP-SPI\u3002 GP-SPI \u7279\u6027\uff1a - \u652f\u6301\u4e3b\u673a\u6a21\u5f0f\u548c\u4ece\u673a\u6a21\u5f0f</p> <ul> <li> <p>\u652f\u6301\u534a\u53cc\u5de5\u901a\u4fe1\u548c\u5168\u53cc\u5de5\u901a\u4fe1</p> </li> <li> <p>\u652f\u6301\u591a\u79cd\u6570\u636e\u6a21\u5f0f\uff1a</p> <ul> <li> <p>SPI2\uff1a1-bit SPI \u6a21\u5f0f\u30012-bit Dual SPI \u6a21\u5f0f\u30014-bit Quad SPI \u6a21\u5f0f\u3001QPI \u6a21\u5f0f\u30018-bit Octal \u6a21\u5f0f\u3001OPI \u6a21\u5f0f</p> </li> <li> <p>SPI3\uff1a1-bit SPI \u6a21\u5f0f\u30012-bit Dual SPI \u6a21\u5f0f\u30014-bit Quad SPI \u6a21\u5f0f\u3001QPI \u6a21\u5f0f</p> </li> </ul> </li> <li> <p>\u65f6\u949f\u9891\u7387\u53ef\u914d\u7f6e\uff1a</p> <ul> <li> <p>\u5728\u4e3b\u673a\u6a21\u5f0f\u4e0b\uff1a\u65f6\u949f\u9891\u7387\u53ef\u8fbe 80MHz</p> </li> <li> <p>\u5728\u4ece\u673a\u6a21\u5f0f\u4e0b\uff1a\u65f6\u949f\u9891\u7387\u53ef\u8fbe 60MHz</p> </li> </ul> </li> <li> <p>\u6570\u636e\u4f4d\u7684\u8bfb\u5199\u987a\u5e8f\u53ef\u914d\u7f6e</p> </li> <li> <p>\u65f6\u949f\u6781\u6027\u548c\u76f8\u4f4d\u53ef\u914d\u7f6e</p> </li> <li> <p>\u56db\u79cd SPI \u65f6\u949f\u6a21\u5f0f\uff1a\u6a21\u5f0f 0 ~ \u6a21\u5f0f 3</p> </li> <li> <p>\u5728\u4e3b\u673a\u6a21\u5f0f\u4e0b\uff0c\u63d0\u4f9b\u591a\u6761 CS \u7ebf</p> <ul> <li> <p>SPI2\uff1aCS0 ~ CS5</p> </li> <li> <p>SPI3\uff1aCS0 ~ CS2</p> </li> </ul> </li> <li> <p>\u652f\u6301\u8bbf\u95ee SPI \u63a5\u53e3\u7684\u4f20\u611f\u5668\u3001\u663e\u793a\u5c4f\u63a7\u5236\u5668\u3001flash \u6216 RAM \u82af\u7247</p> </li> </ul> <p>SPI2 \u548c SPI3 \u63a5\u53e3\u76f8\u5173\u4fe1\u53f7\u7ebf\u53ef\u4ee5\u7ecf\u8fc7 GPIO \u4ea4\u6362\u77e9\u9635\u548c IO_MUX \u5b9e\u73b0\u4e0e\u82af\u7247\u5f15\u811a\u7684\u6620\u5c04\uff0cIO \u4f7f\u7528\u8d77\u6765\u975e\u5e38\u7075\u6d3b</p>"},{"location":"zh/MAIN-CONTROL/SPI/spi/#_1","title":"\u6d4b\u8bd5\u7528\u4f8b","text":"<p>\u672c\u7ae0\u4f7f\u7528SPI\u63a7\u5236LCD\u663e\u793a\u5c4f\uff0c\u8bf7\u7ed3\u5408LCD\u7ae0\u8282\u8fdb\u884c\u5b66\u4e60\u3002\u6d4b\u8bd5\u7528\u4f8b\u5982\u4e0b\uff1a</p> <p>\u201c\u6309\u4e0b\u590d\u4f4d\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u770b\u5230 SPI LCD \u6a21\u5757\u4e0d\u505c\u7684\u663e\u793a\u4e00\u4e9b\u4fe1\u606f\u5e76\u4e0d\u65ad\u5207\u6362\u5e95\u8272\u3002LED \u95ea\u70c1\u7528\u4e8e\u63d0\u793a\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c\u3002\u201d</p>"},{"location":"zh/MAIN-CONTROL/SPI/spi/#_2","title":"\u7535\u8def\u56fe","text":""},{"location":"zh/MAIN-CONTROL/SPI/spi/#_3","title":"\u4f9d\u8d56","text":"<p>ESP-IDF\u63d0\u4f9b\u4e00\u5957API\u6765\u4f7f\u7528SPI\uff0c\u8981\u4f7f\u7528\u6b64\u529f\u80fd\uff0c\u9700\u8981\u5bfc\u5165\u5fc5\u8981\u7684\u5934\u6587\u4ef6\uff1a</p> <pre><code>#include \"driver/spi_master.h\"\n</code></pre>"},{"location":"zh/MAIN-CONTROL/SPI/spi/#_4","title":"\u91cd\u70b9\u51fd\u6570\u89e3\u6790","text":""},{"location":"zh/MAIN-CONTROL/SPI/spi/#_5","title":"\u521d\u59cb\u5316\u548c\u914d\u7f6e","text":"<p>\u8be5\u51fd\u6570\u7528\u4e8e\u521d\u59cb\u5316 SPI \u603b\u7ebf\uff0c\u5e76\u914d\u7f6e\u5176 GPIO\u5f15\u811a\u548c\u4e3b\u6a21\u5f0f\u4e0b\u7684\u65f6\u949f\u7b49\u53c2\u6570\uff0c\u8be5\u51fd\u6570\u539f\u578b\u5982\u4e0b\u6240\u793a\uff1a</p> <p><pre><code>esp_err_t spi_bus_initialize(spi_host_device_t host_id,\n                    const spi_bus_config_t *bus_config,\n                                spi_dma_chan_t dma_chan);\n</code></pre> \u8be5\u51fd\u6570\u7684\u5f62\u53c2\u63cf\u8ff0\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> \u53c2\u6570 \u63cf\u8ff0 host_id \u6307\u5b9a SPI \u603b\u7ebf\u7684\u4e3b\u673a\u8bbe\u5907 ID bus_config \u6307\u5411 spi_bus_config_t \u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u7528\u4e8e\u914d\u7f6e SPI \u603b\u7ebf\u7684SCLK\u3001MISO\u3001MOSI \u7b49\u5f15\u811a\u4ee5\u53ca\u5176\u4ed6\u53c2\u6570 dma_chan \u6307\u5b9a\u4f7f\u7528\u54ea\u4e2a DMA \u901a\u9053\u3002\u6709\u6548\u503c\u4e3a\uff1aSPI_DMA_CH_AUTO\uff0cSPI_DMA_DISABLED \u6216 1 \u81f3 2 \u4e4b\u95f4\u7684\u6570\u5b57 <p>\u8fd4\u56de\u503c\uff1aESP_OK \u914d\u7f6e\u6210\u529f\u3002\u5176\u4ed6\u914d\u7f6e\u5931\u8d25\u3002</p> <p>\u8be5\u51fd\u6570\u4f7f\u7528 spi_bus_config_t \u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u53d8\u91cf\u4f20\u5165\uff0c\u7b14\u8005\u6b64\u5904\u5217\u4e3e\u4e86\u6211\u4eec\u9700\u8981\u7528\u5230\u7684\u7ed3\u6784\u4f53\uff0c\u8be5\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u5982\u4e0b\u6240\u793a\uff1a</p> <p><pre><code>typedef struct {\n    int miso_io_num; /* MISO \u5f15\u811a\u53f7 */ \n    int mosi_io_num; /* MOSI \u5f15\u811a\u53f7 */ \n    int sclk_io_num; /* \u65f6\u949f\u5f15\u811a\u53f7 */ \n    int quadwp_io_num; /* \u7528\u4e8e Quad \u6a21\u5f0f\u7684 WP \u5f15\u811a\u53f7\uff0c\u672a\u4f7f\u7528\u65f6\u8bbe\u7f6e\u4e3a-1 */ \n    int quadhd_io_num; /* \u7528\u4e8e Quad \u6a21\u5f0f\u7684 HD \u5f15\u811a\u53f7\uff0c\u672a\u4f7f\u7528\u65f6\u8bbe\u7f6e\u4e3a-1 */ \n    int max_transfer_sz; /* \u6700\u5927\u4f20\u8f93\u5927\u5c0f */\n    \u2026 /* \u5176\u4ed6\u7279\u5b9a\u7684\u914d\u7f6e\u53c2\u6570 */\n} spi_bus_config_t;\n</code></pre> \u5b8c\u6210\u4e0a\u8ff0\u7ed3\u6784\u4f53\u53c2\u6570\u914d\u7f6e\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u7ed3\u6784\u4f20\u9012\u7ed9 spi_bus_initialize \u51fd\u6570\uff0c\u7528\u4ee5\u5b9e\u4f8b\u5316 SPI\u3002</p>"},{"location":"zh/MAIN-CONTROL/SPI/spi/#_6","title":"\u8bbe\u5907\u914d\u7f6e","text":"<p>\u8be5\u51fd\u6570\u7528\u4e8e\u5728 SPI \u603b\u7ebf\u4e0a\u5206\u914d\u8bbe\u5907\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>esp_err_t spi_bus_add_device(spi_host_device_t host_id,\n       const spi_device_interface_config_t *dev_config,\n                           spi_device_handle_t *handle);\n</code></pre> <p>\u8be5\u51fd\u6570\u7684\u5f62\u53c2\u63cf\u8ff0\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> \u53c2\u6570 \u63cf\u8ff0 host_id \u6307\u5b9a SPI \u603b\u7ebf\u7684\u4e3b\u673a\u8bbe\u5907 ID dev_config \u6307\u5411 spi_device_interface_config_t \u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u7528\u4e8e\u914d\u7f6eSPI \u8bbe\u5907\u7684\u901a\u4fe1\u53c2\u6570\uff0c\u5982\u65f6\u949f\u901f\u7387\u3001SPI \u6a21\u5f0f\u7b49\u3002 handle \u8fd4\u56de\u521b\u5efa\u7684\u8bbe\u5907\u53e5\u67c4 <p>\u8fd4\u56de\u503c\uff1aESP_OK \u914d\u7f6e\u6210\u529f\u3002\u5176\u4ed6\u914d\u7f6e\u5931\u8d25\u3002</p> <p>\u8be5\u51fd\u6570\u4f7f\u7528 spi_host_device_t \u7c7b\u578b\u4ee5\u53ca spi_device_interface_config_t \u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u53d8\u91cf\u4f20\u5165SPI \u5916\u56f4\u8bbe\u5907\u7684\u914d\u7f6e\u53c2\u6570\uff0c\u8be5\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>/**\n* @brief \u5e26\u6709\u4e09\u4e2a SPI \u5916\u56f4\u8bbe\u5907\u7684\u679a\u4e3e\uff0c\u8fd9\u4e9b\u5916\u56f4\u8bbe\u5907\u53ef\u901a\u8fc7\u8f6f\u4ef6\u8bbf\u95ee\n*/\ntypedef enum {\n    /* SPI1 \u53ea\u80fd\u5728 ESP32 \u4e0a\u7528\u4f5c GPSPI */\n    SPI1_HOST = 0, /* SPI1 */\n    SPI2_HOST = 1, /* SPI2 */\n#if SOC_SPI_PERIPH_NUM &gt; 2\n    SPI3_HOST = 2, /* SPI3 */\n#endif\n    SPI_HOST_MAX, /* \u65e0\u6548\u7684\u4e3b\u673a\u503c */\n}spi_host_device_t\ntypedef struct {\n    uint32_t command_bits; /* \u547d\u4ee4\u9636\u6bb5\u7684\u4f4d\u6570 */\n    uint32_t address_bits; /* \u5730\u5740\u9636\u6bb5\u7684\u4f4d\u6570 */\n    uint32_t dummy_bits; /* \u865a\u62df\u9636\u6bb5\u7684\u4f4d\u6570 */\n    int clock_speed_hz; /* \u65f6\u949f\u901f\u7387 */\n    uint32_t mode; /* SPI \u6a21\u5f0f\uff080-3\uff09 */\n    int spics_io_num; /* CS \u5f15\u811a\u53f7 */\n    ...             /* \u5176\u4ed6\u8bbe\u5907\u7279\u5b9a\u7684\u914d\u7f6e\u53c2\u6570 */\n    } spi_device_interface_config_t;\n</code></pre>"},{"location":"zh/MAIN-CONTROL/SPI/spi/#_7","title":"\u6570\u636e\u4f20\u8f93","text":"<p>\u6839\u636e\u51fd\u6570\u529f\u80fd\uff0c\u4ee5\u4e0b\u51fd\u6570\u53ef\u4ee5\u5f52\u4e3a\u4e00\u7c7b\u8fdb\u884c\u8bb2\u89e3\uff0c\u4e0b\u9762\u5c06\u4ee5\u8868\u683c\u7684\u5f62\u5f0f\u9010\u4e2a\u4ecb\u7ecd\u8fd9\u4e9b\u51fd\u6570\u7684\u4f5c\u7528\u4e0e\u53c2\u6570\u3002</p> \u51fd\u6570 \u63cf\u8ff0 spi_device_transmit() \u8be5\u51fd\u6570\u7528\u4e8e\u53d1\u9001\u4e00\u4e2a SPI \u4e8b\u52a1\uff0c\u7b49\u5f85\u5b83\u5b8c\u6210\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002handle\uff1a\u8bbe\u5907\u7684\u53e5\u67c4\u3002trans_desc\uff1a\u6307\u5411 spi_transaction_t \u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u63cf\u8ff0\u4e86\u8981\u53d1\u9001\u7684\u4e8b\u52a1\u8be6\u60c5\u3002 spi_device_polling_transmit() \u8be5\u51fd\u6570\u7528\u4e8e\u53d1\u9001\u4e00\u4e2a\u8f6e\u8be2\u4e8b\u52a1\uff0c\u7b49\u5f85\u5b83\u5b8c\u6210\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002handle\uff1a\u8bbe\u5907\u7684\u53e5\u67c4\u3002trans_desc\uff1a\u6307\u5411 spi_transaction_t \u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u63cf\u8ff0\u4e86\u8981\u53d1\u9001\u7684\u4e8b\u52a1\u8be6\u60c5\u3002"},{"location":"zh/MAIN-CONTROL/SPI/spi/#_8","title":"\u4ee3\u7801","text":""},{"location":"zh/MAIN-CONTROL/SPI/spi/#spic","title":"spi.c","text":"<pre><code>/**\n * @file spi.c\n * @author \n * @brief \n * @version 1.0\n * @date 2024-11-18\n * @ref Alientek SPI driver\n * \n */\n\n#include \"spi.h\"\n\n/**\n * @brief       Initialize SPI\n * @param       None\n * @retval      None\n */\nvoid spi2_init(void)\n{\n    esp_err_t ret = 0;\n    spi_bus_config_t spi_bus_conf = {0};\n\n    /* SPI bus configuration */\n    spi_bus_conf.miso_io_num = SPI_MISO_GPIO_PIN;                               /* SPI_MISO pin */\n    spi_bus_conf.mosi_io_num = SPI_MOSI_GPIO_PIN;                               /* SPI_MOSI pin */\n    spi_bus_conf.sclk_io_num = SPI_CLK_GPIO_PIN;                                /* SPI_SCLK pin */\n    spi_bus_conf.quadwp_io_num = -1;                                            /* SPI write protection signal pin, not enabled */\n    spi_bus_conf.quadhd_io_num = -1;                                            /* SPI hold signal pin, not enabled */\n    spi_bus_conf.max_transfer_sz = 160 * 80 * 2;                                /* Configure maximum transfer size in bytes */\n\n    /* Initialize SPI bus */\n    ret = spi_bus_initialize(SPI2_HOST, &amp;spi_bus_conf, SPI_DMA_CH_AUTO);        /* SPI bus initialization */\n    ESP_ERROR_CHECK(ret);                                                       /* Check parameter values */\n}\n\n/**\n * @brief       Send command via SPI\n * @param       handle : SPI handle\n * @param       cmd    : Command to send\n * @retval      None\n */\nvoid spi2_write_cmd(spi_device_handle_t handle, uint8_t cmd)\n{\n    esp_err_t ret;\n    spi_transaction_t t = {0};\n\n    t.length = 8;                                       /* Number of bits to transmit (1 byte = 8 bits) */\n    t.tx_buffer = &amp;cmd;                                 /* Fill the command */\n    ret = spi_device_polling_transmit(handle, &amp;t);      /* Start transmission */\n    ESP_ERROR_CHECK(ret);                               /* Usually no issues */\n}\n\n/**\n * @brief       Send data via SPI\n * @param       handle : SPI handle\n * @param       data   : Data to send\n * @param       len    : Length of data to send\n * @retval      None\n */\nvoid spi2_write_data(spi_device_handle_t handle, const uint8_t *data, int len)\n{\n    esp_err_t ret;\n    spi_transaction_t t = {0};\n\n    if (len == 0)\n    {\n        return;                                     /* No data to transmit if length is 0 */\n    }\n\n    t.length = len * 8;                             /* Number of bits to transmit (1 byte = 8 bits) */\n    t.tx_buffer = data;                             /* Fill the data */\n    ret = spi_device_polling_transmit(handle, &amp;t);  /* Start transmission */\n    ESP_ERROR_CHECK(ret);                           /* Usually no issues */\n}\n\n/**\n * @brief       Process data via SPI\n * @param       handle       : SPI handle\n * @param       data         : Data to send\n * @retval      t.rx_data[0] : Received data\n */\nuint8_t spi2_transfer_byte(spi_device_handle_t handle, uint8_t data)\n{\n    spi_transaction_t t;\n\n    memset(&amp;t, 0, sizeof(t));\n\n    t.flags = SPI_TRANS_USE_TXDATA | SPI_TRANS_USE_RXDATA;\n    t.length = 8;\n    t.tx_data[0] = data;\n    spi_device_transmit(handle, &amp;t);\n\n    return t.rx_data[0];\n}\n</code></pre> <p>\u5728 spi2_init()\u51fd\u6570\u4e2d\u4e3b\u8981\u5de5\u4f5c\u5c31\u662f\u5bf9\u4e8e SPI \u53c2\u6570\u7684\u914d\u7f6e\uff0c\u5982 SPI \u7ba1\u811a\u914d\u7f6e\u548c\u6570\u636e\u4f20\u8f93\u5927\u5c0f\u4ee5\u53ca SPI \u603b\u7ebf\u914d\u7f6e\u7b49\uff0c\u901a\u8fc7\u8be5\u51fd\u6570\u5c31\u53ef\u4ee5\u5b8c\u6210 SPI \u521d\u59cb\u5316\u3002</p> <p>Tip</p> <p>\u5173\u4e8eLCD\u76f8\u5173\u4ee3\u7801\uff0c\u8bf7\u53c2\u8003LCD\u7ae0\u8282\u3002</p>"},{"location":"zh/MAIN-CONTROL/TF-CARD/tf-card/","title":"TF\u5361\uff08SD\u5361\uff09\u64cd\u4f5c - SPI\u65b9\u5f0f","text":""},{"location":"zh/MAIN-CONTROL/TF-CARD/tf-card/#_1","title":"\u4ecb\u7ecd","text":"<p>SD\u5361\u4ecb\u7ecd</p> <p>\u672c\u5f88\u591a\u5355\u7247\u673a\u7cfb\u7edf\u90fd\u9700\u8981\u5927\u5bb9\u91cf\u5b58\u50a8\u8bbe\u5907\uff0c\u4ee5\u5b58\u50a8\u6570\u636e\u3002\u76ee\u524d\u5e38\u7528\u7684\u6709U\u76d8\uff0cFLASH\u82af\u7247\uff0cSD\u5361\u7b49\u3002\u4ed6\u4eec\u5404\u6709\u4f18\u70b9\uff0c\u7efc\u5408\u6bd4\u8f83\uff0c\u6700\u9002\u5408\u5355\u7247\u673a\u7cfb\u7edf\u7684\u83ab\u8fc7\u4e8eSD\u5361\u4e86\uff0c\u5b83\u4e0d\u4ec5\u5bb9\u91cf\u53ef\u4ee5\u505a\u5230\u5f88\u5927\uff0832GB\u4ee5\u4e0a\uff09\uff0c\u652f\u6301SPI/SDIO\u9a71\u52a8\uff0c\u800c\u4e14\u6709\u591a\u79cd\u4f53\u79ef\u7684\u5c3a\u5bf8\u53ef\u4f9b\u9009\u62e9\uff08\u6807\u51c6\u7684SD\u5361\u5c3a\u5bf8\u53caMicro SD\u5361\u5c3a\u5bf8\u7b49\uff09\uff0c\u80fd\u6ee1\u8db3\u4e0d\u540c\u5e94\u7528\u7684\u8981\u6c42\u3002</p> <p>\u53ea\u9700\u8981\u5c11\u6570\u51e0\u4e2aIO\u53e3\u5373\u53ef\u5916\u6269\u4e00\u4e2a\u9ad8\u8fbe32GB\u6216\u4ee5\u4e0a\u7684\u5916\u90e8\u5b58\u50a8\u5668\uff0c\u5bb9\u91cf\u4ece\u51e0\u5341M\u5230\u51e0\u5341G\u9009\u62e9\u8303\u56f4\u5f88\u5927\uff0c\u66f4\u6362\u4e5f\u5f88\u65b9\u4fbf\uff0c\u7f16\u7a0b\u4e5f\u7b80\u5355\uff0c\u662f\u5355\u7247\u673a\u5927\u5bb9\u91cf\u5916\u90e8\u5b58\u50a8\u5668\u7684\u9996\u9009\u3002</p> <p>\u6b63\u70b9\u539f\u5b50ESP32-S3\u6700\u5c0f\u7cfb\u7edf\u677f\u4f7f\u7528\u7684\u63a5\u53e3\u662fMicro SD\u5361\u63a5\u53e3\uff0c\u5361\u5ea7\u5e26\u81ea\u9501\u529f\u80fd\uff0cSD SPI\u4e3b\u673a\u9a71\u52a8\u7a0b\u5e8f\u57fa\u4e8eSPI Master Driver\u5b9e\u73b0\u3002\u501f\u52a9SPI\u4e3b\u63a7\u9a71\u52a8\u7a0b\u5e8f\uff0cSD\u5361\u53ca\u5176\u4ed6SPI\u8bbe\u5907\u53ef\u4ee5\u5171\u4eab\u540c\u4e00SPI\u603b\u7ebf\u3002SPI\u4e3b\u673a\u9a71\u52a8\u7a0b\u5e8f\u5c06\u5904\u7406\u6765\u81ea\u4e0d\u540c\u4efb\u52a1\u7684\u72ec\u5360\u8bbf\u95ee\u3002</p> <p>Info</p> <p>\u4e00\u4e2a\u5b8c\u6574\u7684 SD\u5361\u64cd\u4f5c\u8fc7\u7a0b\u662f\uff1a\u4e3b\u673a(\u5355\u7247\u673a\u7b49)\u53d1\u8d77\u201c\u547d\u4ee4\u201d\uff0cSD\u5361\u6839\u636e\u547d\u4ee4\u7684\u5185\u5bb9\u51b3\u5b9a\u662f\u5426\u53d1\u9001\u54cd\u5e94\u4fe1\u606f\u53ca\u6570\u636e\u7b49\uff0c\u5982\u679c\u662f\u6570\u636e\u8bfb/\u5199\u64cd\u4f5c\uff0c\u4e3b\u673a\u8fd8\u9700\u8981\u53d1\u9001\u505c\u6b62\u8bfb/\u5199\u6570\u636e\u7684\u547d\u4ee4\u6765\u7ed3\u675f\u672c\u6b21\u64cd\u4f5c\uff0c\u8fd9\u610f\u5473\u7740\u4e3b\u673a\u53d1\u8d77\u547d\u4ee4\u6307\u4ee4\u540e\uff0cSD \u5361\u53ef\u4ee5\u6ca1\u6709\u54cd\u5e94\u3001\u6570\u636e\u7b49\u8fc7\u7a0b\uff0c\u8fd9\u53d6\u51b3\u4e8e\u547d\u4ee4\u7684\u542b\u4e49\u3002</p> <p>\u5361\u6a21\u5f0f</p> <p>SD\u5361\u6709\u4e24\u79cd\u6709\u6548\u64cd\u4f5c\u6a21\u5f0f\uff1a\u201c\u5361\u8bc6\u522b\u6a21\u5f0f\u201d\u548c\u201c\u6570\u636e\u4f20\u8f93\u6a21\u5f0f\u201d\u3002\u6839\u636e\u64cd\u4f5c\u65b9\u5f0f\u4e0d\u540c\uff0c\u5206\u4e3aSD\u6a21\u5f0f\u548cSPI\u6a21\u5f0f\u3002\u6b63\u70b9\u539f\u5b50ESP32-S3\u6700\u5c0f\u7cfb\u7edf\u677f\u4f7f\u7528\u7684\u662fSPI\u6a21\u5f0f\u3002</p>"},{"location":"zh/MAIN-CONTROL/TF-CARD/tf-card/#_2","title":"\u5173\u952e\u6b65\u9aa4","text":"<ol> <li>SD\u5361\u521d\u59cb\u5316 \uff08SPI\u6a21\u5f0f/SDIO\u6a21\u5f0f\uff09</li> <li>SD\u5361\u8bfb\u5199\u6570\u636e</li> </ol> <p>Warning</p> <p>ESP32\u7684SDIO\u9a71\u52a8\u6a21\u5f0f\u548cSPI\u9a71\u52a8\u6a21\u5f0f\u4e0d\u517c\u5bb9\uff0c\u53ea\u80fd\u9009\u62e9\u4e00\u79cd\u9a71\u52a8\u6a21\u5f0f\u3002</p>"},{"location":"zh/MAIN-CONTROL/TF-CARD/tf-card/#_3","title":"\u7528\u4f8b","text":"<p>\u672c\u7ae0\u5b9e\u9a8c\u529f\u80fd\u7b80\u4ecb\uff1a\u7ecf\u8fc7\u4e00\u7cfb\u5217\u521d\u59cb\u5316\u4e4b\u540e\uff0c\u901a\u8fc7\u4e00\u4e2a while \u5faa\u73af\u4ee5 SD \u5361\u521d\u59cb\u5316\u4e3a\u6761\u4ef6\uff0c\u4ee5\u68c0\u6d4b SD \u5361\u662f\u5426\u521d\u59cb\u5316\u6210\u529f\uff0c\u82e5\u521d\u59cb\u5316 SD \u5361\u6210\u529f\uff0c\u5219\u4f1a\u901a\u8fc7\u4e32\u53e3\u6216\u8005 VSCode \u7ec8\u7aef\u8f93\u51fa SD\u5361\u7684\u76f8\u5173\u53c2\u6570\uff0c\u5e76\u5728 LCD \u4e0a\u663e\u793a SD \u5361\u7684\u603b\u5bb9\u91cf\u4ee5\u53ca\u5269\u4f59\u5bb9\u91cf\u3002\u6b64\u65f6 LED \u95ea\u70c1\uff0c\u8868\u793a\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c\u3002</p>"},{"location":"zh/MAIN-CONTROL/TF-CARD/tf-card/#_4","title":"\u6d89\u53ca\u8d44\u6e90","text":"<ol> <li>LED \u706f LED -IO0</li> <li>0.96 \u5bf8 LCD</li> <li>SD CS-IO2 SCK-IO12 MOSI-IO11 MISO-IO13</li> </ol>"},{"location":"zh/MAIN-CONTROL/TF-CARD/tf-card/#_5","title":"\u63a5\u7ebf\u56fe","text":"<p>\u672c\u7ae0\u5b9e\u9a8c\u4f7f\u7528 SPI \u63a5\u53e3\u4e0e SD \u5361\u8fdb\u884c\u8fde\u63a5\uff0cDNESP32S3M \u6700\u5c0f\u7cfb\u7edf\u677f\u677f\u8f7d\u4e86\u4e00\u4e2a Micro SD\u5361\u5ea7\u7528\u4e8e\u8fde\u63a5 SD \u5361\uff0cSD \u5361\u4e0e ESP32-S3 \u7684\u8fde\u63a5\u539f\u7406\u56fe\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p>"},{"location":"zh/MAIN-CONTROL/TF-CARD/tf-card/#esp-idf-api","title":"ESP-IDF API","text":"<p>\u8981\u4f7f\u7528SD\u5361\u76f8\u5173\u529f\u80fd\uff0c\u9996\u5148\u8981\u5bfc\u5165\u9700\u8981\u7684\u6587\u4ef6\u3002</p> <pre><code>#include \"driver/sdspi_host.h\"\n#include \"driver/spi_common.h\"\n#include \"sdmmc_cmd.h\"\n#include \"driver/sdmmc_host.h\"\n#include \"spi.h\"\n</code></pre>"},{"location":"zh/MAIN-CONTROL/TF-CARD/tf-card/#_6","title":"\u5173\u952e\u51fd\u6570","text":""},{"location":"zh/MAIN-CONTROL/TF-CARD/tf-card/#sd","title":"\u6302\u8f7dSD\u5361","text":"<pre><code>esp_err_t esp_vfs_fat_sdspi_mount(const char* base_path,\n                                  const sdmmc_host_t* host_config_input,\n                                  const sdspi_device_config_t* slot_config,\n                                  const esp_vfs_fat_mount_config_t*mount_config,\n                                  sdmmc_card_t** out_card);\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> \u53c2\u6570 \u8bf4\u660e base_path \u6302\u8f7d\u70b9\uff0c\u5e94\u8be5\u6ce8\u518c\u5206\u533a\u7684\u8def\u5f84\uff08\u4f8b\u5982\u201c/sdcard\u201d\uff09 host_config_input SDMMC\u4e3b\u673a\u914d\u7f6e\uff0c\u6307\u5411\u63cf\u8ff0 SDMMC \u4e3b\u673a\u7684\u7ed3\u6784\u7684\u6307\u9488\u3002\u6b64\u7ed3\u6784\u53ef\u4ee5\u4f7f\u7528 SDSPI_HOST_DEFAULT \u5b8f\u521d\u59cb\u5316\u3002 slot_config SD\u5361\u914d\u7f6e\uff0c\u6307\u5411\u5177\u6709\u63d2\u69fd\u914d\u7f6e\u7684\u7ed3\u6784\u7684\u6307\u9488,\u5bf9\u4e8e SPI \u5916\u8bbe\uff0c\u5c06\u6307\u9488\u4f20\u9012\u5230\u4f7f\u7528 sdspi_device_config_DEFAULT \u521d\u59cb\u5316\u7684sdspi_device_config_t \u7ed3\u6784\u3002 mount_config \u6302\u8f7d\u914d\u7f6e\uff0c\u6307\u5411 esp_vfs_fat_mount_config_t \u7ed3\u6784\u7684\u6307\u9488\uff0c\u7528\u4e8e\u914d\u7f6e FAT \u6587\u4ef6\u7cfb\u7edf\u7684\u6302\u8f7d\u9009\u9879\u3002 out_card \u5982\u679c\u4e0d\u662f NULL\uff0c\u6307\u5411\u5361\u7247\u4fe1\u606f\u7ed3\u6784\u7684\u6307\u9488\u5c06\u901a\u8fc7\u6b64\u53c2\u6570 \u8fd4\u56de\u3002 <p>\u8fd4\u56de\u503c\u8bf4\u660e\uff1a</p> \u8fd4\u56de\u503c \u8bf4\u660e ESP_OK \u6210\u529f ESP_ERR_INVALID_STATE \u65e0\u6548\u72b6\u6001\uff0c\u5982\u679c\u5df2\u7ecf\u8c03\u7528\u4e86 esp_vfs_fat_sdmmc_mount ESP_ERR_NO_MEM \u5982\u679c\u65e0\u6cd5\u5206\u914d\u5185\u5b58 ESP_FAIL \u5982\u679c\u5206\u533a\u65e0\u6cd5\u5b89\u88c5\uff0c\u5219\u6765\u81ea SDMMC \u6216 SPI \u9a71\u52a8\u7a0b\u5e8f\u3001SDMMC \u534f\u8bae\u6216 FATFS \u9a71\u52a8\u7a0b\u5e8f\u7684\u5176\u4ed6\u9519\u8bef\u4ee3\u7801"},{"location":"zh/MAIN-CONTROL/TF-CARD/tf-card/#sd_1","title":"\u53d6\u6d88\u6302\u8f7dSD\u5361","text":"<pre><code>esp_err_t esp_vfs_fat_sdcard_unmount(const char* base_path, sdmmc_card_t *card);\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> \u53c2\u6570 \u8bf4\u660e base_path \u6302\u8f7d\u70b9\uff0c\u5e94\u8be5\u6ce8\u518c\u5206\u533a\u7684\u8def\u5f84\uff08\u4f8b\u5982\u201c/sdcard\u201d\uff09 card SD / MMC \u5361\u7ed3\u6784 <p>\u8fd4\u56de\u503c\u8bf4\u660e\uff1a</p> \u8fd4\u56de\u503c \u8bf4\u660e ESP_OK \u6210\u529f ESP_ERR_INVALID_ARG \u5982\u679c card \u53c2\u6570\u672a\u6ce8\u518c ESP_ERR_INVALID_STATE \u5982\u679c\u5c1a\u672a\u8c03\u7528 esp_vfs_fat_sdmmc_mount"},{"location":"zh/MAIN-CONTROL/TF-CARD/tf-card/#_7","title":"\u9a71\u52a8\u4ee3\u7801","text":""},{"location":"zh/MAIN-CONTROL/TIMER/timer/","title":"\u5b9a\u65f6\u5668","text":""},{"location":"zh/MAIN-CONTROL/TIMER/timer/#_2","title":"\u7b80\u4ecb","text":"<p>\u672c\u7ae0\u4ecb\u7ecd ESP32 \u5b9a\u65f6\u5668\u7684\u4f7f\u7528\u3002</p> <p>\u5b9a\u65f6\u5668</p> <p>\u5b9a\u65f6\u5668\u662f\u5355\u7247\u673a\u5185\u90e8\u96c6\u6210\u7684\u529f\u80fd\uff0c\u5b83\u80fd\u591f\u901a\u8fc7\u7f16\u7a0b\u8fdb\u884c\u7075\u6d3b\u63a7\u5236\u3002\u5355\u7247\u673a\u7684\u5b9a\u65f6\u529f\u80fd\u4f9d\u8d56\u4e8e\u5185\u90e8\u7684\u8ba1\u6570\u5668\u5b9e\u73b0\uff0c\u6bcf\u5f53\u5355\u7247\u673a\u7ecf\u5386\u4e00\u4e2a\u673a\u5668\u5468\u671f\u5e76\u4ea7\u751f\u4e00\u4e2a\u8109\u51b2\u65f6\uff0c\u8ba1\u6570\u5668\u5c31\u4f1a\u9012\u589e\u3002\u5b9a\u65f6\u5668\u7684\u4e3b\u8981\u4f5c\u7528\u5728\u4e8e\u8ba1\u65f6\uff0c\u5f53\u8bbe\u5b9a\u7684\u65f6\u95f4\u5230\u8fbe\u540e\uff0c\u5b83\u4f1a\u89e6\u53d1\u4e2d\u65ad\uff0c\u4ece\u800c\u901a\u77e5\u7cfb\u7edf\u8ba1\u65f6\u5b8c\u6210\u3002\u5728\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u7279\u5b9a\u7684\u7a0b\u5e8f\u4ee5\u5b9e\u73b0\u6240\u9700\u7684\u529f\u80fd\u3002</p> <p>\u5b9a\u65f6\u5668\u80fd\u505a\u4ec0\u4e48</p> <ul> <li> <p>\u6267\u884c\u5b9a\u65f6\u4efb\u52a1\uff1a\u5b9a\u65f6\u5668\u5e38\u7528\u4e8e\u5468\u671f\u6027\u6267\u884c\u7279\u5b9a\u4efb\u52a1\u3002\u4f8b\u5982\uff0c\u82e5\u9700\u8981\u6bcf 500 \u6beb\u79d2\u6267\u884c\u67d0\u9879\u4efb\u52a1\uff0c\u5b9a\u65f6\u5668\u80fd\u591f\u7cbe\u51c6\u5730\u6ee1\u8db3\u8fd9\u4e00\u9700\u6c42\u3002</p> </li> <li> <p>\u65f6\u95f4\u6d4b\u91cf\uff1a\u5b9a\u65f6\u5668\u80fd\u591f\u7cbe\u786e\u6d4b\u91cf\u65f6\u95f4\uff0c\u65e0\u8bba\u662f\u4ee3\u7801\u6bb5\u7684\u6267\u884c\u65f6\u95f4\u8fd8\u662f\u4e8b\u4ef6\u53d1\u751f\u7684\u95f4\u9694\u65f6\u95f4\uff0c\u90fd\u80fd\u901a\u8fc7\u5b9a\u65f6\u5668\u8fdb\u884c\u51c6\u786e\u7684\u8ba1\u91cf\u3002</p> </li> <li> <p>\u7cbe\u786e\u5ef6\u65f6\uff1a\u5bf9\u4e8e\u9700\u8981\u5fae\u79d2\u7ea7\u7cbe\u5ea6\u7684\u5ef6\u65f6\u573a\u666f\uff0c\u5b9a\u65f6\u5668\u80fd\u591f\u63d0\u4f9b\u53ef\u9760\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u786e\u4fdd\u5ef6\u65f6\u7684\u7cbe\u786e\u6027\u3002</p> </li> <li> <p>PWN\u4fe1\u53f7\u751f\u6210\uff1a\u901a\u8fc7\u5b9a\u65f6\u5668\u7684\u7cbe\u786e\u63a7\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u751f\u6210PWM\uff08\u8109\u5bbd\u8c03\u5236\uff09\u4fe1\u53f7\uff0c\u8fd9\u5bf9\u4e8e\u9a71\u52a8\u7535\u673a\u3001\u8c03\u8282 LED \u4eae\u5ea6\u7b49\u5e94\u7528\u81f3\u5173\u91cd\u8981\u3002</p> </li> <li> <p>\u4e8b\u4ef6\u89e6\u53d1\u4e0e\u76d1\u63a7\uff1a\u5b9a\u65f6\u5668\u4e0d\u4ec5\u7528\u4e8e\u89e6\u53d1\u4e2d\u65ad\uff0c\u5b9e\u73b0\u4e8b\u4ef6\u9a71\u52a8\u7684\u903b\u8f91\uff0c\u8fd8\u53ef\u7528\u4e8e\u5b9e\u73b0\u770b\u95e8\u72d7\u529f\u80fd\uff0c\u76d1\u63a7\u7cfb\u7edf\u72b6\u6001\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u8fdb\u884c\u590d\u4f4d\u64cd\u4f5c\uff0c\u786e\u4fdd\u7cfb\u7edf\u7684\u7a33\u5b9a\u8fd0\u884c\u3002</p> </li> </ul> <p>\u5b9a\u65f6\u5668\u7c7b\u578b</p> <p>\u5b9a\u65f6\u5668\u65e2\u53ef\u901a\u8fc7\u786c\u4ef6\u5b9e\u73b0\uff0c\u4e5f\u53ef\u57fa\u4e8e\u8f6f\u4ef6\u8fdb\u884c\u8bbe\u8ba1\uff0c\u4e8c\u8005\u5404\u5177\u7279\u8272\uff0c\u9002\u7528\u4e8e\u4e0d\u540c\u573a\u666f\uff1a \u786c\u4ef6\u5b9a\u65f6\u5668\uff0c\u4f9d\u6258\u5fae\u63a7\u5236\u5668\u7684\u5185\u7f6e\u786c\u4ef6\u673a\u5236\uff0c\u901a\u8fc7\u4e13\u95e8\u7684\u8ba1\u65f6/\u8ba1\u6570\u5668\u7535\u8def\u8fbe\u6210\u5b9a\u65f6\u529f\u80fd\u3002\u5176\u663e\u8457\u4f18\u52bf\u5728\u4e8e\u9ad8\u7cbe\u5ea6\u4e0e\u9ad8\u53ef\u9760\u6027\uff0c\u8fd9\u662f\u56e0\u4e3a\u786c\u4ef6\u5b9a\u65f6\u5668\u7684\u5de5\u4f5c\u72ec\u7acb\u4e8e\u8f6f\u4ef6\u4efb\u52a1\u548c\u64cd\u4f5c\u7cfb\u7edf\u8c03\u5ea6\uff0c\u6545\u800c\u4e0d\u53d7\u5b83\u4eec\u7684\u5f71\u54cd\u3002\u5728\u8ffd\u6c42\u6781\u9ad8\u5b9a\u65f6\u7cbe\u786e\u5ea6\u7684\u573a\u5408\uff0c\u5982\u751f\u6210 PWM \u4fe1\u53f7\u6216\u8fdb\u884c\u7cbe\u786e\u65f6\u95f4\u6d4b\u91cf\u65f6\uff0c\u786c\u4ef6\u5b9a\u65f6\u5668\u65e0\u7591\u662f\u6700\u4f73\u9009\u62e9\u3002\u5176\u5de5\u4f5c\u539f\u7406\u786e\u4fdd\u5373\u4fbf\u4e3b CPU \u5fd9\u4e8e\u5176\u4ed6\u4efb\u52a1\uff0c\u5b9a\u65f6\u5668\u4e5f\u80fd\u5728\u9884\u8bbe\u65f6\u95f4\u51c6\u786e\u89e6\u53d1\u76f8\u5e94\u64cd\u4f5c\u3002 \u800c\u8f6f\u4ef6\u5b9a\u65f6\u5668\uff0c\u5219\u662f\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u6216\u8f6f\u4ef6\u5e93\u6a21\u62df\u5b9e\u73b0\u7684\u5b9a\u65f6\u529f\u80fd\u3002\u8fd9\u7c7b\u5b9a\u65f6\u5668\u7684\u6027\u80fd\u53d7\u7cfb\u7edf\u5f53\u524d\u8d1f\u8f7d\u548c\u4efb\u52a1\u8c03\u5ea6\u7b56\u7565\u5236\u7ea6\uff0c\u56e0\u6b64\u5728\u7cbe\u5ea6\u4e0a\u8f83\u786c\u4ef6\u5b9a\u65f6\u5668\u7a0d\u900a\u4e00\u7b79\u3002\u7136\u800c\uff0c\u8f6f\u4ef6\u5b9a\u65f6\u5668\u5728\u7075\u6d3b\u6027\u65b9\u9762\u66f4\u80dc\u4e00\u7b79\uff0c\u5141\u8bb8\u521b\u5efa\u5927\u91cf\u5b9a\u65f6\u5668\uff0c\u9002\u7528\u4e8e\u5bf9\u65f6\u95f4\u63a7\u5236\u8981\u6c42\u4e0d\u90a3\u4e48\u4e25\u683c\u7684\u573a\u666f\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8f6f\u4ef6\u5b9a\u65f6\u5668\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u9762\u4e34\u5b9a\u65f6\u7cbe\u5ea6\u95ee\u9898\uff0c\u7279\u522b\u662f\u5728\u7cfb\u7edf\u8d1f\u8f7d\u8f83\u91cd\u6216\u5b58\u5728\u4f17\u591a\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u65f6\u3002\u4e0d\u8fc7\uff0c\u5bf9\u4e8e\u7b80\u5355\u7684\u975e\u9ad8\u7cbe\u5ea6\u5ef6\u65f6\u9700\u6c42\uff0c\u8f6f\u4ef6\u5b9a\u65f6\u5668\u901a\u5e38\u5df2\u7ecf\u8db3\u591f\u5e94\u5bf9\u3002</p>"},{"location":"zh/MAIN-CONTROL/TIMER/timer/#esp32-s3","title":"ESP32-S3 \u5b9a\u65f6\u5668\u6574\u4f53\u6846\u67b6","text":"<p>\u7cfb\u7edf\u5b9a\u65f6\u5668\u5185\u7f6e\u4e24\u4e2a\u8ba1\u6570\u5668 UNIT0 \u548c UNIT1(\u5982\u56fe\u6240\u793a)\u4ee5\u53ca\u4e09\u4e2a\u6bd4\u8f83\u5668 COMP0\u3001COMP1\u3001COMP2(\u5982\u56fe\u6240\u793a)\u3002\u6bd4\u8f83\u5668\u7528\u4e8e\u76d1\u63a7\u8ba1\u6570\u5668\u7684\u8ba1\u6570\u503c\u662f\u5426\u8fbe\u5230\u62a5\u8b66\u503c\u3002</p> <p>(1) \u8ba1\u6570\u5668</p> <p>UNIT0\u3001UNIT1 \u5747\u4e3a ESP32-S3 \u7cfb\u7edf\u5b9a\u65f6\u5668\u5185\u7f6e\u7684 52 \u4f4d\u8ba1\u6570\u5668\u3002\u8ba1\u6570\u5668\u4f7f\u7528 XTAL_CLK \u4f5c\u4e3a\u65f6\u949f\u6e90(40MHz)\u3002XTAL_CLK \u7ecf\u5206\u9891\u540e\uff0c\u5728\u4e00\u4e2a\u8ba1\u6570\u5468\u671f\u751f\u6210\u9891\u7387\u4e3a fXTAL_CLK/3 \u7684\u65f6\u949f\u4fe1\u53f7\uff0c\u7136\u540e\u5728\u53e6\u4e00\u4e2a\u8ba1\u6570\u5468\u671f\u751f\u6210\u9891\u7387\u4e3a fXTAL_CLK/2 \u7684\u65f6\u949f\u4fe1\u53f7\u3002\u56e0\u6b64\uff0c\u8ba1\u6570\u5668\u4f7f\u7528\u7684\u65f6\u949fCNT_CLK\uff0c\u5176\u5b9e\u9645\u5e73\u5747\u9891\u7387\u4e3a fXTAL_CLK/2.5\uff0c\u5373 16MHz\uff0c\u89c1\u56fe 14.1.2\u3002\u6bcf\u4e2a CNT_CLK \u65f6\u949f\u5468\u671f\uff0c\u8ba1\u6570\u9012\u589e 1/16\u00b5s\uff0c\u5373 16 \u4e2a\u5468\u671f\u9012\u589e 1\u00b5s\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u5bc4\u5b58\u5668 SYSTIMER_CONF_REG \u4e2d\u4e0b\u9762\u4e09\u4e2a\u4f4d\u6765\u63a7\u5236\u8ba1\u6570\u5668 UNITn\uff0c\u8fd9\u4e09\u4e2a\u4f4d\u5206\u522b\u662f\uff1a \u2460\uff1aSYSTIMER_TIMER_UNITn_WORK_EN \u2461\uff1aSYSTIMER_TIMER_UNITn_CORE0_STALL_EN \u2462\uff1aSYSTIMER_TIMER_UNITn_CORE1_STALL_EN \u5173\u4e8e\u8fd9\u4e09\u4f4d\u7684\u914d\u7f6e\u8bf7\u53c2\u8003\u300aesp32-s3_technical_reference_manual_cn\u300b</p> <p>(2) \u6bd4\u8f83\u5668</p> <p>COMP0\u3001COMP1\u3001COMP2 \u5747\u4e3a ESP32-S3 \u7cfb\u7edf\u5b9a\u65f6\u5668\u5185\u7f6e\u7684 52 \u4f4d\u6bd4\u8f83\u5668\u3002\u6bd4\u8f83\u5668\u540c\u6837\u4f7f\u7528 XTAL_CLK \u4f5c\u4e3a\u65f6\u949f\u6e90(40MHz)\u3002</p> <p></p> <p>\u4e0a\u56fe\u5c55\u793a\u4e86\u7cfb\u7edf\u5b9a\u65f6\u5668\u751f\u6210\u62a5\u8b66\u7684\u8fc7\u7a0b\u3002\u5728\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\u7528\u5230\u4e00\u4e2a\u8ba1\u6570\u5668(Timer Countern)\u548c\u4e00\u4e2a\u6bd4\u8f83\u5668(Timer Comparatorx)\uff0c\u6bd4\u8f83\u5668\u5c06\u6839\u636e\u6bd4\u8f83\u7ed3\u679c\uff0c\u751f\u6210\u62a5\u8b66\u4e2d\u65ad\u3002</p>"},{"location":"zh/MAIN-CONTROL/TIMER/timer/#_3","title":"\u7528\u4f8b","text":"<p>\u6211\u4eec\u6765\u8bbe\u8ba1\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u8fd0\u884c\u540e\u914d\u7f6e\u9ad8\u5206\u8fa8\u7387\u5b9a\u65f6\u5668\uff0c\u5e76\u5f00\u542f\u4e2d\u65ad\uff0c\u5728\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u4e2d\u7ffb\u8f6cLED \u7684\u72b6\u6001\u3002\u7531\u4e8e\u4f7f\u7528\u7684\u90fd\u662f\u677f\u4e0a\u8d44\u6e90\uff0c\u6ca1\u6709\u8fde\u7ebf\u3002</p>"},{"location":"zh/MAIN-CONTROL/TIMER/timer/#_4","title":"\u4ee3\u7801","text":""},{"location":"zh/MAIN-CONTROL/TIMER/timer/#timc","title":"tim.c","text":"<pre><code>/**\n * @file tim.c\n * @author SHUAIWEN CUI (SHUAIWEN001@e.ntu.edu.sg)\n * @brief This file contains the implementation of the TIM component.\n * @version 1.0\n * @date 2024-11-18\n * \n * @copyright Copyright (c) 2024\n * \n */\n\n#include \"esptim.h\"\n\n/**\n * @brief       Initialize a high-precision timer (ESP_TIMER)\n * @param       tps: Timer period in microseconds (\u03bcs). For example, to execute the timer interrupt once every second, \n *                   set tps = 1s = 1000000\u03bcs.\n * @retval      None\n */\nvoid esptim_int_init(uint64_t tps)\n{\n    esp_timer_handle_t esp_tim_handle;                      /* Timer callback function handle */\n\n    /* Define a timer configuration structure */\n    esp_timer_create_args_t tim_periodic_arg = {\n        .callback = &amp;esptim_callback,                       /* Set the callback function */\n        .arg = NULL,                                        /* No arguments passed */\n    };\n\n    esp_timer_create(&amp;tim_periodic_arg, &amp;esp_tim_handle);   /* Create a timer event */\n    esp_timer_start_periodic(esp_tim_handle, tps);          /* Trigger periodically based on the timer period */\n}\n\n/**\n * @brief       Timer callback function\n * @param       arg: No arguments passed\n * @retval      None\n */\nvoid esptim_callback(void *arg)\n{\n    led_toggle();\n}\n</code></pre> <p>Warning</p> <p>\u4e00\u5b9a\u8981\u8bb0\u5f97\u5728CMakelists.txt\u4e2d\u6dfb\u52a0tim.h\uff0ctim.c\u6240\u5728\u8def\u5f84\uff0c\u540c\u65f6\u5728\u4f9d\u8d56\u4e2d\u6dfb\u52a0esp_timer\u5e93\u3002</p>"},{"location":"zh/MAIN-CONTROL/TIMER/timer/#_5","title":"\u603b\u7ed3","text":"<p>Note</p> <p>\u672c\u7ae0\u4ecb\u7ecd\u4e86 ESP32 \u5b9a\u65f6\u5668\u7684\u4f7f\u7528\uff0c\u901a\u8fc7\u8bbe\u8ba1\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5b9e\u73b0\u4e86\u9ad8\u5206\u8fa8\u7387\u5b9a\u65f6\u5668\u7684\u914d\u7f6e\uff0c\u5e76\u5f00\u542f\u4e2d\u65ad\uff0c\u5728\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u4e2d\u7ffb\u8f6c LED \u7684\u72b6\u6001\u3002\u6bd4\u8f83\u5173\u952e\u7684\u51e0\u4e2a\u70b9\uff1a</p> <ul> <li> <p>\u5982\u4f55\u5c06\u5b9a\u65f6\u5668\u6587\u4ef6\u6dfb\u52a0\u5230\u9879\u76ee\u4e2d\uff0c\u6e90\u6587\u4ef6\uff0c\u5934\u6587\u4ef6\uff0c\u8def\u5f84\u4f9d\u8d56\u7b49\u3002</p> </li> <li> <p>\u5982\u4f55\u6784\u9020\u5b9a\u65f6\u5668\u7684\u521d\u59cb\u5316\u51fd\u6570\u3002</p> </li> <li> <p>\u5982\u4f55\u6784\u9020\u5b9a\u65f6\u5668\u7684\u56de\u8c03\u51fd\u6570\u3002</p> </li> <li> <p>\u5982\u4f55\u5728\u5e94\u7528\u5c42\u8c03\u7528\u5b9a\u65f6\u5668\u521d\u59cb\u5316\u51fd\u6570\u3002</p> </li> </ul>"},{"location":"zh/MATH-DSP-AI/math-dsp-ai/","title":"\u6570\u5b66 \u6570\u5b57\u4fe1\u53f7\u5904\u7406 \u4eba\u5de5\u667a\u80fd","text":"<ul> <li> <p> ESP-DSP</p> <p>  \u5728\u7ebf\u6587\u6863 </p> </li> <li> <p> ESP-DL</p> <p>  Online Doc </p> </li> </ul>"},{"location":"zh/PERCEPTION/BUILT-IN-THERMOMETER/built-in-thermometer/","title":"ESP32 \u5185\u7f6e\u6e29\u5ea6\u4f20\u611f\u5668","text":""},{"location":"zh/PERCEPTION/BUILT-IN-THERMOMETER/built-in-thermometer/#_1","title":"\u4ecb\u7ecd","text":"<p>Info</p> <p>ESP32\u82af\u7247\u5185\u7f6e\u4e86\u4e00\u4e2a\u6e29\u5ea6\u4f20\u611f\u5668\uff0c\u53ef\u4ee5\u7528\u6765\u6d4b\u91cf\u82af\u7247\u7684\u6e29\u5ea6\u3002</p>"},{"location":"zh/PERCEPTION/BUILT-IN-THERMOMETER/built-in-thermometer/#_2","title":"\u7528\u4f8b","text":"<p>\u6d4b\u91cfESP32\u82af\u7247\u5185\u90e8\u6e29\u5ea6\uff0c\u5728LCD\u4e0a\u663e\u793a\u3002</p>"},{"location":"zh/PERCEPTION/BUILT-IN-THERMOMETER/built-in-thermometer/#_3","title":"\u6d89\u53ca\u8d44\u6e90","text":"<ul> <li>ESP32\u5185\u7f6e\u6e29\u5ea6\u4f20\u611f\u5668</li> <li>0.96\u5bf8LCD</li> <li>LED \uff08\u53ef\u9009\uff09</li> </ul>"},{"location":"zh/PERCEPTION/BUILT-IN-THERMOMETER/built-in-thermometer/#_4","title":"\u4ee3\u7801","text":""},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/","title":"\u675c\u82e5\u752b\u7cfb\u5217","text":"<ul> <li> <p> DURUOFU ESP32-GUIDE \ud83c\udfaf\ud83c\udfc6</p> <p>  \u65b0\u7248 </p> <p>  \u65e7\u7248 </p> </li> </ul>"},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/#_2","title":"\u6559\u7a0b\u8fdb\u5ea6","text":""},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/#c0","title":"C0 \u5e38\u89c1\u95ee\u9898","text":"<ul> <li> 0.1 \u5e38\u89c1\u95ee\u9898</li> </ul>"},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/#c1-esp32","title":"C1 \u4e86\u89e3 ESP32","text":"<ul> <li> 1.1 ESP32 \u7b80\u4ecb</li> <li> 1.2 ESP32 \u5f00\u53d1\u73af\u5883</li> <li> 1.3 ESP32 idf.py \u57fa\u672c\u547d\u4ee4</li> </ul>"},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/#c2-esp32-idf","title":"C2 ESP32-IDF \u57fa\u7840","text":"<ul> <li> 2.1 ESP32-IDF \u9879\u76ee\u7ed3\u6784</li> <li> 2.2 ESP32-IDF \u9879\u76ee\u914d\u7f6e</li> <li> 2.3 ESP32-IDF \u81ea\u5b9a\u4e49\u7ec4\u4ef6</li> <li> 2.4 ESP32-IDF \u7ec4\u4ef6\u6ce8\u518c\u8868</li> </ul>"},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/#c3-freertos","title":"C3 FreeRTOS \u57fa\u7840","text":"<ul> <li> 3.1 FreeRTOS \u7b80\u4ecb</li> <li> 3.2 FreeRTOS \u591a\u4efb\u52a1\u548c\u4efb\u52a1\u7ba1\u7406</li> <li> 3.3 FreeRTOS \u4efb\u52a1\u770b\u95e8\u72d7</li> </ul>"},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/#c4-esp32-idf","title":"C4 ESP32-IDF \u5916\u8bbe","text":""},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/#41","title":"4.1 \u57fa\u7840\u5916\u8bbe","text":"<ul> <li> 4.1.1 GPIO</li> <li> 4.1.2 UART</li> <li> 4.1.3 TIMER</li> <li> 4.1.4 ADC</li> <li> 4.1.5 DAC</li> <li> 4.1.6 LED_PWM</li> <li> 4.1.7 I2C</li> <li> 4.1.8 SPI</li> <li> 4.1.9 I2S</li> </ul>"},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/#42","title":"4.2 \u5b58\u50a8\u5916\u8bbe","text":"<ul> <li> 4.2.1 \u5206\u533a\u8868</li> <li> 4.2.2 \u975e\u6613\u5931\u6027\u5b58\u50a8</li> <li> 4.2.3 FATFS</li> <li> 4.2.4 SPIFFS</li> <li> 4.2.5 SD \u5361</li> </ul>"},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/#c5-freertos","title":"C5 FreeRTOS \u9ad8\u7ea7","text":"<ul> <li> 5.1 FreeRTOS \u961f\u5217</li> <li> 5.2 FreeRTOS \u4fe1\u53f7\u91cf</li> <li> 5.3 FreeRTOS \u4e92\u65a5\u91cf</li> <li> 5.4 FreeRTOS \u4e8b\u4ef6\u7ec4</li> <li> 5.5 FreeRTOS \u8f6f\u4ef6\u5b9a\u65f6\u5668</li> </ul>"},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/#c6-wifi","title":"C6 WIFI","text":"<ul> <li> 6.1 WIFI \u529f\u80fd\u5165\u95e8<ul> <li> Wifi\u6a21\u5f0f\u4e0e\u4ecb\u7ecd</li> <li> Wi-Fi\u7684STA\u4e0eAP\u914d\u7f6e</li> </ul> </li> <li> 6.2 \u7f51\u7edc\u534f\u8bae\u5e94\u7528<ul> <li> TCP </li> <li> UDP </li> <li> HTTP </li> <li> WEBSOCKET </li> <li> MQTT </li> <li> ESP-NOW</li> </ul> </li> </ul>"},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/#c7-ble","title":"C7 BLE","text":"<ul> <li> 7.1 BLE \u529f\u80fd\u57fa\u7840</li> <li> 7.2 BLE \u5f00\u53d1\u73af\u5883</li> <li> 7.3 BLE \u7ecf\u5178\u84dd\u7259\u5f00\u53d1</li> </ul>"},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/#c8","title":"C8 \u56fe\u5f62\u754c\u9762\u5f00\u53d1","text":"<ul> <li> 8.1 LVGL\u57fa\u7840</li> <li> 8.2 \u5e38\u7528\u7ec4\u4ef6\u4e0e\u5e03\u5c40</li> <li> 8.3 \u56fe\u5f62\u754c\u9762\u9879\u76ee\u5f00\u53d1</li> </ul>"},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/#c9","title":"C9 \u5176\u4ed6\u5b9e\u7528\u5185\u5bb9","text":"<ul> <li> 9.1 WIFI\u914d\u7f51\u6280\u672f</li> <li> 9.2 Web\u670d\u52a1\u7a0b\u5e8f</li> <li> 9.3 OTA\u5347\u7ea7\u6280\u672f</li> </ul>"},{"location":"zh/TUTORIAL_STUDY/DURUOFU/duruofu/#c10","title":"C10 \u9879\u76ee\u5b9e\u6218","text":""},{"location":"zh/TUTORIAL_STUDY/LICHUANG/lichuang/","title":"\u7acb\u521bEDA ESP32S3+ESP-IDF\u5f00\u53d1\u5e94\u7528\u8be6\u7ec6\u6559\u7a0b","text":"<ul> <li> <p> \u3010\u7acb\u521b\u5b9e\u6218\u6d3eESP32-S3\uff0c\u5634\u5bf9\u5634\u5e26\u4f60\u4ece\u5165\u95e8\u5230\u9879\u76ee\u5b9e\u6218\uff0110\u5e74\u5d4c\u5165\u5f0f\u5de5\u7a0b\u5e08\u503e\u56ca\u76f8\u6388 \ud83c\udfaf\ud83c\udfc6</p> <p>  Portal </p> </li> </ul>"},{"location":"zh/TUTORIAL_STUDY/MORNINGCORE/morningcore/","title":"\u5bb8\u82af\u7269\u8054\u6559\u7a0b\u7cfb\u5217","text":""},{"location":"zh/TUTORIAL_STUDY/MORNINGCORE/morningcore/#_2","title":"\u6559\u7a0b\u94fe\u63a5","text":"<p>Note</p> <p>\u8be5\u6559\u7a0b\u7cfb\u5217\u662f\u5bb8\u82af\u7269\u8054ESP32\u7cfb\u5217\u5f00\u53d1\u677f\u7684\u4f7f\u7528\u6559\u7a0b\uff0c\u4e3b\u8981\u9762\u5411\u521d\u5b66\u8005\uff0c\u5e2e\u52a9\u521d\u5b66\u8005\u5feb\u901f\u4e0a\u624b\u5bb8\u82af\u7269\u8054ESP32\u7cfb\u5217\u5f00\u53d1\u677f\u3002\u76f8\u5173\u6559\u7a0b\u89c6\u9891\u548c\u4f8b\u7a0b\u4ed3\u5e93\u5982\u4e0b\uff1a</p> <ul> <li> <p> \u3010ESP32S3+ESP-IDF\u5f00\u53d1\u5e94\u7528\u8be6\u7ec6\u6559\u7a0b \ud83c\udfaf\ud83c\udfc6</p> <p>  \u6587\u6863 </p> <p>  \u89c6\u9891 </p> </li> <li> <p> esp32-board</p> <p>\u4f8b\u7a0b\u4ed3\u5e93</p> <p>  esp32 </p> <p>  esp32s3 </p> </li> </ul>"},{"location":"zh/TUTORIAL_STUDY/MORNINGCORE/morningcore/#_3","title":"\u8fdb\u5ea6","text":"<ul> <li> 1.0 ESP-IDF\u6559\u7a0b\u89c6\u9891\u548c\u5957\u4ef6\u4ecb\u7ecd</li> <li> 1.1 \u3010\u57fa\u7840\u7bc7\u3011\u5f00\u53d1\u73af\u5883\u642d\u5efa</li> <li> 1.2 \u3010\u57fa\u7840\u7bc7\u3011\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u7684\u7f16\u5199\u3001\u7f16\u8bd1\u3001\u70e7\u5f55\u548c\u8fd0\u884c</li> <li> 1.3 \u3010\u57fa\u7840\u7bc7\u3011\u5de5\u7a0b\u76ee\u5f55\u5206\u6790</li> <li> 1.4 \u3010\u57fa\u7840\u7bc7\u3011\u5b58\u50a8\u5206\u5e03\u5206\u6790</li> <li> 1.5 \u3010\u57fa\u7840\u7bc7\u3011\u7a0b\u5e8f\u5206\u533a\u8868\u548c\u542f\u52a8\u4ecb\u7ecd</li> <li> 1.6 \u3010\u57fa\u7840\u7bc7\u3011C\u8bed\u8a00\u77e5\u8bc6\u56de\u987e</li> <li> 1.7 \u3010\u57fa\u7840\u7bc7\u3011\u7ec4\u4ef6\u548c\u7ec4\u4ef6\u7ba1\u7406\u5668</li> <li> 2.0 \u3010\u5916\u8bbe\u7bc7\u3011\u70b9\u4eae\u4e00\u4e2aLED</li> <li> 2.1 \u3010\u5916\u8bbe\u7bc7\u3011I2C\u9a71\u52a8\u7f16\u5199</li> <li> 2.2 \u3010\u5916\u8bbe\u7bc7\u3011XL9555\u9a71\u52a8</li> <li> 2.3 \u3010\u5916\u8bbe\u7bc7\u3011\u6309\u952e\u903b\u8f91\u8bbe\u8ba1</li> <li> 2.4 \u3010\u5916\u8bbe\u7bc7\u3011\u6309\u952e\u903b\u8f91\u5b9e\u73b0</li> </ul>"},{"location":"zh/TUTORIAL_STUDY/MORNINGCORE/01-helloworld/helloworld/#_1","title":"\u51c6\u5907\u9879\u76ee","text":"<p>\u590d\u5236\u6a21\u677f\u9879\u76ee\u5230\u5de5\u4f5c\u76ee\u5f55</p>"},{"location":"zh/TUTORIAL_STUDY/MORNINGCORE/01-helloworld/helloworld/#_2","title":"\u66ff\u6362\u4ee3\u7801","text":"<p>\u5c06main.c\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>#include &lt;stdio.h&gt;                     // Standard input-output library for basic I/O operations\n#include \"freertos/FreeRTOS.h\"         // FreeRTOS core library, providing real-time operating system features\n#include \"freertos/task.h\"             // FreeRTOS task management library, includes functions for creating, deleting, and delaying tasks\n#include \"esp_log.h\"                   // ESP32 logging library for debugging and information output\n\n// Define a log tag to identify the module where the log is coming from\nstatic const char* TAG = \"main\";\n\n// Main function, the entry point of the ESP32 program\nvoid app_main(void)\n{\n    // Infinite loop, the code inside the loop will be repeatedly executed\n    while(1)\n    {\n        // Log an informational message with the \"Hello world!\" string\n        // TAG identifies the log's source module, here it is \"main\"\n        ESP_LOGI(TAG,\"Hello world!\");\n\n        // Delay the task for 1 second before repeating the loop\n        // vTaskDelay pauses the task for the specified time, where pdMS_TO_TICKS(1000) converts 1000 milliseconds (1 second) to FreeRTOS ticks\n        vTaskDelay(pdMS_TO_TICKS(1000));\n    }\n}\n</code></pre>"},{"location":"zh/TUTORIAL_STUDY/MORNINGCORE/01-helloworld/helloworld/#_3","title":"\u7f16\u8bd1\uff0c\u70e7\u5f55\uff0c\u76d1\u6d4b","text":"<p>\u5728\u4e32\u53e3\u76d1\u89c6\u5668\u4e2d\uff0c\u60a8\u5c06\u770b\u5230\u6bcf\u79d2\u6253\u5370\u4e00\u6b21\u201cHello world!\u201d\u3002</p>"}]}