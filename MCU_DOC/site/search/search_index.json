{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ESP32 STUDY","text":"<p>This project is for ESP32 study and practice</p> <p></p>"},{"location":"CHEATING_SHEET/cheating_sheet/","title":"CHEATING SHEET FOR ESP-IDF PROGRAMMING","text":"<p>Note</p> <p>This module serves as a quick reference for commonly used modules, functions, and features in ESP-IDF programming.</p>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/","title":"FREERTOS","text":""},{"location":"CHEATING_SHEET/FREERTOS/freertos/#task-creation","title":"TASK CREATION","text":""},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xtaskcreatepinnedtocore","title":"xTaskCreatePinnedToCore","text":"<p>Function prototype</p> <pre><code>BaseType_t xTaskCreatePinnedToCore(TaskFunction_t pxTaskCode, // Task function pointer\nconst char * const pcName, // Task name\nconst uint32_t usStackDepth, // Task stack size\nvoid * const pvParameters, // Task parameters\nUBaseType_t uxPriority, // Task priority\nTaskHandle_t * const pxCreatedTask, // Task handle\nconst BaseType_t xCoreID); // Core ID\n</code></pre> <p>Function introduction</p> <p>In ESP-IDF (ESP32 Development Framework), <code>xTaskCreatePinnedToCore</code> is a function used to create a task and pin it to a specified CPU core. ESP32 is a dual-core microcontroller (ESP32-S series is single-core) with two processing cores: Core 0 and Core 1. This function helps developers pin tasks to specific cores for better CPU load management and real-time performance management.</p> <p>Parameters</p> <ul> <li><code>pxTaskCode</code>: Task function pointer. It points to the function to be executed in the new task, which is usually defined in the format of <code>void function_name(void *pvParameters)</code>, where <code>pvParameters</code> are the parameters passed to the task.</li> <li><code>pcName</code>: The name string of the task, usually used for debugging and monitoring. You can use a string name that is easy to identify.</li> <li><code>usStackDepth</code>: The size of the task stack in words (4 bytes). The stack size should be set according to the stack space required in the task.</li> <li><code>pvParameters</code>: The parameter pointer passed to the task function. If the task function does not require parameters, it can be set to <code>NULL</code>.</li> <li><code>uxPriority</code>: The priority of the task. The larger the value, the higher the priority. The range of priority that can be set in ESP-IDF is 0 to 24.</li> <li><code>pxCreatedTask</code>: The pointer to the task handle, used to receive the handle of the created task. If a task handle is not needed, it can be set to <code>NULL</code>.</li> <li><code>xCoreID</code>: <code>0</code>: bound to core 0 (primary core). <code>1</code>: bound to core 1. <code>tskNO_AFFINITY</code>: not bound to a specific core, allowing FreeRTOS to schedule the task on any core.</li> </ul> <p>Return Value</p> <ul> <li><code>pdPASS</code>: Task creation was successful.</li> <li><code>pdFAIL</code>: Task creation failed.</li> </ul> <p>Example</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// Define task function\nvoid myTask(void *pvParameters)\n{\nwhile(1)\n{\nprintf(\"Hello from myTask on Core 0\\n\");\nvTaskDelay(pdMS_TO_TICKS(1000)); // Delay 1 second\n}\n}\n\nvoid app_main(void)\n{\n// Create a task and pin it to core 0\nxTaskCreatePinnedToCore(\nmyTask, // Task function\n\"MyTask\", // Task name\n2048, // Task stack size\nNULL, // Task parameters\n5, // Task priority\nNULL, // Task handle\n0 // Core ID (0 means bound to core 0)\n);\n}\n</code></pre>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xtaskcreatestaticpinnedtocore","title":"xTaskCreateStaticPinnedToCore","text":"<p>Function prototype</p> <pre><code>TaskHandle_t xTaskCreateStaticPinnedToCore(TaskFunction_t pxTaskCode, // Task function pointer\nconst char * const pcName, // Task name\nconst uint32_t ulStackDepth, // Task stack size\nvoid * const pvParameters, // Task parameters\nUBaseType_t uxPriority, // Task priority\nStackType_t * const puxStackBuffer, // Points to the available memory area of \u200b\u200bthe stack space\nStaticTask_t * const pxTaskBuffer, // Points to the available memory area of \u200b\u200bthe task description\nconst BaseType_t xCoreID); // Core ID\n</code></pre> <p>Function introduction</p> <p><code>xTaskCreateStaticPinnedToCore</code> is a function used to create a task and pin the task to a specified CPU core. Unlike <code>xTaskCreatePinnedToCore</code>, <code>xTaskCreateStaticPinnedToCore</code> allows the user to provide the task's stack space and the memory area of \u200b\u200bthe task descriptor. This allows for better control over the memory allocation and management of the task.</p> <p>Parameters</p> <ul> <li><code>pxTaskCode</code>: Task function pointer. It points to the function to be executed in the new task, which is usually defined in the format of <code>void function_name(void *pvParameters)</code>, where <code>pvParameters</code> are the parameters passed to the task.</li> <li><code>pcName</code>: The name string of the task, usually used for debugging and monitoring. You can use a string name that is easy to identify.</li> <li><code>ulStackDepth</code>: The size of the task stack, in words (4 bytes). The stack size should be set according to the stack space required in the task.</li> <li><code>pvParameters</code>: The parameter pointer passed to the task function. If the task function does not require parameters, it can be set to <code>NULL</code>.</li> <li><code>uxPriority</code>: The priority of the task. The larger the value, the higher the priority. The priority in ESP-IDF can be set in the range of 0 to 24.</li> <li><code>puxStackBuffer</code>: Pointer to the statically allocated task stack. The stack memory needs to be allocated in advance and passed to the function. The task will use this memory instead of dynamically allocated stack space.</li> <li><code>pxTaskBuffer</code>: Pointer to the static task control block. The control block is used by FreeRTOS to manage task information (such as status, priority, stack pointer, etc.). This control block also needs to be allocated in advance.</li> <li><code>xCoreID</code>: <code>0</code>: Bound to core 0 (primary core). <code>1</code>: Bound to core 1. <code>tskNO_AFFINITY</code>: Not bound to a specific core, allowing FreeRTOS to schedule tasks on any core.</li> </ul> <p>Return value</p> <ul> <li><code>pdPASS</code>: Task creation is successful.</li> <li><code>pdFAIL</code>: Task creation failed.</li> </ul> <p>Example</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// Define static memory for task stack and task control block\nstatic StackType_t myTaskStack[2048]; // Task stack size is 2048 bytes\nstatic StaticTask_t myTaskBuffer; // Task control block\n\n// Define task function\nvoid myTask(void *pvParameters)\n{\nwhile(1)\n{\nprintf(\"Running myTask on Core 1\\n\");\nvTaskDelay(pdMS_TO_TICKS(1000)); // Delay 1 second\n}\n}\n\nvoid app_main(void)\n{\n// Create a task using static memory and bind it to core 0\nxTaskCreateStaticPinnedToCore(\nmyTask, // Task function\n\"MyStaticTask\", // Task name\n2048, // Task stack size\nNULL, // Task parameters\n5, // Task priority\nmyTaskStack, // Static stack memory\n&amp;myTaskBuffer, // Static task control block\n0 // Core ID (0 means bound to core 0)\n);\n}\n</code></pre>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#delay-and-blocking","title":"DELAY AND BLOCKING","text":""},{"location":"CHEATING_SHEET/FREERTOS/freertos/#vtaskdelay","title":"vTaskDelay","text":"<p>Function prototype</p> <pre><code>void vTaskDelay(const TickType_t xTicksToDelay);\n</code></pre> <p>Function introduction</p> <p><code>vTaskDelay</code> is a function used to delay task execution. After calling the <code>vTaskDelay</code> function in a task, the task will pause for the specified time and then continue to execute.</p> <p>Parameters</p> <ul> <li><code>xTicksToDelay</code>: Delay time, in FreeRTOS clock ticks. The frequency of the clock tick is defined by the <code>configTICK_RATE_HZ</code> macro in <code>FreeRTOSConfig.h</code>.</li> </ul> <p>Example</p> <pre><code>void myTask(void *pvParameters)\n{\nwhile(1)\n{\nprintf(\"Hello from myTask\\n\");\nvTaskDelay(pdMS_TO_TICKS(1000)); // Delay 1 second\n}\n}\n</code></pre> <p>Summary <code>vTaskDelay</code></p> <ul> <li>Function: <code>vTaskDelay</code> delays a task for a specified time, starting from the current time. This means that each time <code>vTaskDelay</code> is called, the starting point of the delay is the current time.</li> <li>Applicable scenarios: Suitable for tasks that need to be delayed for a fixed time based on the last call time (regardless of when it was called).</li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#vtaskdelayuntil","title":"vTaskDelayUntil","text":"<p>Function prototype</p> <pre><code>void vTaskDelayUntil(TickType_t *pxPreviousWakeTime, const TickType_t xTimeIncrement);\n</code></pre> <p>Function introduction</p> <p><code>vTaskDelayUntil</code> is a function for periodic task execution. After calling the <code>vTaskDelayUntil</code> function in a task, the task will be executed periodically at the specified time interval.</p> <p>Parameters</p> <ul> <li><code>pxPreviousWakeTime</code>: Pointer to the last wake-up time. When called for the first time, a pointer to 0 should be passed in.</li> <li><code>xTimeIncrement</code>: time interval in FreeRTOS ticks. The tick frequency is defined in <code>FreeRTOSConfig.h</code> by the <code>configTICK_RATE_HZ</code> macro.</li> </ul> <p>Example</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"esp_log.h\"\n\nvoid taskA(void *param)\n{\n    TickType_t xLastWakeTime;\n    const TickType_t xFrequency = pdMS_TO_TICKS(500); // 500 ms\n    // Initialize last wakeup time\n    xLastWakeTime = xTaskGetTickCount();\n\n    while(1)\n    {\n        ESP_LOGI(\"main\",\"Hello world from CSW!\");\n\n        // Wait for next cycle\n        vTaskDelayUntil(&amp;xLastWakeTime, xFrequency);\n    }\n}\n\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    xTaskCreatePinnedToCore(taskA, \"helloworld\", 2048, NULL, 3, NULL, tskNO_AFFINITY);\n}\n</code></pre> <p>Summary <code>vTaskDelay</code></p> <ul> <li>Function: <code>vTaskDelayUntil</code> uses an \"absolute time\" concept for delay, which allows tasks to precisely control the execution period. The delay starts from a fixed reference point, which ensures that the task is executed at a fixed interval, even if there are other computational overheads in the task.</li> <li>Applicable scenarios: Suitable for periodic tasks, ensuring that the task is executed accurately at fixed intervals to avoid delay accumulation caused by other tasks or code.</li> </ul> <p>Tip</p> <p>In FreeRTOS, the frequency of the clock tick is defined by the <code>configTICK_RATE_HZ</code> macro. And the input time in the delay function is actually the system tick, not the physical world time, so for ease of use, FreeRTOS provides the <code>pdMS_TO_TICKS</code> macro to convert milliseconds to ticks.</p>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#inter-task-synchronization","title":"Inter-task synchronization","text":"<p>Note</p> <p>Synchronization in RTOS refers to the collaborative working method between different tasks or between tasks and external events to ensure that multiple concurrently executed tasks are executed in the expected order or timing. \"It involves the communication and coordination mechanism between threads or tasks, the purpose is to avoid data competition, solve race conditions, and ensure the correct behavior of the system.</p> <p>Note</p> <p>Mutual exclusion means that a resource is only allowed to be accessed by one visitor at a time, which is unique and exclusive.</p> <p>Note</p> <p>A queue is a data structure used to transfer data between tasks. A queue is a first-in-first-out (FIFO) data structure. Tasks can put data into the queue and take data out of the queue.</p>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#queue","title":"Queue","text":""},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xqueuecreate","title":"xQueueCreate","text":"<p>Function prototype</p> <pre><code>QueueHandle_t xQueueCreate(const UBaseType_t uxQueueLength, // Queue length\nconst UBaseType_t uxItemSize); // Size of each element in the queue\n</code></pre> <p>Function introduction</p> <p><code>xQueueCreate</code> is a function used to create a queue. A queue is a first-in-first-out (FIFO) data structure used to pass data between tasks.</p> <p>Parameters</p> <ul> <li> <p><code>uxQueueLength</code>: The length of the queue, that is, the number of elements that can be stored in the queue.</p> </li> <li> <p><code>uxItemSize</code>: The size of each element in the queue, in bytes.</p> </li> </ul> <p>Return value</p> <ul> <li> <p>Queue handle: The queue was created successfully.</p> </li> <li> <p><code>NULL</code>: The queue was not created successfully.</p> </li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xqueuesend","title":"xQueueSend","text":"<p>Function prototype</p> <pre><code>BaseType_t xQueueSend(QueueHandle_t xQueue, // Queue handle\nconst void *pvItemToQueue, // Data pointer to be sent to the queue, copied to the queue\nTickType_t xTicksToWait); // Waiting time\n</code></pre> <p>Function introduction</p> <p><code>xQueueSend</code> is a function used to send data to a queue. After calling the <code>xQueueSend</code> function, the data will be sent to the queue.</p> <p>Parameters</p> <ul> <li><code>xQueue</code>: Queue handle.</li> <li><code>pvItemToQueue</code>: Data pointer to be sent to the queue.</li> <li><code>xTicksToWait</code>: Waiting time, that is, the waiting time when the queue is full. If the queue is full, the task will wait for space to be available in the queue within the waiting time. If the waiting time is 0, the task will return immediately.</li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xqueuesendtoback","title":"xQueueSendToBack","text":"<p>Function prototype</p> <pre><code>BaseType_t xQueueSendToBack(QueueHandle_t xQueue, // Queue handle\nconst void *pvItemToQueue, // Data pointer to be sent to the queue, copied to the queue\nTickType_t xTicksToWait); // Waiting time\n</code></pre> <p>Function introduction</p> <p><code>xQueueSendToBack</code> is a function used to send data to a queue. After calling the <code>xQueueSendToBack</code> function, the data will be sent to the queue at the end of the queue. Suitable for situations where it is clear that the data needs to be sent to the end of the queue.</p> <p>Parameters</p> <ul> <li><code>xQueue</code>: Queue handle.</li> <li><code>pvItemToQueue</code>: Data pointer to be sent to the queue.</li> <li><code>xTicksToWait</code>: Waiting time, that is, the waiting time when the queue is full. If the queue is full, the task will wait for space to be available in the queue during the waiting time. If the wait time is 0, the task will return immediately.</li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xqueuereceive","title":"xQueueReceive","text":"<p>Function prototype</p> <pre><code>BaseType_t xQueueReceive(QueueHandle_t xQueue, // Queue handle\nvoid *pvBuffer, // Buffer pointer for receiving data\nTickType_t xTicksToWait); // Waiting time\n</code></pre> <p>Function introduction</p> <p><code>xQueueReceive</code> is a function for receiving data from a queue. After calling the <code>xQueueReceive</code> function, data will be received from the queue.</p> <p>Parameters</p> <ul> <li><code>xQueue</code>: Queue handle.</li> <li><code>pvBuffer</code>: Buffer pointer for receiving data.</li> </ul>"},{"location":"CHEATING_SHEET/FREERTOS/freertos/#xqueuesendfromisr","title":"xQueueSendFromISR","text":"<p>Function prototype</p> <pre><code>BaseType_t xQueueSendFromISR(QueueHandle_t xQueue, // Queue handle\nconst void *pvItemToQueue, // Data pointer to be sent to the queue\nBaseType_t *pxHigherPriorityTaskWoken); // High priority task wake-up flag\n</code></pre> <p>Function introduction</p> <p><code>xQueueSendFromISR</code> is a function used to send data to a queue from an interrupt service routine (ISR). After calling the <code>xQueueSendFromISR</code> function, the data will be sent to the queue.</p> <p>Parameters</p> <ul> <li><code>xQueue</code>: Queue handle.</li> <li><code>pvItemToQueue</code>: Data pointer to be sent to the queue.</li> <li><code>pxHigherPriorityTaskWoken</code>: High priority task wake-up flag. If a high priority task is woken up when sending data, this parameter is set to <code>pdTRUE</code>.</li> </ul>"},{"location":"CHEATING_SHEET/LOGS/logs/","title":"LOG","text":"<p>ESP_LOG()</p> <p>Usage:</p> <pre><code>static const char* TAG = \"main\"; // define a tag\nESP_LOGI(TAG,\"Hello world!\"); // print information\n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/","title":"COMMON MODULES","text":""},{"location":"CHEATING_SHEET/MODULES/modules/#standard-library-modules","title":"STANDARD LIBRARY MODULES","text":""},{"location":"CHEATING_SHEET/MODULES/modules/#stdio","title":"stdio","text":"<p>Introduction</p> <p>The standard input and output library is a standard library of the C language, which provides a series of input and output functions, such as printf, scanf, etc. The header file of the standard input and output library is stdio.h. After introducing this header file, you can use the functions of the standard input and output library.</p> <p>Usage:</p> <pre><code>#include &lt;stdio.h&gt;\n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/#string","title":"string","text":"<p>Introduction</p> <p>The string library is a standard library of the C language, which provides a series of string processing functions, such as strcpy, strcat, etc. The header file of the string library is string.h. After introducing this header file, you can use the functions of the string library. </p> <p>Usage:</p> <pre><code>#include &lt;string.h&gt;\n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/#log-modules","title":"LOG MODULES","text":""},{"location":"CHEATING_SHEET/MODULES/modules/#esp_log","title":"esp_log","text":"<p>Introduction</p> <p>ESP_LOG is the log module of ESP-IDF, which provides some log output functions, such as ESP_LOGI, ESP_LOGE, etc. esp_log.h represents the header file of the log module. After introducing this header file, you can use the functions of the log module.</p> <p>Usage:</p> <pre><code>#include \"esp_log.h\"\n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/#rtos-freertos-modules","title":"RTOS-FREERTOS MODULES","text":""},{"location":"CHEATING_SHEET/MODULES/modules/#freertosfreertos","title":"freertos/FreeRTOS","text":"<p>Introduction</p> <p>FreeRTOS is a small real-time operating system kernel for embedded systems. FreeRTOS is an open-source project that provides some basic real-time operating system functions, such as task management, time management, memory management, etc. FreeRTOS.h represents the header file of its core library. After introducing this header file, you can use the functions of FreeRTOS.</p> <p>Usage:</p> <pre><code>#include \"freertos/FreeRTOS.h\"  \n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/#freertosfreertos_1","title":"freertos/FreeRTOS","text":"<p>Introduction</p> <p>The FreeRTOS task management library is a module of FreeRTOS, which provides some task management functions, such as task creation, task deletion, task suspension, task resumption, etc. task.h represents the header file of the task management library. After introducing this header file, you can use the functions of the task management library.</p> <p>Usage:</p> <pre><code>#include \"freertos/task.h\"   \n</code></pre>"},{"location":"CHEATING_SHEET/MODULES/modules/#freertosqueue","title":"freertos/queue","text":"<p>Introduction</p> <p>The FreeRTOS queue management library is a module of FreeRTOS, which provides some queue management functions, such as queue creation, queue deletion, queue sending, queue receiving, etc. queue.h represents the header file of the queue management library. After introducing this header file, you can use the functions of the queue management library.</p> <p>Usage:</p> <pre><code>#include \"freertos/queue.h\"   \n</code></pre>"},{"location":"ESP32/ESP32/","title":"ESP32","text":""},{"location":"ESP32/ESP32/#espressif-systems-espressif-iot-development-framework-esp-idf","title":"ESPRESSIF SYSTEMS &amp; ESPRESSIF IOT DEVELOPMENT FRAMEWORK (ESP-IDF)","text":"<p>Info</p> <p>Espressif Systems is a semiconductor company based in China, known for developing low-power wireless solutions, including Wi-Fi and Bluetooth modules and SoCs (System on Chips). Their products, such as the ESP8266 and ESP32 series, have gained popularity in IoT, embedded systems, and wireless communication due to their low cost, power efficiency, and ease of use. Espressif provides a range of development tools and software support, making their products widely adopted by developers and engineers in various industries.</p> <p>Info</p> <p>ESP-IDF (Espressif IoT Development Framework) is the official development framework for the ESP32 series chips from Espressif. It provides a comprehensive set of tools and libraries to help developers create robust applications for ESP32-based devices. ESP-IDF supports FreeRTOS, Wi-Fi, Bluetooth, and a wide range of peripherals. It is compatible with the GCC toolchain and supports multiple languages like C and C++. The framework includes components for networking, security, power management, and driver development, making it suitable for a wide range of IoT applications.</p> <p>Note</p> <p>There are two ways to use ESP-IDF: ESP-IDF Command Prompt and GUI-based IDEs like Visual Studio Code. The latter is the most popular way to use ESP-IDF.</p>"},{"location":"ESP32/ESP32/#setup","title":"SETUP","text":"<p>Note</p> <p>In terms of interfacing manner, there are three ways to use ESP-IDF:</p> <ul> <li> <p>ESP-IDF Command Prompt: This is the default way to use ESP-IDF. It is a command-line interface that provides access to the tools and utilities required for ESP-IDF development.</p> </li> <li> <p>ESP-IDF IDE: This is an integrated development environment that provides a graphical interface for ESP-IDF development. It includes tools like the ESP-IDF Command Prompt, a text editor, and a project manager.</p> </li> <li> <p>IDE Plugins: These are plugins that integrate ESP-IDF with popular IDEs like Visual Studio Code and Eclipse. They provide features like code completion, syntax highlighting, and debugging support. This is the most popular way to use ESP-IDF.</p> </li> </ul> <ul> <li> <p> How to Install the ESP-IDF Toolchain on Windows \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  Portal </p> </li> <li> <p> How to Install the ESP-IDF Toolchain on Ubuntu \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  Portal </p> </li> </ul>"},{"location":"ESP32/ESP32/#official-guide","title":"OFFICIAL GUIDE","text":""},{"location":"ESP32/ESP32/#online-documentation","title":"Online Documentation","text":"<ul> <li> <p> ESP-IDF Programming Guide \ud83c\udfaf\ud83c\udfc6</p> <p>  Portal </p> </li> </ul>"},{"location":"ESP32/ESP32/#video-tutorials","title":"Video Tutorials","text":"<ul> <li> <p> \u3010Espressif Tutorial\u3011| Introduction to ESP-IDF IoT Development Framework \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  Link </p> </li> <li> <p> \u3010Espressif Tutorial\u3011| Espressif AIoT Development Resources and Application Guide \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  Link </p> </li> <li> <p> \u3010Espressif Tutorial\u3011| AIoT Programming with ESP32-S3 \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  Link </p> </li> </ul>"},{"location":"ESP32/ESP32/#third-party-tutorials","title":"Third-Party Tutorials","text":"<ul> <li> <p> \u30102024 Latest ESP32 Tutorial (Based on ESP-IDF)\u3011Entry-Level ESP32 Development Course - Updating with Subtitles \ud83c\udfaf\ud83c\udfc6</p> <p>  Link </p> </li> <li> <p> Binary Lone Wolf ESP-IDF Tutorial \ud83c\udfaf\ud83c\udfc6</p> <p>  Link </p> </li> <li> <p> DURUOFU \ud83c\udfaf\ud83c\udfc6</p> <p>  Link </p> </li> <li> <p> LEARNEPS32 \ud83c\udfaf\ud83c\udfc6</p> <p>  Link </p> </li> </ul>"},{"location":"ESP32/ESP32/#freertos","title":"FreeRTOS","text":"<p>Since ESP-IDF is based on FreeRTOS, learning FreeRTOS is essential for understanding ESP-IDF.</p> <ul> <li> <p> ESP32 FreeRTOS Tutorial \ud83c\udfaf\ud83c\udfc6</p> <p>  Link </p> </li> <li> <p> Binary Lone Wolf FreeRTOS Tutorial</p> <p>Based on Arduino IDE</p> <p>  Link </p> </li> </ul>"},{"location":"FREERTOS/quickstart/","title":"FREERTOS","text":""},{"location":"FREERTOS/quickstart/#introduction","title":"Introduction","text":"<p>Info</p> <p>FreeRTOS is a small real-time operating system kernel that supports multitasking, timers, semaphores, queues, mutexes, and other functions. FreeRTOS is an open-source project now maintained by Amazon Web Services.</p>"},{"location":"FREERTOS/quickstart/#core-concepts","title":"Core Concepts","text":"<p>without RTOS</p> <pre><code>while(1)\n{\n    task1();\n    task2();\n    task3();\n}\n</code></pre> <p>with RTOS</p> <pre><code>void task1(void *pvParameters)\n{\n    for(;;)\n    {\n        // task1 code\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    for(;;)\n    {\n        // task2 code\n    }\n}\n\nvoid task3(void *pvParameters)\n{\n    for(;;)\n    {\n        // task3 code\n    }\n}\n\nint main(void)\n{\n    xTaskCreate(task1, \"Task1\", 100, NULL, 1, NULL);\n    xTaskCreate(task2, \"Task2\", 100, NULL, 1, NULL);\n    xTaskCreate(task3, \"Task3\", 100, NULL, 1, NULL);\n    vTaskStartScheduler();\n    for(;;);\n}\n</code></pre> <p>Note</p> <p>It can be seen that in the case of no RTOS, when facing a project with complex functions, the code will become very complicated, while using RTOS, we can decompose tasks into multiple sub-tasks, making the code clearer and easier to maintain.</p> <p>Note</p> <p>The basic time unit of FreeRTOS is tick. The tick frequency is determined by the <code>configTICK_RATE_HZ</code> macro in <code>FreeRTOSConfig.h</code>.</p>"},{"location":"FREERTOS/quickstart/#task","title":"Task","text":"<p>Info</p> <p>Real-time applications using FREERTOS can be built as a set of independent tasks, each task running in its own context and not dependent on other tasks within the system or the RTOS task scheduler itself.</p> <p>Note</p> <p>Tasks have the following status:</p> <ul> <li> <p>Running</p> </li> <li> <p>Ready</p> </li> <li> <p>Blocked</p> </li> <li> <p>Suspended</p> </li> </ul> <p>Running</p> <p>When a task is actually executing, it is said to be in the Running state. If the processor running the RTOS has only one core, then only one task can be in the Running state.</p> <p>Ready</p> <p>When a task is ready to run, but it has not yet been given a chance to run because other tasks are running, this state is called the Ready state.</p> <p>Blocked</p> <p>When a task cannot run for some reason, it is said to be in the Blocked state. A task may be blocked for waiting for an event, waiting for a semaphore, waiting for a message queue, etc. Usually a blocked task has a timeout, and when the timeout is reached, the task is awakened.</p> <p>Suspended</p> <p>Like a blocked task, a suspended task cannot enter the Running state. However, unlike a blocked task, a suspended task will not be awakened until it is explicitly resumed. A task will only enter or exit the Suspended state if it is explicitly suspended and resumed through an API command. &gt; Running</p> <p>When a task is actually executing, it is said to be in the Running state. If the processor running the RTOS has only one core, then only one task can be in the running state.</p> <p>Ready</p> <p>When a task is ready to run, but it has not yet been given a chance to execute because other tasks are running, this state is called the ready state.</p> <p>Blocked</p> <p>When a task cannot run for some reason, it is called the blocked state. Tasks may be blocked for waiting for events, waiting for semaphores, waiting for message queues, etc. Usually a task in the blocked state has a timeout, and when the timeout is reached, the task will be awakened.</p> <p>Suspended</p> <p>Like a task in the blocked state, a task in the suspended state cannot enter the running state. However, unlike a task in the blocked state, a task in the suspended state will not be awakened until it is explicitly resumed. A task will only enter or exit the suspended state if it is explicitly suspended and resumed through API commands.</p>"},{"location":"GET_STARTED/ENVIRONMENT/environment/","title":"ESP32 DEVELOPMENT ENVIRONMENT SETUP","text":"<p>Tip</p> <p>You are strongly recommended to read the official guide for setting up the development environment before proceeding. The official guide can be found here. </p> <p>Note</p> <p>To start using ESP-IDF on ESP32, install the following software:</p> <ul> <li> <p>Toolchain to compile code for ESP32</p> </li> <li> <p>Build tools - CMake and Ninja to build a full Application for ESP32</p> </li> <li> <p>ESP-IDF that essentially contains API (software libraries and source code) for ESP32 and scripts to  operate the Toolchain</p> </li> </ul> <p></p> <p>Note</p> <p>There are two ways for ESP32 ESP-IDF programming:</p> <ul> <li> <p>Command Line Interface (CLI): fundamental for ESP-IDF programming</p> </li> <li> <p>IDE: easier for beginners</p> </li> </ul>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#windows","title":"WINDOWS","text":""},{"location":"GET_STARTED/ENVIRONMENT/environment/#cli","title":"CLI","text":"<ul> <li> <p> How to Install the ESP-IDF Toolchain on Windows (CLI)</p> <p>  Portal </p> </li> </ul>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#ide","title":"IDE","text":"<ul> <li> <p> How to Install the ESP-IDF Toolchain on Windows (VSCode)</p> <p>  Portal </p> </li> </ul>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#linux","title":"LINUX","text":"<p>Tip</p> <p>ESP-IDF is much faster on Linux than on Windows. It is recommended to use Linux for ESP-IDF development.</p>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#cli_1","title":"CLI \ud83c\udfaf","text":"<p>Note</p> <p>There are a total of five steps:</p> <ul> <li> <p>Step 1: Installation Preparation</p> </li> <li> <p>Step 2: Get ESP-IDF</p> </li> <li> <p>Step 3: Set up the Toolchain</p> </li> <li> <p>Step 4: Set up the Build System</p> </li> <li> <p>Step 5: Start Using</p> </li> </ul>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#step-1-installation-preparation","title":"Step 1 - Installation Preparation","text":"<ul> <li>UBUNTU &amp; DEBIAN</li> </ul> <pre><code>sudo apt-get install git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0\n</code></pre> <ul> <li>CENTOS</li> </ul> <pre><code>sudo yum -y update &amp;&amp; sudo yum install git wget flex bison gperf python3 python3-setuptools cmake ninja-build ccache dfu-util libusbx\n</code></pre>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#step-2-get-esp-idf","title":"Step 2 - Get ESP-IDF","text":"<p>Before building applications around the ESP32, obtain the ESP-IDF repository, the software library files provided by Espressif.</p> <p>To get a local copy of ESP-IDF, open the terminal, navigate to the working directory where you want to save ESP-IDF, and clone the remote repository using git clone. See detailed steps for different operating systems below.</p> <p>Open the terminal and run the following commands:</p> <p><pre><code>mkdir -p ~/esp\ncd ~/esp\ngit clone --recursive https://github.com/espressif/esp-idf.git\n</code></pre> ESP-IDF will be downloaded to <code>~/esp/esp-idf</code>.</p> <p>Visit the ESP-IDF Version Overview to check specific applicable scenarios for different ESP-IDF versions.</p>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#step-3-set-up-the-toolchain","title":"Step 3 - Set Up the Toolchain","text":"<p>Besides ESP-IDF itself, various tools used by ESP-IDF, such as compilers, debuggers, and Python packages, must also be installed to support ESP32 projects. <pre><code>cd ~/esp/esp-idf\n./install.sh all\n</code></pre></p>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#step-4-set-up-the-environment-variables","title":"Step 4 - Set Up the Environment Variables","text":"<p>At this stage, the tools you just installed are not yet added to the PATH environment variable, so they cannot be used from the command line. Therefore, some environment variables must be set. This can be done using another script provided by ESP-IDF.</p> <p>Run the following command in the terminal where you need to use ESP-IDF:</p> <pre><code>. $HOME/esp/esp-idf/export.sh\n</code></pre> <p>If you frequently use ESP-IDF, you can create an alias for running export.sh as follows:</p> <p>(1) Open the shell configuration file</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>(2) Copy and paste the following command into your shell configuration file.</p> <pre><code>alias get_idf='. $HOME/esp/esp-idf/export.sh'\n</code></pre> <p>(3) Refresh the configuration file by restarting the terminal or by running <code>source [path to profile]</code>, such as <code>source ~/.bashrc</code>.</p> <p>You can now run <code>get_idf</code> in any terminal window to set up or refresh the ESP-IDF environment.</p> <p>It is not recommended to add <code>export.sh</code> directly to the shell configuration file, as this will activate the IDF virtual environment in every terminal session, including those where ESP-IDF is not needed. This goes against the purpose of using a virtual environment and may interfere with other software.</p>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#ide_1","title":"IDE","text":"<ul> <li> <p> How to Install the ESP-IDF Toolchain on Ubuntu \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  Portal </p> </li> </ul>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#uninstalling-esp-idf","title":"Uninstalling ESP-IDF","text":"<p>(1) Delete the <code>esp</code> directory.</p> <p>First, navigate to the directory where you cloned the ESP-IDF repository and delete the <code>esp</code> directory, typically at <code>~/esp/esp-idf</code>.</p> <pre><code>rm -rf ~/esp/esp-idf\n</code></pre> <p>(2) Remove the toolchain.</p> <p>If you installed the toolchain using the <code>install.sh</code> script, typically in <code>~/.espressif</code>, you can remove it by running the following command:</p> <pre><code>rm -rf ~/.espressif\n</code></pre> <p>(3) Remove the environment variables.</p> <p>If you added an alias to quickly load the ESP-IDF environment variables in your shell configuration file (e.g., <code>~/.bashrc</code> or <code>~/.zshrc</code>), you need to edit these configuration files and remove the alias. You can open and edit the file using the following command:</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>(4) Refresh the configuration file.</p> <p>After removing the alias, refresh the configuration file by running the following command:</p> <pre><code>source ~/.bashrc\n</code></pre>"},{"location":"GET_STARTED/ENVIRONMENT/environment/#vscode-esp-idf-plugin","title":"VSCode ESP-IDF Plugin","text":"<p>Note</p> <p>This is currently one of the most popular ways to develop with ESP-IDF. VSCode is a lightweight code editor that supports multiple programming languages, including C/C++. The ESP-IDF plugin provides full support for ESP-IDF in VSCode, including features like code autocompletion, debugging, building, and flashing.</p> <ol> <li> <p>Install VSCode</p> <p>First, you need to install VSCode. You can download the installer for your operating system here.</p> </li> <li> <p>Install the ESP-IDF Plugin</p> <p>To install the ESP-IDF plugin, follow these steps:</p> <ul> <li>Open VSCode.</li> <li>Click the Extensions icon on the left sidebar.</li> <li>Type \u201cESP-IDF\u201d in the search bar.</li> <li>Click the \u201cInstall\u201d button.</li> </ul> </li> <li> <p>Configure ESP-IDF Path and ESP-IDF Tools Path</p> <p>After installing the ESP-IDF plugin, you need to configure the ESP-IDF path and ESP-IDF tools path. These paths tell the plugin where to find ESP-IDF and its related tools.</p> <ul> <li>Open VSCode.</li> <li>Click the \u201cSettings\u201d icon in the lower left corner.</li> <li>Type \u201cESP-IDF\u201d in the search bar.</li> <li>Enter the paths for ESP-IDF and ESP-IDF tools in the \u201cESP-IDF Path\u201d and \u201cESP-IDF Tools Path\u201d fields. (If they are not already installed, the plugin will automatically download them once the paths are set.)</li> <li>Save the settings.</li> </ul> </li> <li> <p>Create a New Project</p> </li> </ol>"},{"location":"GET_STARTED/HANDS-ON/hands-on/","title":"HANDS ON","text":""},{"location":"GET_STARTED/HANDS-ON/hands-on/#program-preparation","title":"Program Preparation","text":"<p>Find some programs for testing, here, I use the following repository: </p> <pre><code>git clone --recursive https://gitee.com/vi-iot/esp32-board.git\n</code></pre>"},{"location":"GET_STARTED/HANDS-ON/hands-on/#hardware-preparation","title":"Hardware Preparation","text":"<p>Connect the ESP32 development board to the computer</p>"},{"location":"GET_STARTED/HANDS-ON/hands-on/#select-a-program","title":"Select a Program","text":"<p>Enter the repository <code>esp32-board</code> we just downloaded, find a program, such as <code>helloworld</code>, enter the directory:</p> <pre><code>cd esp32-board\ncd helloworld\n</code></pre>"},{"location":"GET_STARTED/HANDS-ON/hands-on/#set-the-development-board-type","title":"Set the Development Board Type","text":"<p>If it is a general ESP32 development board, you can ignore this step, but if it is another development board, it is better to specify the development board type, such as esp32-s3:</p> <pre><code>idf.py set-target esp32s3\n</code></pre>"},{"location":"GET_STARTED/HANDS-ON/hands-on/#compile-the-program","title":"Compile the Program","text":"<pre><code>idf.py build\n</code></pre>"},{"location":"GET_STARTED/HANDS-ON/hands-on/#flash-the-program","title":"Flash the Program","text":"<pre><code>idf.py flash\n</code></pre> <p>Note that you can view the USB port where the device is located:</p> <pre><code>ls /dev/tty*\n</code></pre> <p>By comparing the linked/non-linked, find the port where the device is located, such as <code>/dev/ttyACM1</code>, and then flash the program:</p> <pre><code>idf.py -p /dev/ttyACM1 flash\n</code></pre>"},{"location":"GET_STARTED/HANDS-ON/hands-on/#monitor-the-program-running","title":"Monitor the Program Running","text":"<pre><code>idf.py monitor\n</code></pre> <p>or you can use a specific port</p> <pre><code>idf.py -p /dev/ttyACM1 monitor\n</code></pre>"},{"location":"GET_STARTED/HANDS-ON/hands-on/#exit-monitoring","title":"Exit Monitoring","text":"<p>Press <code>Ctrl + ]</code> to exit monitoring</p>"},{"location":"GET_STARTED/HARDWARE/hardware/","title":"HARDWARE","text":"<p>Info</p> <p>The hardware platform used in this document is the DNESP32S3M from Alientek\uff0c which is based on ESP32-S3, as shown in the figure above. It should be possible to migrate the relevant programs to other development boards, but adaptation should be made according to the actual situation.</p> <p>Info</p> <p>ESP32-S3 is a system on a chip that integrates the following features:</p> <ul> <li> <p>Wi-Fi (2.4 GHz band)</p> </li> <li> <p>Bluetooth Low Energy</p> </li> <li> <p>Dual high performance Xtensa\u00ae 32-bit LX7 CPU cores</p> </li> <li> <p>Ultra Low Power co-processor running either RISC-V or FSM core</p> </li> <li> <p>Multiple peripherals</p> </li> <li> <p>Built-in security hardware</p> </li> <li> <p>USB OTG interface</p> </li> <li> <p>USB Serial/JTAG Controller</p> </li> </ul> <p>Powered by 40 nm technology, ESP32-S3 provides a robust, highly integrated platform, which helps meet   the continuous demands for efficient power usage, compact design, security, high performance, and     reliability.</p> <p>Espressif provides basic hardware and software resources to help application developers realize their   ideas using the ESP32-S3 series hardware. The software development framework by Espressif is intended     for development of Internet-of-Things (IoT) applications with Wi-Fi, Bluetooth, power management and    several other system features.</p> <p>Note</p> <p>To start programming, you need: - A computer with a USB port - A USB cable - A DNESP32S3M development board or other ESP32 development board</p>"},{"location":"GET_STARTED/TEMPLATE/template/","title":"TEMPLATE PROJECT BUILDING-UP","text":""},{"location":"GET_STARTED/TEMPLATE/template/#environment-setup","title":"ENVIRONMENT SETUP","text":"<p>Info</p> <p>We use VSCode + ESP-IDF for development. Details to setup the development environment can be found on the internet. I assume you have already set up the development environment.</p>"},{"location":"GET_STARTED/TEMPLATE/template/#create-a-new-project","title":"CREATE A NEW PROJECT","text":"<ol> <li>Launch VSCode and then open the command palette by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS).</li> <li>Type <code>ESP-IDF: New Project</code> and press <code>Enter</code>. </li> <li>Enter the project configuration UI and fill in the required information. </li> <li>Choose a template to create a new project. </li> <li>Open in a new window.  </li> </ol>"},{"location":"GET_STARTED/TEMPLATE/template/#templated-project-structure","title":"TEMPLATED PROJECT STRUCTURE","text":"<pre><code>sample_proj/ # Project root directory\n\u251c\u2500\u2500 CMakeLists.txt # Project CMake configuration file\n\u251c\u2500\u2500 main/ # Main application directory\n\u2502   \u251c\u2500\u2500 CMakeLists.txt # Application CMake configuration file\n\u2502   \u2514\u2500\u2500 main.c # Application source file\n\u2514\u2500\u2500 sdkconfig # Project configuration file\n</code></pre>"},{"location":"GET_STARTED/TEMPLATE/template/#project-configuration","title":"PROJECT CONFIGURATION","text":"<p>Note</p> <p>This step is to configure the project settings to maximize the power of the hardware, i.e., use target-specific configurations rather than default configurations.</p> <p>Warning</p> <p>Before you open the project configuration UI, make sure you have the project open in VSCode, set the target to your board, and have the ESP-IDF extension installed.</p> <ol> <li>Enter the project configuration UI by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS) and type <code>ESP-IDF: Configure Project</code>. Alternatively, one can click the gear icon on the bottom menu of the VSCode window. </li> <li>'FLASH' configuration. In the search bar, type <code>flash</code> and press <code>Enter</code>.  </li> <li>'Partition Table' configuration. In the search bar, type <code>partition</code> and press <code>Enter</code>.  details to be provided later</li> <li>'PSRAM' configuration. In the search bar, type <code>psram</code> and press <code>Enter</code>. </li> <li>Change the CPU frequency. In the search bar, type <code>cpu</code> and press <code>Enter</code>. Modify the CPU frequency to 240 MHz. </li> <li>Modify the FreeRTOS tick clock frequency. In the search bar, type <code>tick</code> and press <code>Enter</code>. Modify the tick clock frequency to 1000 Hz. </li> <li>Modify the partition table. In the command palette, type <code>ESP-IDF: Open Partition Table Editor UI</code>. </li> <li>Modify the partition table as shown below. </li> <li>Save the all the modifications.</li> </ol> <p>By far, we have finished the project initialization. The configuration is now consistent with the hardware onboard resources. </p>"},{"location":"GET_STARTED/TEMPLATE/template/#template-program","title":"TEMPLATE PROGRAM","text":"<p>Now, let's create a simple program to test the board. </p> <p>Go to the main.c file and replace the content with the following code:</p> <pre><code>#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"nvs_flash.h\"\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        vTaskDelay(1000);\n    }\n}\n</code></pre> <p>Then, ensure the serial port number is corrrect, the target board is selected, then click the \"fire flame\" icon to build, flash and monitor the program. Then, you should be able to see the printouts on the serial monitor. </p>"},{"location":"GET_STARTED/TEMPLATE/template/#conclusions","title":"CONCLUSIONS","text":"<p>Note</p> <p>This project sets up the minimal system development board DNESP32S3M, and this project can serve as a useful template for future development. Compared to STM32, many low level details are hidden from the user, therefore the set up process is much simpler.</p>"},{"location":"TUTORIAL_STUDY/morningcore/","title":"MORNINGCORE TUTORIAL SERIES","text":"<p>Note</p> <p>This tutorial series is a tutorial on the use of the Morningcore ESP32 series development board, mainly for beginners, to help beginners quickly get started with the Morningcore ESP32 series development board. The related tutorial videos and example repositories are as follows:</p> <ul> <li> <p> \u30102024\u6700\u65b0\u7248 ESP32\u6559\u7a0b\uff08\u57fa\u4e8eESP-IDF\uff09\u3011ESP32\u5165\u95e8\u7ea7\u5f00\u53d1\u8bfe\u7a0b \u66f4\u65b0\u4e2d \u4e2d\u6587\u5b57\u5e55 \ud83c\udfaf\ud83c\udfc6</p> <p>  Portal </p> </li> <li> <p> esp32-board</p> <p>Example repository</p> <p>  Portal </p> </li> </ul>"},{"location":"TUTORIAL_STUDY/01-helloworld/helloworld/","title":"HELLO WORLD","text":""},{"location":"TUTORIAL_STUDY/01-helloworld/helloworld/#prepare-the-project","title":"Prepare the project","text":"<p>Copy the template project to the working directory</p>"},{"location":"TUTORIAL_STUDY/01-helloworld/helloworld/#_1","title":"\u66ff\u6362\u4ee3\u7801","text":"<p>\u5c06main.c\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>#include &lt;stdio.h&gt;                     // Standard input-output library for basic I/O operations\n#include \"freertos/FreeRTOS.h\"         // FreeRTOS core library, providing real-time operating system features\n#include \"freertos/task.h\"             // FreeRTOS task management library, includes functions for creating, deleting, and delaying tasks\n#include \"esp_log.h\"                   // ESP32 logging library for debugging and information output\n\n// Define a log tag to identify the module where the log is coming from\nstatic const char* TAG = \"main\";\n\n// Main function, the entry point of the ESP32 program\nvoid app_main(void)\n{\n    // Infinite loop, the code inside the loop will be repeatedly executed\n    while(1)\n    {\n        // Log an informational message with the \"Hello world!\" string\n        // TAG identifies the log's source module, here it is \"main\"\n        ESP_LOGI(TAG,\"Hello world!\");\n\n        // Delay the task for 1 second before repeating the loop\n        // vTaskDelay pauses the task for the specified time, where pdMS_TO_TICKS(1000) converts 1000 milliseconds (1 second) to FreeRTOS ticks\n        vTaskDelay(pdMS_TO_TICKS(1000));\n    }\n}\n</code></pre>"},{"location":"TUTORIAL_STUDY/01-helloworld/helloworld/#compiling-flashing-and-monitoring","title":"Compiling, Flashing, and Monitoring","text":"<p>In the serial monitor, you will see \"Hello world!\" printed every second.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"zh/","title":"ESP32 \u5b66\u4e60","text":"<p>\u8fd9\u4e2a\u9879\u76ee\u81f4\u529b\u4e8e\u57fa\u4e8eESP32\u5b66\u4e60\u548c\u5b9e\u8df5\u3002</p> <p></p>"},{"location":"zh/CHEATING_SHEET/cheating_sheet/","title":"ESP32\u7f16\u7a0b\u901f\u67e5\u8868","text":"<p>Note</p> <p>\u8be5\u6a21\u5757\u4f9bESP-IDF \u7f16\u7a0b\u4e2d\u5e38\u7528\u6a21\u5757\uff0c\u529f\u80fd\uff0c\u51fd\u6570\u7684\u7d22\u5f15\uff0c\u65b9\u4fbf\u67e5\u9605\u3002</p>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#_1","title":"\u4efb\u52a1\u521b\u5efa","text":""},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xtaskcreatepinnedtocore","title":"xTaskCreatePinnedToCore","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>BaseType_t xTaskCreatePinnedToCore(TaskFunction_t pxTaskCode, // \u4efb\u52a1\u51fd\u6570\u6307\u9488\n                                   const char * const pcName, // \u4efb\u52a1\u540d\u79f0\n                                   const uint32_t usStackDepth, // \u4efb\u52a1\u6808\u5927\u5c0f\n                                   void * const pvParameters, // \u4efb\u52a1\u53c2\u6570\n                                   UBaseType_t uxPriority, // \u4efb\u52a1\u4f18\u5148\u7ea7\n                                   TaskHandle_t * const pxCreatedTask, // \u4efb\u52a1\u53e5\u67c4\n                                   const BaseType_t xCoreID); // \u6838\u5fc3ID\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p>\u5728ESP-IDF\uff08ESP32\u5f00\u53d1\u6846\u67b6\uff09\u4e2d\uff0c<code>xTaskCreatePinnedToCore</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u4efb\u52a1\u5e76\u5c06\u4efb\u52a1\u56fa\u5b9a\u5230\u6307\u5b9aCPU\u6838\u5fc3\u7684\u51fd\u6570\u3002ESP32\u662f\u4e00\u6b3e\u53cc\u6838\u5fae\u63a7\u5236\u5668\uff08ESP32-S\u7cfb\u5217\u662f\u5355\u6838\uff09\uff0c\u5b83\u5177\u6709\u4e24\u4e2a\u5904\u7406\u6838\u5fc3\uff1aCore 0 \u548c Core 1\u3002\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1\u8005\u5c06\u4efb\u52a1\u56fa\u5b9a\u5728\u7279\u5b9a\u7684\u6838\u5fc3\u4e0a\u8fd0\u884c\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u7ba1\u7406CPU\u8d1f\u8f7d\u548c\u5b9e\u65f6\u6027\u80fd\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>pxTaskCode</code>\uff1a\u4efb\u52a1\u51fd\u6570\u6307\u9488\u3002\u5b83\u6307\u5411\u8981\u5728\u65b0\u4efb\u52a1\u4e2d\u6267\u884c\u7684\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u7684\u5b9a\u4e49\u683c\u5f0f\u901a\u5e38\u4e3a <code>void function_name(void *pvParameters)</code>\uff0c\u5176\u4e2d <code>pvParameters</code> \u662f\u4f20\u9012\u7ed9\u4efb\u52a1\u7684\u53c2\u6570\u3002</li> <li><code>pcName</code>\uff1a\u4efb\u52a1\u7684\u540d\u79f0\u5b57\u7b26\u4e32\uff0c\u901a\u5e38\u7528\u4e8e\u8c03\u8bd5\u548c\u76d1\u63a7\u3002\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u65b9\u4fbf\u8bc6\u522b\u7684\u5b57\u7b26\u4e32\u540d\u79f0\u3002</li> <li><code>usStackDepth</code>\uff1a\u4efb\u52a1\u6808\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\uff084\u5b57\u8282\uff09\u4e3a\u5355\u4f4d\u3002\u6808\u5927\u5c0f\u5e94\u6839\u636e\u4efb\u52a1\u4e2d\u9700\u8981\u7684\u6808\u7a7a\u95f4\u6765\u8bbe\u7f6e\u3002</li> <li><code>pvParameters</code>\uff1a\u4f20\u9012\u7ed9\u4efb\u52a1\u51fd\u6570\u7684\u53c2\u6570\u6307\u9488\u3002\u5982\u679c\u4efb\u52a1\u51fd\u6570\u4e0d\u9700\u8981\u53c2\u6570\uff0c\u53ef\u4ee5\u8bbe\u4e3a <code>NULL</code>\u3002</li> <li><code>uxPriority</code>\uff1a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002\u6570\u503c\u8d8a\u5927\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002ESP-IDF\u4e2d\u4f18\u5148\u7ea7\u53ef\u4ee5\u8bbe\u7f6e\u7684\u8303\u56f4\u662f 0 \u5230 24\u3002</li> <li><code>pxCreatedTask</code>\uff1a\u4efb\u52a1\u53e5\u67c4\u7684\u6307\u9488\uff0c\u7528\u4e8e\u63a5\u6536\u521b\u5efa\u4efb\u52a1\u7684\u53e5\u67c4\u3002\u5982\u679c\u4e0d\u9700\u8981\u4efb\u52a1\u53e5\u67c4\uff0c\u53ef\u4ee5\u5c06\u5176\u8bbe\u4e3a<code>NULL</code>\u3002</li> <li><code>xCoreID</code>\uff1a<code>0</code>\uff1a\u7ed1\u5b9a\u5230\u6838\u5fc30\uff08\u4e3b\u6838\u5fc3\uff09\u3002<code>1</code>\uff1a\u7ed1\u5b9a\u5230\u6838\u5fc31\u3002<code>tskNO_AFFINITY</code>\uff1a\u4e0d\u7ed1\u5b9a\u5230\u7279\u5b9a\u6838\u5fc3\uff0c\u5141\u8bb8FreeRTOS\u5728\u4efb\u4e00\u6838\u5fc3\u4e0a\u8c03\u5ea6\u4efb\u52a1\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li><code>pdPASS</code>\uff1a\u4efb\u52a1\u521b\u5efa\u6210\u529f\u3002</li> <li><code>pdFAIL</code>\uff1a\u4efb\u52a1\u521b\u5efa\u5931\u8d25\u3002</li> </ul> <p>\u793a\u4f8b</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// \u5b9a\u4e49\u4efb\u52a1\u51fd\u6570\nvoid myTask(void *pvParameters)\n{\n    while(1)\n    {\n        printf(\"Hello from myTask on Core 0\\n\");\n        vTaskDelay(pdMS_TO_TICKS(1000));  // \u5ef6\u65f61\u79d2\n    }\n}\n\nvoid app_main(void)\n{\n    // \u521b\u5efa\u4efb\u52a1\u5e76\u5c06\u5176\u56fa\u5b9a\u5728\u6838\u5fc30\n    xTaskCreatePinnedToCore(\n        myTask,          // \u4efb\u52a1\u51fd\u6570\n        \"MyTask\",        // \u4efb\u52a1\u540d\u79f0\n        2048,            // \u4efb\u52a1\u6808\u5927\u5c0f\n        NULL,            // \u4efb\u52a1\u53c2\u6570\n        5,               // \u4efb\u52a1\u4f18\u5148\u7ea7\n        NULL,            // \u4efb\u52a1\u53e5\u67c4\n        0                // \u6838\u5fc3ID\uff080\u8868\u793a\u7ed1\u5b9a\u5230\u6838\u5fc30\uff09\n    );\n}\n</code></pre>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xtaskcreatestaticpinnedtocore","title":"xTaskCreateStaticPinnedToCore","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>TaskHandle_t xTaskCreateStaticPinnedToCore(TaskFunction_t pxTaskCode, // \u4efb\u52a1\u51fd\u6570\u6307\u9488\n                                           const char * const pcName, // \u4efb\u52a1\u540d\u79f0\n                                           const uint32_t ulStackDepth, // \u4efb\u52a1\u6808\u5927\u5c0f\n                                           void * const pvParameters, // \u4efb\u52a1\u53c2\u6570\n                                           UBaseType_t uxPriority, // \u4efb\u52a1\u4f18\u5148\u7ea7\n                                           StackType_t * const puxStackBuffer, // \u6307\u5411\u6808\u7a7a\u95f4\u7684\u53ef\u7528\u5185\u5b58\u533a\u57df\n                                           StaticTask_t * const pxTaskBuffer, // \u6307\u5411\u4efb\u52a1\u63cf\u8ff0\u7684\u53ef\u7528\u5185\u5b58\u533a\u57df\n                                           const BaseType_t xCoreID); // \u6838\u5fc3ID\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xTaskCreateStaticPinnedToCore</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u4efb\u52a1\u5e76\u5c06\u4efb\u52a1\u56fa\u5b9a\u5230\u6307\u5b9aCPU\u6838\u5fc3\u7684\u51fd\u6570\u3002\u4e0e <code>xTaskCreatePinnedToCore</code> \u4e0d\u540c\u7684\u662f\uff0c<code>xTaskCreateStaticPinnedToCore</code> \u5141\u8bb8\u7528\u6237\u63d0\u4f9b\u4efb\u52a1\u7684\u6808\u7a7a\u95f4\u548c\u4efb\u52a1\u63cf\u8ff0\u7b26\u7684\u5185\u5b58\u533a\u57df\u3002\u8fd9\u6837\u53ef\u4ee5\u66f4\u597d\u5730\u63a7\u5236\u4efb\u52a1\u7684\u5185\u5b58\u5206\u914d\u548c\u7ba1\u7406\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>pxTaskCode</code>\uff1a\u4efb\u52a1\u51fd\u6570\u6307\u9488\u3002\u5b83\u6307\u5411\u8981\u5728\u65b0\u4efb\u52a1\u4e2d\u6267\u884c\u7684\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u7684\u5b9a\u4e49\u683c\u5f0f\u901a\u5e38\u4e3a <code>void function_name(void *pvParameters)</code>\uff0c\u5176\u4e2d <code>pvParameters</code> \u662f\u4f20\u9012\u7ed9\u4efb\u52a1\u7684\u53c2\u6570\u3002</li> <li><code>pcName</code>\uff1a\u4efb\u52a1\u7684\u540d\u79f0\u5b57\u7b26\u4e32\uff0c\u901a\u5e38\u7528\u4e8e\u8c03\u8bd5\u548c\u76d1\u63a7\u3002\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u65b9\u4fbf\u8bc6\u522b\u7684\u5b57\u7b26\u4e32\u540d\u79f0\u3002</li> <li><code>ulStackDepth</code>\uff1a\u4efb\u52a1\u6808\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\uff084\u5b57\u8282\uff09\u4e3a\u5355\u4f4d\u3002\u6808\u5927\u5c0f\u5e94\u6839\u636e\u4efb\u52a1\u4e2d\u9700\u8981\u7684\u6808\u7a7a\u95f4\u6765\u8bbe\u7f6e\u3002</li> <li><code>pvParameters</code>\uff1a\u4f20\u9012\u7ed9\u4efb\u52a1\u51fd\u6570\u7684\u53c2\u6570\u6307\u9488\u3002\u5982\u679c\u4efb\u52a1\u51fd\u6570\u4e0d\u9700\u8981\u53c2\u6570\uff0c\u53ef\u4ee5\u8bbe\u4e3a <code>NULL</code>\u3002</li> <li><code>uxPriority</code>\uff1a\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u3002\u6570\u503c\u8d8a\u5927\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002ESP-IDF\u4e2d\u4f18\u5148\u7ea7\u53ef\u4ee5\u8bbe\u7f6e\u7684\u8303\u56f4\u662f 0 \u5230 24\u3002</li> <li><code>puxStackBuffer</code>\uff1a\u6307\u5411\u9759\u6001\u5206\u914d\u7684\u4efb\u52a1\u6808\u7684\u6307\u9488\u3002\u6808\u5185\u5b58\u9700\u63d0\u524d\u5206\u914d\u5e76\u4f20\u5165\u51fd\u6570\uff0c\u4efb\u52a1\u4f1a\u4f7f\u7528\u8fd9\u5757\u5185\u5b58\u800c\u4e0d\u662f\u52a8\u6001\u5206\u914d\u6808\u7a7a\u95f4\u3002</li> <li><code>pxTaskBuffer</code>\uff1a\u6307\u5411\u9759\u6001\u4efb\u52a1\u63a7\u5236\u5757\u7684\u6307\u9488\u3002\u63a7\u5236\u5757\u7528\u4e8eFreeRTOS\u7ba1\u7406\u4efb\u52a1\u4fe1\u606f\uff08\u4f8b\u5982\u72b6\u6001\u3001\u4f18\u5148\u7ea7\u3001\u6808\u6307\u9488\u7b49\uff09\u3002\u6b64\u63a7\u5236\u5757\u4e5f\u9700\u63d0\u524d\u5206\u914d\u3002</li> <li><code>xCoreID</code>\uff1a<code>0</code>\uff1a\u7ed1\u5b9a\u5230\u6838\u5fc30\uff08\u4e3b\u6838\u5fc3\uff09\u3002<code>1</code>\uff1a\u7ed1\u5b9a\u5230\u6838\u5fc31\u3002<code>tskNO_AFFINITY</code>\uff1a\u4e0d\u7ed1\u5b9a\u5230\u7279\u5b9a\u6838\u5fc3\uff0c\u5141\u8bb8FreeRTOS\u5728\u4efb\u4e00\u6838\u5fc3\u4e0a\u8c03\u5ea6\u4efb\u52a1\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li><code>pdPASS</code>\uff1a\u4efb\u52a1\u521b\u5efa\u6210\u529f\u3002</li> <li><code>pdFAIL</code>\uff1a\u4efb\u52a1\u521b\u5efa\u5931\u8d25\u3002</li> </ul> <p>\u793a\u4f8b</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n\n// \u5b9a\u4e49\u4efb\u52a1\u6808\u548c\u4efb\u52a1\u63a7\u5236\u5757\u7684\u9759\u6001\u5185\u5b58\nstatic StackType_t myTaskStack[2048];      // \u4efb\u52a1\u6808\u5927\u5c0f\u4e3a2048\u5b57\u8282\nstatic StaticTask_t myTaskBuffer;          // \u4efb\u52a1\u63a7\u5236\u5757\n\n// \u5b9a\u4e49\u4efb\u52a1\u51fd\u6570\nvoid myTask(void *pvParameters)\n{\n    while(1)\n    {\n        printf(\"Running myTask on Core 1\\n\");\n        vTaskDelay(pdMS_TO_TICKS(1000));  // \u5ef6\u65f61\u79d2\n    }\n}\n\nvoid app_main(void)\n{\n    // \u4f7f\u7528\u9759\u6001\u5185\u5b58\u521b\u5efa\u4efb\u52a1\u5e76\u5c06\u5176\u7ed1\u5b9a\u5230\u6838\u5fc30\n    xTaskCreateStaticPinnedToCore(\n        myTask,            // \u4efb\u52a1\u51fd\u6570\n        \"MyStaticTask\",    // \u4efb\u52a1\u540d\u79f0\n        2048,              // \u4efb\u52a1\u6808\u5927\u5c0f\n        NULL,              // \u4efb\u52a1\u53c2\u6570\n        5,                 // \u4efb\u52a1\u4f18\u5148\u7ea7\n        myTaskStack,       // \u9759\u6001\u6808\u5185\u5b58\n        &amp;myTaskBuffer,     // \u9759\u6001\u4efb\u52a1\u63a7\u5236\u5757\n        0                  // \u6838\u5fc3ID\uff080\u8868\u793a\u7ed1\u5b9a\u5230\u6838\u5fc30\uff09\n    );\n}\n</code></pre>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#_2","title":"\u5ef6\u65f6\u4e0e\u963b\u585e","text":""},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#vtaskdelay","title":"vTaskDelay","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>void vTaskDelay(const TickType_t xTicksToDelay);\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>vTaskDelay</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u5ef6\u65f6\u4efb\u52a1\u6267\u884c\u7684\u51fd\u6570\u3002\u5728\u4efb\u52a1\u4e2d\u8c03\u7528 <code>vTaskDelay</code> \u51fd\u6570\u540e\uff0c\u4efb\u52a1\u4f1a\u6682\u505c\u6267\u884c\u6307\u5b9a\u7684\u65f6\u95f4\uff0c\u7136\u540e\u518d\u7ee7\u7eed\u6267\u884c\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xTicksToDelay</code>\uff1a\u5ef6\u65f6\u7684\u65f6\u95f4\uff0c\u4ee5 FreeRTOS \u7684\u65f6\u949f\u8282\u62cd\uff08tick\uff09\u4e3a\u5355\u4f4d\u3002\u65f6\u949f\u8282\u62cd\u7684\u9891\u7387\u7531 <code>configTICK_RATE_HZ</code> \u5b8f\u5728 <code>FreeRTOSConfig.h</code> \u4e2d\u5b9a\u4e49\u3002</li> </ul> <p>\u793a\u4f8b</p> <pre><code>void myTask(void *pvParameters)\n{\n    while(1)\n    {\n        printf(\"Hello from myTask\\n\");\n        vTaskDelay(pdMS_TO_TICKS(1000));  // \u5ef6\u65f61\u79d2\n    }\n}\n</code></pre> <p>\u5c0f\u7ed3 <code>vTaskDelay</code></p> <ul> <li>\u529f\u80fd\uff1a<code>vTaskDelay</code> \u4f7f\u4efb\u52a1\u5ef6\u8fdf\u6307\u5b9a\u7684\u65f6\u95f4\uff0c\u4ece\u5f53\u524d\u65f6\u523b\u5f00\u59cb\u8ba1\u65f6\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u6b21\u8c03\u7528 <code>vTaskDelay</code> \u65f6\uff0c\u5ef6\u65f6\u7684\u8d77\u70b9\u90fd\u662f\u5f53\u524d\u65f6\u523b\u3002</li> <li>\u9002\u7528\u573a\u666f\uff1a\u9002\u5408\u4efb\u52a1\u9700\u8981\u6839\u636e\u4e0a\u4e00\u6b21\u7684\u8c03\u7528\u65f6\u95f4\uff08\u65e0\u8bba\u4f55\u65f6\u8c03\u7528\uff09\u6765\u5ef6\u8fdf\u56fa\u5b9a\u65f6\u95f4\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#vtaskdelayuntil","title":"vTaskDelayUntil","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>void vTaskDelayUntil(TickType_t *pxPreviousWakeTime, const TickType_t xTimeIncrement);\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>vTaskDelayUntil</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u5468\u671f\u6027\u4efb\u52a1\u6267\u884c\u7684\u51fd\u6570\u3002\u5728\u4efb\u52a1\u4e2d\u8c03\u7528 <code>vTaskDelayUntil</code> \u51fd\u6570\u540e\uff0c\u4efb\u52a1\u4f1a\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u5185\u5468\u671f\u6027\u6267\u884c\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>pxPreviousWakeTime</code>\uff1a\u6307\u5411\u4e0a\u4e00\u6b21\u5524\u9192\u65f6\u95f4\u7684\u6307\u9488\u3002\u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\uff0c\u5e94\u8be5\u4f20\u5165\u4e00\u4e2a\u6307\u5411 0 \u7684\u6307\u9488\u3002</li> <li><code>xTimeIncrement</code>\uff1a\u65f6\u95f4\u95f4\u9694\uff0c\u4ee5 FreeRTOS \u7684\u65f6\u949f\u8282\u62cd\uff08tick\uff09\u4e3a\u5355\u4f4d\u3002\u65f6\u949f\u8282\u62cd\u7684\u9891\u7387\u7531 <code>configTICK_RATE_HZ</code> \u5b8f\u5728 <code>FreeRTOSConfig.h</code> \u4e2d\u5b9a\u4e49\u3002</li> </ul> <p>\u793a\u4f8b</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"esp_log.h\"\n\nvoid taskA(void *param)\n{\n    TickType_t xLastWakeTime;\n    const TickType_t xFrequency = pdMS_TO_TICKS(500); // 500 ms\n    // Initialize last wakeup time\n    xLastWakeTime = xTaskGetTickCount();\n\n    while(1)\n    {\n        ESP_LOGI(\"main\",\"Hello world from CSW!\");\n\n        // Wait for next cycle\n        vTaskDelayUntil(&amp;xLastWakeTime, xFrequency);\n    }\n}\n\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    xTaskCreatePinnedToCore(taskA, \"helloworld\", 2048, NULL, 3, NULL, tskNO_AFFINITY);\n}\n</code></pre> <p>\u5c0f\u7ed3 <code>vTaskDelay</code></p> <ul> <li>\u529f\u80fd\uff1a<code>vTaskDelayUntil</code> \u4f7f\u7528\u4e00\u4e2a\u201c\u7edd\u5bf9\u65f6\u95f4\u201d\u6982\u5ff5\u8fdb\u884c\u5ef6\u65f6\uff0c\u5b83\u5141\u8bb8\u4efb\u52a1**\u7cbe\u786e\u63a7\u5236\u6267\u884c\u5468\u671f**\u3002\u5ef6\u65f6\u4ece\u4e00\u4e2a\u56fa\u5b9a\u7684\u57fa\u51c6\u70b9\u5f00\u59cb\u8ba1\u65f6\uff0c\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u4efb\u52a1\u6309\u56fa\u5b9a\u7684\u95f4\u9694\u65f6\u95f4\u6267\u884c\uff0c\u5373\u4f7f\u4efb\u52a1\u4e2d\u6709\u5176\u4ed6\u8ba1\u7b97\u5f00\u9500\u3002</li> <li>\u9002\u7528\u573a\u666f\uff1a\u9002\u5408\u5468\u671f\u6027\u4efb\u52a1\uff0c\u786e\u4fdd\u4efb\u52a1\u7cbe\u786e\u5730\u6bcf\u9694\u56fa\u5b9a\u5468\u671f\u6267\u884c\u4e00\u6b21\uff0c\u907f\u514d\u56e0\u5176\u4ed6\u4efb\u52a1\u6216\u4ee3\u7801\u9020\u6210\u7684\u5ef6\u65f6\u7d2f\u79ef\u3002</li> </ul> <p>Tip</p> <p>\u5728 FreeRTOS \u4e2d\uff0c\u65f6\u949f\u8282\u62cd\u7684\u9891\u7387\u7531 <code>configTICK_RATE_HZ</code> \u5b8f\u5b9a\u4e49\u3002\u4e14\u5ef6\u65f6\u51fd\u6570\u4e2d\u8f93\u5165\u65f6\u95f4\u5176\u5b9e\u662f\u7cfb\u7edf\u8282\u62cd\uff0c\u800c\u975e\u7269\u7406\u4e16\u754c\u65f6\u95f4\uff0c\u6240\u4ee5\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0cFreeRTOS \u63d0\u4f9b\u4e86 <code>pdMS_TO_TICKS</code> \u5b8f\u6765\u5c06\u6beb\u79d2\u8f6c\u6362\u4e3a\u8282\u62cd\u6570\u3002</p>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#_3","title":"\u4efb\u52a1\u95f4\u540c\u6b65","text":"<p>Note</p> <p>RTOS\u4e2d\u7684\u540c\u6b65\uff0c\u662f\u6307\u662f\u4e0d\u540c\u4efb\u52a1\u4e4b\u95f4\u6216\u8005\u4efb\u52a1\u4e0e\u5916\u90e8\u4e8b\u4ef6\u4e4b\u95f4\u7684\u534f\u540c\u5de5\u4f5c\u65b9\u5f0f\u786e\u4fdd\u591a\u4e2a\u5e76\u53d1\u6267\u884c\u7684\u4efb\u52a1\u6309\u7167\u9884\u671f\u7684\u987a\u5e8f\u6216\u65f6\u673a\u6267\u884c\u3002\"\u5b83\u6d89\u53ca\u5230\u7ebf\u7a0b\u6216\u4efb\u52a1\u95f4\u7684\u901a\u4fe1\u548c\u534f\u8c03\u673a\u5236\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u907f\u514d\u6570\u636e\u7ade\u4e89\u3001\u89e3\u51b3\u7ade\u6001\u6761\u4ef6\uff0c\u5e76\u786e\u4fdd\u7cfb\u7edf\u7684\u6b63\u786e\u884c\u4e3a\u3002</p> <p>Note</p> <p>\u4e92\u65a5\u662f\u6307\u67d0\u4e00\u8d44\u6e90\u540c\u65f6\u53ea\u5141\u8bb8\u4e00\u4e2a\u8bbf\u95ee\u8005\u5bf9\u5176\u8fdb\u884c\u8bbf\u95ee,\u5177\u6709\u552f\u4e00\u6027\u548c\u6392\u5b83\u6027\u3002</p> <p>Note</p> <p>\u961f\u5217\u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u5728\u4efb\u52a1\u4e4b\u95f4\u4f20\u9012\u6570\u636e\u3002\u961f\u5217\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4efb\u52a1\u53ef\u4ee5\u5c06\u6570\u636e\u653e\u5165\u961f\u5217\uff0c\u4e5f\u53ef\u4ee5\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u6570\u636e\u3002</p>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#_4","title":"\u961f\u5217","text":""},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xqueuecreate","title":"xQueueCreate","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>QueueHandle_t xQueueCreate(const UBaseType_t uxQueueLength, // \u961f\u5217\u957f\u5ea6\n                           const UBaseType_t uxItemSize); // \u961f\u5217\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xQueueCreate</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u961f\u5217\u7684\u51fd\u6570\u3002\u961f\u5217\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u5728\u4efb\u52a1\u4e4b\u95f4\u4f20\u9012\u6570\u636e\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>uxQueueLength</code>\uff1a\u961f\u5217\u7684\u957f\u5ea6\uff0c\u5373\u961f\u5217\u4e2d\u53ef\u4ee5\u5b58\u653e\u7684\u5143\u7d20\u4e2a\u6570\u3002</li> <li><code>uxItemSize</code>\uff1a\u961f\u5217\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li>\u961f\u5217\u53e5\u67c4\uff1a\u961f\u5217\u521b\u5efa\u6210\u529f\u3002</li> <li><code>NULL</code>\uff1a\u961f\u5217\u521b\u5efa\u5931\u8d25\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xqueuesend","title":"xQueueSend","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>BaseType_t xQueueSend(QueueHandle_t xQueue, // \u961f\u5217\u53e5\u67c4\n                      const void *pvItemToQueue, // \u8981\u53d1\u9001\u5230\u961f\u5217\u7684\u6570\u636e\u6307\u9488\uff0c\u62f7\u8d1d\u5230\u961f\u5217\u4e2d\n                      TickType_t xTicksToWait); // \u7b49\u5f85\u65f6\u95f4\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xQueueSend</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u5411\u961f\u5217\u53d1\u9001\u6570\u636e\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xQueueSend</code> \u51fd\u6570\u540e\uff0c\u6570\u636e\u5c06\u88ab\u53d1\u9001\u5230\u961f\u5217\u4e2d\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xQueue</code>\uff1a\u961f\u5217\u53e5\u67c4\u3002</li> <li><code>pvItemToQueue</code>\uff1a\u8981\u53d1\u9001\u5230\u961f\u5217\u7684\u6570\u636e\u6307\u9488\u3002</li> <li><code>xTicksToWait</code>\uff1a\u7b49\u5f85\u65f6\u95f4\uff0c\u5373\u5728\u961f\u5217\u6ee1\u65f6\u7b49\u5f85\u7684\u65f6\u95f4\u3002\u5982\u679c\u961f\u5217\u5df2\u6ee1\uff0c\u4efb\u52a1\u5c06\u5728\u7b49\u5f85\u65f6\u95f4\u5185\u7b49\u5f85\u961f\u5217\u6709\u7a7a\u95f4\u53ef\u7528\u3002\u5982\u679c\u7b49\u5f85\u65f6\u95f4\u4e3a 0\uff0c\u5219\u4efb\u52a1\u5c06\u7acb\u5373\u8fd4\u56de\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xqueuesendtoback","title":"xQueueSendToBack","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>BaseType_t xQueueSendToBack(QueueHandle_t xQueue, // \u961f\u5217\u53e5\u67c4\n                            const void *pvItemToQueue, // \u8981\u53d1\u9001\u5230\u961f\u5217\u7684\u6570\u636e\u6307\u9488\uff0c\u62f7\u8d1d\u5230\u961f\u5217\u4e2d\n                            TickType_t xTicksToWait); // \u7b49\u5f85\u65f6\u95f4\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xQueueSendToBack</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u5411\u961f\u5217\u53d1\u9001\u6570\u636e\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xQueueSendToBack</code> \u51fd\u6570\u540e\uff0c\u6570\u636e\u5c06\u88ab\u53d1\u9001\u5230\u961f\u5217\u4e2d, \u4f4d\u7f6e\u4e3a\u961f\u5217\u7684\u5c3e\u90e8\u3002 \u9002\u5408\u660e\u786e\u9700\u8981\u53d1\u9001\u5230\u961f\u5217\u5c3e\u90e8\u7684\u60c5\u51b5\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xQueue</code>\uff1a\u961f\u5217\u53e5\u67c4\u3002</li> <li><code>pvItemToQueue</code>\uff1a\u8981\u53d1\u9001\u5230\u961f\u5217\u7684\u6570\u636e\u6307\u9488\u3002</li> <li><code>xTicksToWait</code>\uff1a\u7b49\u5f85\u65f6\u95f4\uff0c\u5373\u5728\u961f\u5217\u6ee1\u65f6\u7b49\u5f85\u7684\u65f6\u95f4\u3002\u5982\u679c\u961f\u5217\u5df2\u6ee1\uff0c\u4efb\u52a1\u5c06\u5728\u7b49\u5f85\u65f6\u95f4\u5185\u7b49\u5f85\u961f\u5217\u6709\u7a7a\u95f4\u53ef\u7528\u3002\u5982\u679c\u7b49\u5f85\u65f6\u95f4\u4e3a 0\uff0c\u5219\u4efb\u52a1\u5c06\u7acb\u5373\u8fd4\u56de\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xqueuereceive","title":"xQueueReceive","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>BaseType_t xQueueReceive(QueueHandle_t xQueue, // \u961f\u5217\u53e5\u67c4\n                         void *pvBuffer, // \u63a5\u6536\u6570\u636e\u7684\u7f13\u51b2\u533a\u6307\u9488\n                         TickType_t xTicksToWait); // \u7b49\u5f85\u65f6\u95f4\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xQueueReceive</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u4ece\u961f\u5217\u63a5\u6536\u6570\u636e\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xQueueReceive</code> \u51fd\u6570\u540e\uff0c\u6570\u636e\u5c06\u4ece\u961f\u5217\u4e2d\u63a5\u6536\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xQueue</code>\uff1a\u961f\u5217\u53e5\u67c4\u3002</li> <li><code>pvBuffer</code>\uff1a\u63a5\u6536\u6570\u636e\u7684\u7f13\u51b2\u533a\u6307\u9488\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xqueuesendfromisr","title":"xQueueSendFromISR","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>BaseType_t xQueueSendFromISR(QueueHandle_t xQueue, // \u961f\u5217\u53e5\u67c4\n                             const void *pvItemToQueue, // \u8981\u53d1\u9001\u5230\u961f\u5217\u7684\u6570\u636e\u6307\u9488\n                             BaseType_t *pxHigherPriorityTaskWoken); // \u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u5524\u9192\u6807\u5fd7\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xQueueSendFromISR</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u4ece\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\uff08ISR\uff09\u4e2d\u5411\u961f\u5217\u53d1\u9001\u6570\u636e\u7684\u51fd\u6570\u3002\u8c03\u7528 <code>xQueueSendFromISR</code> \u51fd\u6570\u540e\uff0c\u6570\u636e\u5c06\u88ab\u53d1\u9001\u5230\u961f\u5217\u4e2d\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>xQueue</code>\uff1a\u961f\u5217\u53e5\u67c4\u3002</li> <li><code>pvItemToQueue</code>\uff1a\u8981\u53d1\u9001\u5230\u961f\u5217\u7684\u6570\u636e\u6307\u9488\u3002</li> <li><code>pxHigherPriorityTaskWoken</code>\uff1a\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u5524\u9192\u6807\u5fd7\u3002\u5982\u679c\u5728\u53d1\u9001\u6570\u636e\u65f6\u5524\u9192\u4e86\u4e00\u4e2a\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\uff0c\u5219\u5c06\u6b64\u53c2\u6570\u8bbe\u7f6e\u4e3a <code>pdTRUE</code>\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#_5","title":"\u4fe1\u53f7\u91cf","text":""},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xsemaphorecreatebinary","title":"xSemaphoreCreateBinary","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>SemaphoreHandle_t xSemaphoreCreateBinary(void);\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xSemaphoreCreateBinary</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u4e8c\u503c\u4fe1\u53f7\u91cf\u7684\u51fd\u6570\u3002\u4e8c\u503c\u4fe1\u53f7\u91cf\u662f\u4e00\u79cd\u53ea\u6709\u4e24\u79cd\u72b6\u6001\u7684\u4fe1\u53f7\u91cf\uff0c\u5373\u53ef\u7528\u548c\u4e0d\u53ef\u7528\u3002</p> <p>\u8fd4\u56de\u503c</p> <ul> <li>\u4fe1\u53f7\u91cf\u53e5\u67c4\uff1a\u4fe1\u53f7\u91cf\u521b\u5efa\u6210\u529f\u3002</li> <li><code>NULL</code>\uff1a\u4fe1\u53f7\u91cf\u521b\u5efa\u5931\u8d25\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xsemaphorecreatecounting","title":"xSemaphoreCreateCounting","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>SemaphoreHandle_t xSemaphoreCreateCounting(const UBaseType_t uxMaxCount, // \u6700\u5927\u8ba1\u6570\u503c\n                                           const UBaseType_t uxInitialCount); // \u521d\u59cb\u8ba1\u6570\u503c\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xSemaphoreCreateCounting</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u8ba1\u6570\u4fe1\u53f7\u91cf\u7684\u51fd\u6570\u3002\u8ba1\u6570\u4fe1\u53f7\u91cf\u662f\u4e00\u79cd\u53ef\u4ee5\u5b58\u50a8\u591a\u4e2a\u8ba1\u6570\u503c\u7684\u4fe1\u53f7\u91cf\u3002</p> <p>\u53c2\u6570</p> <ul> <li><code>uxMaxCount</code>\uff1a\u6700\u5927\u8ba1\u6570\u503c\u3002</li> <li><code>uxInitialCount</code>\uff1a\u521d\u59cb\u8ba1\u6570\u503c\u3002</li> </ul> <p>\u8fd4\u56de\u503c</p> <ul> <li>\u4fe1\u53f7\u91cf\u53e5\u67c4\uff1a\u4fe1\u53f7\u91cf\u521b\u5efa\u6210\u529f\u3002</li> <li><code>NULL</code>\uff1a\u4fe1\u53f7\u91cf\u521b\u5efa\u5931\u8d25\u3002</li> </ul>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xsemaphorecreatemutex","title":"xSemaphoreCreateMutex","text":"<p>\u51fd\u6570\u539f\u578b</p> <pre><code>SemaphoreHandle_t xSemaphoreCreateMutex(void);\n</code></pre> <p>\u51fd\u6570\u7b80\u4ecb</p> <p><code>xSemaphoreCreateMutex</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u4e92\u65a5\u4fe1\u53f7\u91cf\u7684\u51fd\u6570\u3002\u4e92\u65a5\u4fe1\u53f7\u91cf\u662f\u4e00\u79cd\u7528\u4e8e\u5b9e\u73b0\u4e92\u65a5\u8bbf\u95ee\u7684\u4fe1\u53f7\u91cf\uff0c\u7528\u4e8e\u4fdd\u62a4\u5171\u4eab\u8d44\u6e90\u3002</p> <p>\u8fd4\u56de\u503c</p> <ul> <li>\u4fe1\u53f7\u91cf\u53e5\u67c4\uff1a\u4fe1\u53f7\u91cf\u521b\u5efa\u6210\u529f\u3002</li> <li><code>NULL</code>\uff1a\u4fe1\u53f7\u91cf\u521b\u5efa\u5931\u8d25\u3002</li> </ul> <p>\u4e92\u65a5\u9501</p> <p>\u4e92\u65a5\u9501\u662f\u4e00\u79cd\u7528\u4e8e\u5b9e\u73b0\u4e92\u65a5\u8bbf\u95ee\u7684\u540c\u6b65\u673a\u5236\u3002\u5728 FreeRTOS \u4e2d\uff0c\u4e92\u65a5\u9501\u662f\u901a\u8fc7\u4e92\u65a5\u4fe1\u53f7\u91cf\u5b9e\u73b0\u7684\u3002\u4e92\u65a5\u9501\u53ef\u4ee5\u786e\u4fdd\u5728\u4efb\u4f55\u65f6\u5019\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\u3002\u4e0e\u4e8c\u503c\u4fe1\u53f7\u91cf\u4e0d\u540c\uff0c\u4e92\u65a5\u9501\u5b9e\u73b0\u4e86\u4f18\u5148\u7ea7\u7ee7\u627f\u548c\u4f18\u5148\u7ea7\u53cd\u8f6c\u673a\u5236\uff0c\u4ee5\u786e\u4fdd\u4efb\u52a1\u80fd\u591f\u6309\u7167\u4f18\u5148\u7ea7\u987a\u5e8f\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\u3002</p> <p>\u4f18\u5148\u7ea7\u7ffb\u8f6c</p> <p>\u4f18\u5148\u7ea7\u7ffb\u8f6c\u662f\u6307\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u6682\u65f6\u5360\u7528\u8d44\u6e90\uff0c\u5bfc\u81f4\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u88ab\u963b\u585e\uff0c\u751a\u81f3\u88ab\u4e2d\u7b49\u4f18\u5148\u7ea7\u7684\u4efb\u52a1\u8fdb\u4e00\u6b65\u5ef6\u8fdf\u3002\u6700\u7ec8\uff0c\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u6267\u884c\u88ab\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u95f4\u63a5\u5730\u5ef6\u540e\u4e86\uff0c\u8fd9\u79cd\u73b0\u8c61\u88ab\u79f0\u4e3a\u4f18\u5148\u7ea7\u7ffb\u8f6c\u3002</p> <p>\u5178\u578b\u7684\u4f18\u5148\u7ea7\u7ffb\u8f6c\u573a\u666f\u5982\u4e0b\uff1a \u5047\u8bbe\u6709\u4e09\u4e2a\u4efb\u52a1\uff0c\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\u4f9d\u6b21\u662f \u4efb\u52a1A\u3001\u4efb\u52a1B \u548c \u4efb\u52a1C\uff0c\u4e14\u5b83\u4eec\u5171\u4eab\u4e00\u4e2a\u8d44\u6e90\uff08\u4f8b\u5982\u4e92\u65a5\u9501\uff09\u3002 \u6b65\u9aa4 1\uff1a\u4f4e\u4f18\u5148\u7ea7\u7684 \u4efb\u52a1C \u83b7\u5f97\u4e86\u8be5\u8d44\u6e90\uff08\u9501\uff09\u5e76\u6b63\u5728\u4f7f\u7528\u5b83\u3002 \u6b65\u9aa4 2\uff1a\u5728 \u4efb\u52a1C \u8fd8\u6ca1\u91ca\u653e\u8d44\u6e90\u65f6\uff0c\u9ad8\u4f18\u5148\u7ea7\u7684 \u4efb\u52a1A \u5f00\u59cb\u8fd0\u884c\uff0c\u5e76\u5c1d\u8bd5\u8bbf\u95ee\u76f8\u540c\u7684\u8d44\u6e90\u3002\u4f46\u662f\u56e0\u4e3a\u8d44\u6e90\u5df2\u7ecf\u88ab \u4efb\u52a1C \u5360\u7528\uff0c\u6240\u4ee5 \u4efb\u52a1A \u88ab\u963b\u585e\uff0c\u7b49\u5f85 \u4efb\u52a1C \u91ca\u653e\u8d44\u6e90\u3002 \u6b65\u9aa4 3\uff1a\u8fd9\u65f6\uff0c\u4f18\u5148\u7ea7\u4ecb\u4e8e\u4e24\u8005\u4e4b\u95f4\u7684 \u4efb\u52a1B \u5f00\u59cb\u8fd0\u884c\uff0c\u5e76\u4e14\u7531\u4e8e\u5b83\u7684\u4f18\u5148\u7ea7\u6bd4 \u4efb\u52a1C \u9ad8\uff0c\u56e0\u6b64 \u4efb\u52a1B \u4f1a\u62a2\u5360 \u4efb\u52a1C \u7684\u6267\u884c\u3002 \u7ed3\u679c\uff1a\u7531\u4e8e \u4efb\u52a1B \u7684\u6267\u884c\uff0c\u4efb\u52a1C \u7684\u8fdb\u7a0b\u88ab\u63a8\u8fdf\uff0c\u4ece\u800c\u5bfc\u81f4 \u4efb\u52a1A \u4e5f\u88ab\u5ef6\u8fdf\u3002\u5373\u4f7f \u4efb\u52a1A \u7684\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c\u5b83\u4e5f\u65e0\u6cd5\u7acb\u5373\u6267\u884c\uff0c\u56e0\u4e3a\u4e2d\u4f18\u5148\u7ea7\u7684 \u4efb\u52a1B \u95f4\u63a5\u963b\u788d\u4e86\u5b83\u7684\u6267\u884c\u3002 \u8fd9\u79cd\u60c5\u51b5\u79f0\u4e3a\u4f18\u5148\u7ea7\u7ffb\u8f6c\uff0c\u56e0\u4e3a\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1 \u4efb\u52a1C \u7684\u6267\u884c\u963b\u788d\u4e86\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1 \u4efb\u52a1A \u7684\u6267\u884c\uff0c\u800c \u4efb\u52a1B \u7684\u4ecb\u5165\u4f7f\u5f97\u7ffb\u8f6c\u6548\u679c\u66f4\u4e3a\u4e25\u91cd\u3002</p> <p>\u4f18\u5148\u7ea7\u7ffb\u8f6c\u4f1a\u9020\u6210\u5b9e\u65f6\u7cfb\u7edf\u7684\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u65e0\u6cd5\u6309\u65f6\u5b8c\u6210\uff0c\u5bfc\u81f4\u7cfb\u7edf\u6027\u80fd\u4e0b\u964d\u6216\u4e0d\u7a33\u5b9a\u3002\u5728\u5b9e\u65f6\u5e94\u7528\u4e2d\uff08\u5982\u63a7\u5236\u7cfb\u7edf\u6216\u901a\u4fe1\u7cfb\u7edf\uff09\uff0c\u4f18\u5148\u7ea7\u7ffb\u8f6c\u53ef\u80fd\u4f1a\u5e26\u6765\u4e25\u91cd\u7684\u540e\u679c\u3002</p> <p>FreeRTOS \u548c\u8bb8\u591a\u5176\u4ed6 RTOS \u4f7f\u7528\u4f18\u5148\u7ea7\u7ee7\u627f\uff08Priority Inheritance\uff09\u6765\u89e3\u51b3\u4f18\u5148\u7ea7\u7ffb\u8f6c\u95ee\u9898\u3002\u4f18\u5148\u7ea7\u7ee7\u627f\u673a\u5236\u7684\u539f\u7406\u5982\u4e0b\uff1a \u5f53\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u6301\u6709\u67d0\u4e2a\u8d44\u6e90\u5e76\u963b\u585e\u4e86\u4e00\u4e2a\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u65f6\uff0c\u4f4e\u4f18\u5148\u7ea7\u4efb\u52a1\u4f1a\u7ee7\u627f\u8be5\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\uff0c\u76f4\u5230\u8d44\u6e90\u88ab\u91ca\u653e\u3002 \u5728\u4e0a\u8ff0\u793a\u4f8b\u4e2d\uff0c\u4efb\u52a1C \u5728\u963b\u585e\u4e86\u9ad8\u4f18\u5148\u7ea7\u7684 \u4efb\u52a1A \u540e\uff0c\u4f1a\u4e34\u65f6\u63d0\u5347\u4e3a \u4efb\u52a1A \u7684\u4f18\u5148\u7ea7\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u4efb\u52a1C \u80fd\u591f\u4f18\u5148\u4e8e \u4efb\u52a1B \u7ee7\u7eed\u8fd0\u884c\u5e76\u5c3d\u5feb\u91ca\u653e\u8d44\u6e90\uff0c\u4ece\u800c\u8ba9 \u4efb\u52a1A \u80fd\u591f\u53ca\u65f6\u83b7\u53d6\u8d44\u6e90\u5e76\u6267\u884c\u3002 \u4e00\u65e6 \u4efb\u52a1C \u91ca\u653e\u8d44\u6e90\uff0c\u5b83\u7684\u4f18\u5148\u7ea7\u4f1a\u6062\u590d\u5230\u539f\u59cb\u6c34\u5e73\u3002</p>"},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xsemaphoretake","title":"xSemaphoreTake","text":""},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xsemaphoregive","title":"xSemaphoreGive","text":""},{"location":"zh/CHEATING_SHEET/FREERTOS/freertos/#xsemaphoredelete","title":"xSemaphoreDelete","text":""},{"location":"zh/CHEATING_SHEET/LOGS/logs/","title":"\u65e5\u5fd7","text":"<p>ESP_LOG()</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>static const char* TAG = \"main\"; // \u5b9a\u4e49\u4e00\u4e2a\u6807\u7b7e\nESP_LOGI(TAG,\"Hello world!\"); // \u6253\u5370\u4fe1\u606f\n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/","title":"\u5e38\u7528\u6a21\u5757","text":""},{"location":"zh/CHEATING_SHEET/MODULES/modules/#_2","title":"\u6807\u51c6\u5e93\u6a21\u5757","text":""},{"location":"zh/CHEATING_SHEET/MODULES/modules/#stdio","title":"stdio","text":"<p>\u7b80\u4ecb</p> <p>\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u5e93\u662fC\u8bed\u8a00\u7684\u6807\u51c6\u5e93\uff0c\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u8f93\u5165\u8f93\u51fa\u51fd\u6570\uff0c\u5982printf\u3001scanf\u7b49\u3002\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u5e93\u7684\u5934\u6587\u4ef6\u662fstdio.h\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u5e93\u7684\u51fd\u6570\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/#string","title":"string","text":"<p>\u7b80\u4ecb</p> <p>\u5b57\u7b26\u4e32\u5e93\u662fC\u8bed\u8a00\u7684\u6807\u51c6\u5e93\uff0c\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u5b57\u7b26\u4e32\u5904\u7406\u51fd\u6570\uff0c\u5982strcpy\u3001strcat\u7b49\u3002\u5b57\u7b26\u4e32\u5e93\u7684\u5934\u6587\u4ef6\u662fstring.h\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32\u5e93\u7684\u51fd\u6570\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include &lt;string.h&gt;\n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/#_3","title":"\u65e5\u5fd7\u6a21\u5757","text":""},{"location":"zh/CHEATING_SHEET/MODULES/modules/#esp_log","title":"esp_log","text":"<p>\u7b80\u4ecb</p> <p>ESP_LOG\u662fESP-IDF\u7684\u65e5\u5fd7\u6a21\u5757\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65e5\u5fd7\u8f93\u51fa\u51fd\u6570\uff0c\u5982ESP_LOGI\u3001ESP_LOGE\u7b49\u3002esp_log.h \u4ee3\u8868\u4e86\u65e5\u5fd7\u6a21\u5757\u7684\u5934\u6587\u4ef6\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u65e5\u5fd7\u6a21\u5757\u7684\u51fd\u6570\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include \"esp_log.h\"\n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/#-freertos","title":"\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf-FREERTOS\u6a21\u5757","text":""},{"location":"zh/CHEATING_SHEET/MODULES/modules/#freertosfreertos","title":"freertos/FreeRTOS","text":"<p>\u7b80\u4ecb</p> <p>FreeRTOS\u662f\u4e00\u4e2a\u5c0f\u578b\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\uff0c\u7528\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3002FreeRTOS\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u529f\u80fd\uff0c\u5982\u4efb\u52a1\u7ba1\u7406\u3001\u65f6\u95f4\u7ba1\u7406\u3001\u5185\u5b58\u7ba1\u7406\u7b49\u3002FreeRTOS.h \u4ee3\u8868\u4e86\u5176\u6838\u5fc3\u5e93\u7684\u5934\u6587\u4ef6\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528FreeRTOS\u7684\u529f\u80fd\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include \"freertos/FreeRTOS.h\"  \n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/#freertostask","title":"freertos/task","text":"<p>\u7b80\u4ecb</p> <p>FreeRTOS\u4efb\u52a1\u7ba1\u7406\u5e93\u662fFreeRTOS\u7684\u4e00\u4e2a\u6a21\u5757\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u4efb\u52a1\u7ba1\u7406\u51fd\u6570\uff0c\u5982\u4efb\u52a1\u521b\u5efa\u3001\u4efb\u52a1\u5220\u9664\u3001\u4efb\u52a1\u6302\u8d77\u3001\u4efb\u52a1\u6062\u590d\u7b49\u3002task.h \u4ee3\u8868\u4e86\u4efb\u52a1\u7ba1\u7406\u5e93\u7684\u5934\u6587\u4ef6\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4efb\u52a1\u7ba1\u7406\u5e93\u7684\u51fd\u6570\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include \"freertos/task.h\"   \n</code></pre>"},{"location":"zh/CHEATING_SHEET/MODULES/modules/#freertosqueue","title":"freertos/queue","text":"<p>\u7b80\u4ecb</p> <p>FreeRTOS\u961f\u5217\u7ba1\u7406\u5e93\u662fFreeRTOS\u7684\u4e00\u4e2a\u6a21\u5757\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u961f\u5217\u7ba1\u7406\u51fd\u6570\uff0c\u5982\u961f\u5217\u521b\u5efa\u3001\u961f\u5217\u5220\u9664\u3001\u961f\u5217\u53d1\u9001\u3001\u961f\u5217\u63a5\u6536\u7b49\u3002queue.h \u4ee3\u8868\u4e86\u961f\u5217\u7ba1\u7406\u5e93\u7684\u5934\u6587\u4ef6\uff0c\u5f15\u5165\u8be5\u5934\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u961f\u5217\u7ba1\u7406\u5e93\u7684\u51fd\u6570\u3002</p> <p>\u7528\u6cd5\uff1a</p> <pre><code>#include \"freertos/queue.h\"   \n</code></pre>"},{"location":"zh/ESP32/ESP32/#esp-idf","title":"\u4e50\u946b\u79d1\u6280\u548c\u4e50\u946b\u7269\u8054\u7f51\u5f00\u53d1\u6846\u67b6 (ESP-IDF)","text":"<p>Info</p> <p>\u4e50\u946b\u79d1\u6280 \u662f\u4e00\u5bb6\u603b\u90e8\u4f4d\u4e8e\u4e2d\u56fd\u7684\u534a\u5bfc\u4f53\u516c\u53f8\uff0c\u4ee5\u5f00\u53d1\u4f4e\u529f\u8017\u65e0\u7ebf\u89e3\u51b3\u65b9\u6848\u95fb\u540d\uff0c\u5305\u62ecWi-Fi\u548c\u84dd\u7259\u6a21\u5757\u4ee5\u53ca\u7cfb\u7edf\u7ea7\u82af\u7247\uff08SoC\uff09\u3002\u5176\u4ea7\u54c1\uff0c\u5982ESP8266\u548cESP32\u7cfb\u5217\uff0c\u56e0\u5176\u4f4e\u6210\u672c\u3001\u8282\u80fd\u548c\u6613\u7528\u6027\u5728\u7269\u8054\u7f51\u3001\u5d4c\u5165\u5f0f\u7cfb\u7edf\u548c\u65e0\u7ebf\u901a\u4fe1\u9886\u57df\u5e7f\u53d7\u6b22\u8fce\u3002\u4e50\u946b\u79d1\u6280\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u5f00\u53d1\u5de5\u5177\u548c\u8f6f\u4ef6\u652f\u6301\uff0c\u4f7f\u5176\u4ea7\u54c1\u88ab\u4f17\u591a\u5f00\u53d1\u8005\u548c\u5de5\u7a0b\u5e08\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404\u7c7b\u884c\u4e1a\u4e2d\u3002</p> <p>Info</p> <p>ESP-IDF\uff08\u4e50\u946b\u7269\u8054\u7f51\u5f00\u53d1\u6846\u67b6\uff09 \u662f\u4e50\u946b\u79d1\u6280\u4e3aESP32\u7cfb\u5217\u82af\u7247\u63d0\u4f9b\u7684\u5b98\u65b9\u5f00\u53d1\u6846\u67b6\u3002\u5b83\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u6574\u5957\u5de5\u5177\u548c\u5e93\uff0c\u5e2e\u52a9\u521b\u5efa\u57fa\u4e8eESP32\u8bbe\u5907\u7684\u7a33\u5065\u5e94\u7528\u3002ESP-IDF\u652f\u6301FreeRTOS\u3001Wi-Fi\u3001\u84dd\u7259\u4ee5\u53ca\u591a\u79cd\u5916\u8bbe\u63a5\u53e3\u3002\u8be5\u6846\u67b6\u517c\u5bb9GCC\u5de5\u5177\u94fe\uff0c\u652f\u6301C\u548cC++\u7b49\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u5305\u542b\u7f51\u7edc\u3001\u5b89\u5168\u3001\u529f\u8017\u7ba1\u7406\u548c\u9a71\u52a8\u5f00\u53d1\u7b49\u7ec4\u4ef6\uff0c\u975e\u5e38\u9002\u5408\u5e7f\u6cdb\u7684\u7269\u8054\u7f51\u5e94\u7528\u5f00\u53d1\u3002</p> <p>Note</p> <p>\u4f7f\u7528ESP-IDF\u6709\u4e24\u79cd\u65b9\u5f0f\uff1aESP-IDF\u547d\u4ee4\u63d0\u793a\u7b26 \u548c \u57fa\u4e8eGUI\u7684IDE \uff0c\u5982Visual Studio Code\u3002\u540e\u8005\u662f\u4f7f\u7528ESP-IDF\u6700\u6d41\u884c\u7684\u65b9\u5f0f\u3002</p>"},{"location":"zh/ESP32/ESP32/#_1","title":"\u5b89\u88c5","text":"<p>Note</p> <p>\u5728\u4f7f\u7528\u65b9\u5f0f\u4e0a\uff0c\u6709\u4e09\u79cd\u4f7f\u7528ESP-IDF\u7684\u65b9\u5f0f\uff1a</p> <ul> <li> <p>ESP-IDF\u547d\u4ee4\u63d0\u793a\u7b26\uff1a\u8fd9\u662f\u4f7f\u7528ESP-IDF\u7684\u9ed8\u8ba4\u65b9\u5f0f\u3002\u5b83\u662f\u4e00\u4e2a\u547d\u4ee4\u884c\u754c\u9762\uff0c\u63d0\u4f9b\u4e86ESP-IDF\u5f00\u53d1\u6240\u9700\u7684\u5de5\u5177\u548c\u5b9e\u7528\u7a0b\u5e8f\u3002</p> </li> <li> <p>ESP-IDF\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff1a\u8fd9\u662f\u4e00\u4e2a\u63d0\u4f9bESP-IDF\u5f00\u53d1\u56fe\u5f62\u754c\u9762\u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883\u3002\u5b83\u5305\u62ecESP-IDF\u547d\u4ee4\u63d0\u793a\u7b26\u3001\u6587\u672c\u7f16\u8f91\u5668\u548c\u9879\u76ee\u7ba1\u7406\u5668\u7b49\u5de5\u5177\u3002</p> </li> <li> <p>IDE\u63d2\u4ef6\uff1a\u8fd9\u4e9b\u63d2\u4ef6\u5c06ESP-IDF\u4e0e\u6d41\u884c\u7684IDE\uff08\u5982Visual Studio Code\u548cEclipse\uff09\u96c6\u6210\u3002\u5b83\u4eec\u63d0\u4f9b\u4ee3\u7801\u8865\u5168\u3001\u8bed\u6cd5\u9ad8\u4eae\u548c\u8c03\u8bd5\u652f\u6301\u7b49\u529f\u80fd\u3002\u8fd9\u662f\u4f7f\u7528ESP-IDF\u6700\u6d41\u884c\u7684\u65b9\u5f0f\u3002</p> </li> </ul> <ul> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011\uff5c\u4f7f\u7528\u4e00\u952e\u5b89\u88c5\u5de5\u5177\u5feb\u901f\u642d\u5efa ESP-IDF \u5f00\u53d1\u73af\u5883 (Windows) \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011\uff5c\u4f7f\u7528 VS Code \u5feb\u901f\u642d\u5efa ESP-IDF \u5f00\u53d1\u73af\u5883 (Windows\u3001Linux\u3001MacOS) \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>Recommended.</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/ESP32/ESP32/#_2","title":"\u5b98\u65b9\u6307\u5357","text":""},{"location":"zh/ESP32/ESP32/#_3","title":"\u5728\u7ebf\u6587\u6863","text":"<ul> <li> <p> ESP-IDF \u7f16\u7a0b\u6307\u5357 \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/ESP32/ESP32/#_4","title":"\u89c6\u9891\u6559\u7a0b","text":"<ul> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011| \u4e50\u946b\u7269\u8054\u7f51\u5f00\u53d1\u6846\u67b6 ESP-IDF \u5f00\u53d1\u5165\u95e8 \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011| \u4e50\u946b AIoT \u5f00\u53d1\u8d44\u6e90\u4e0e\u5e94\u7528\u8bb2\u89e3 \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011| \u57fa\u4e8e\u4e50\u946b ESP32-S3 \u7684 AIoT \u7f16\u7a0b\u5b9e\u6218 \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/ESP32/ESP32/#_5","title":"\u7b2c\u4e09\u65b9\u6559\u7a0b","text":"<ul> <li> <p> \u30102024\u6700\u65b0\u7248 ESP32\u6559\u7a0b\uff08\u57fa\u4e8eESP-IDF\uff09\u3011ESP32\u5165\u95e8\u7ea7\u5f00\u53d1\u8bfe\u7a0b \u66f4\u65b0\u4e2d \u4e2d\u6587\u5b57\u5e55 \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> \u5b64\u72ec\u7684\u4e8c\u8fdb\u5236 ESP-IDF \u6559\u7a0b \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> DURUOFU \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> LEARNEPS32 \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/ESP32/ESP32/#freertos","title":"FREERTOS","text":"<p>\u7531\u4e8eESP-IDF\u662f\u57fa\u4e8eFreeRTOS\u7684\uff0c\u56e0\u6b64\u5b66\u4e60FreeRTOS\u5bf9\u4e8e\u7406\u89e3ESP-IDF\u975e\u5e38\u91cd\u8981\u3002</p> <ul> <li> <p> ESP32_freeRTOS\u6559\u7a0b \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> \u5b64\u72ec\u7684\u4e8c\u8fdb\u5236 FREERTOS \u6559\u7a0b</p> <p>\u57fa\u4e8eArduinoIDE</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/FREERTOS/quickstart/#_1","title":"\u7b80\u4ecb","text":"<p>Info</p> <p>FreeRTOS \u662f\u4e00\u4e2a\u5c0f\u578b\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\uff0c\u5b83\u652f\u6301\u591a\u4efb\u52a1\u3001\u5b9a\u65f6\u5668\u3001\u4fe1\u53f7\u91cf\u3001\u961f\u5217\u3001\u4e92\u65a5\u9501\u7b49\u529f\u80fd\u3002FreeRTOS \u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u73b0\u5728\u7531Amazon Web Services\u7ef4\u62a4\u3002</p>"},{"location":"zh/FREERTOS/quickstart/#_2","title":"\u6838\u5fc3\u6982\u5ff5","text":"<p>without RTOS</p> <pre><code>while(1)\n{\n    task1();\n    task2();\n    task3();\n}\n</code></pre> <p>with RTOS</p> <pre><code>void task1(void *pvParameters)\n{\n    for(;;)\n    {\n        // task1 code\n    }\n}\n\nvoid task2(void *pvParameters)\n{\n    for(;;)\n    {\n        // task2 code\n    }\n}\n\nvoid task3(void *pvParameters)\n{\n    for(;;)\n    {\n        // task3 code\n    }\n}\n\nint main(void)\n{\n    xTaskCreate(task1, \"Task1\", 100, NULL, 1, NULL);\n    xTaskCreate(task2, \"Task2\", 100, NULL, 1, NULL);\n    xTaskCreate(task3, \"Task3\", 100, NULL, 1, NULL);\n    vTaskStartScheduler();\n    for(;;);\n}\n</code></pre> <p>Note</p> <p>\u4ece\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u6ca1\u6709RTOS\u7684\u60c5\u51b5\u4e0b\uff0c\u9762\u5bf9\u529f\u80fd\u5e9e\u6742\u7684\u9879\u76ee\uff0c\u4ee3\u7801\u4f1a\u53d8\u5f97\u975e\u5e38\u590d\u6742\uff0c\u800c\u4f7f\u7528RTOS\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4efb\u52a1\u5206\u89e3\u4e3a\u591a\u4e2a\u5b50\u4efb\u52a1\uff0c\u4f7f\u4ee3\u7801\u66f4\u52a0\u6e05\u6670\u3001\u6613\u4e8e\u7ef4\u62a4\u3002</p> <p>Note</p> <p>\u4efb\u52a1\u8fd0\u884c\u65f6\u95f4\u7247\u7684\u57fa\u672c\u5355\u4f4d\u662fTick\uff0cTick\u7684\u5468\u671f\u7531configTICK_RATE_HZ\u5b8f\u5b9a\u4e49\u51b3\u5b9a\uff0c\u5355\u4f4d\u662fHz\u3002</p>"},{"location":"zh/FREERTOS/quickstart/#_3","title":"\u4efb\u52a1","text":"<p>Info</p> <p>\u4f7f\u7528FREERTOS\u7684\u5b9e\u65f6\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u6784\u5efa\u6210\u4e00\u7ec4\u72ec\u7acb\u7684\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1\u5728\u81ea\u5df1\u7684\u4e0a\u4e0b\u6587\u4e2d\u8fd0\u884c\uff0c\u4e0d\u4f9d\u8d56\u4e8e\u7cfb\u7edf\u5185\u7684\u5176\u4ed6\u4efb\u52a1\u6216RTOS\u4efb\u52a1\u8c03\u5ea6\u5668\u672c\u8eab\u3002</p> <p>Note</p> <p>\u4efb\u52a1\u72b6\u6001\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a</p> <ul> <li> <p>\u8fd0\u884c\u6001\uff08Running\uff09</p> </li> <li> <p>\u5c31\u7eea\u6001\uff08Ready\uff09</p> </li> <li> <p>\u963b\u585e\u6001\uff08Blocked\uff09</p> </li> <li> <p>\u6302\u8d77\u6001\uff08Suspended\uff09</p> </li> </ul> <p>\u8fd0\u884c\u6001\uff08Running\uff09</p> <p>\u5f53\u4efb\u52a1\u5b9e\u9645\u6267\u884c\u7684\u65f6\u5019\uff0c\u5b83\u88ab\u79f0\u4e3a\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u3002\u5982\u679c\u8fd0\u884cRTOS\u7684\u5904\u7406\u5668\u53ea\u6709\u4e00\u4e2a\u5185\u6838\uff0c\u90a3\u4e48\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u3002</p> <p>\u5c31\u7eea\u6001\uff08Ready\uff09</p> <p>\u5f53\u4efb\u52a1\u5df2\u7ecf\u51c6\u5907\u597d\u8fd0\u884c\uff0c\u4f46\u662f\u7531\u4e8e\u5176\u4ed6\u4efb\u52a1\u6b63\u5728\u8fd0\u884c\uff0c\u6240\u4ee5\u5b83\u8fd8\u6ca1\u6709\u5f97\u5230\u6267\u884c\u7684\u673a\u4f1a\uff0c\u8fd9\u79cd\u72b6\u6001\u88ab\u79f0\u4e3a\u5c31\u7eea\u72b6\u6001\u3002</p> <p>\u963b\u585e\u6001\uff08Blocked\uff09</p> <p>\u5f53\u4efb\u52a1\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u800c\u4e0d\u80fd\u8fd0\u884c\u65f6\uff0c\u5b83\u88ab\u79f0\u4e3a\u963b\u585e\u72b6\u6001\u3002\u4efb\u52a1\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7b49\u5f85\u4e8b\u4ef6\u3001\u7b49\u5f85\u4fe1\u53f7\u91cf\u3001\u7b49\u5f85\u6d88\u606f\u961f\u5217\u7b49\u539f\u56e0\u800c\u88ab\u963b\u585e\u3002\u901a\u5e38\u4e00\u4e2a\u5904\u4e8e\u963b\u585e\u72b6\u6001\u7684\u4efb\u52a1\u90fd\u6709\u4e00\u4e2a\u8d85\u65f6\u65f6\u95f4\uff0c\u5f53\u8d85\u65f6\u65f6\u95f4\u5230\u8fbe\u65f6\uff0c\u4efb\u52a1\u4f1a\u88ab\u5524\u9192\u3002</p> <p>\u6302\u8d77\u6001\uff08Suspended\uff09</p> <p>\u4e0e\u963b\u585e\u72b6\u6001\u7684\u4efb\u52a1\u4e00\u6837\uff0c\u6302\u8d77\u72b6\u6001\u7684\u4efb\u52a1\u4e0d\u80fd\u8fdb\u5165\u8fd0\u884c\u72b6\u6001\u3002\u4f46\u662f\uff0c\u4e0e\u963b\u585e\u72b6\u6001\u7684\u4efb\u52a1\u4e0d\u540c\u7684\u662f\uff0c\u6302\u8d77\u72b6\u6001\u7684\u4efb\u52a1\u4e0d\u4f1a\u88ab\u5524\u9192\uff0c\u76f4\u5230\u5b83\u88ab\u663e\u5f0f\u5730\u6062\u590d\u3002\u53ea\u6709\u901a\u8fc7API\u547d\u4ee4\u660e\u786e\u6302\u8d77\u548c\u6062\u590d\uff0c\u4efb\u52a1\u624d\u4f1a\u8fdb\u5165\u6216\u8005\u9000\u51fa\u6302\u8d77\u72b6\u6001\u3002</p>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/","title":"ESP32 \u5f00\u53d1\u73af\u5883\u8bbe\u7f6e","text":"<p>Tip</p> <p>\u5728\u7ee7\u7eed\u4e4b\u524d\uff0c\u5f3a\u70c8\u5efa\u8bae\u60a8\u9605\u8bfb\u5b98\u65b9\u6307\u5357\u4ee5\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\u3002\u5b98\u65b9\u6307\u5357\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002</p> <p>Note</p> <p>\u5982\u9700\u5728 ESP32 \u4e0a\u4f7f\u7528 ESP-IDF\uff0c\u8bf7\u5b89\u88c5\u4ee5\u4e0b\u8f6f\u4ef6\uff1a</p> <ul> <li> <p>\u8bbe\u7f6e\u5de5\u5177\u94fe\uff0c\u7528\u4e8e\u7f16\u8bd1 ESP32 \u4ee3\u7801\uff1b</p> </li> <li> <p>\u7f16\u8bd1\u6784\u5efa\u5de5\u5177 \u2014\u2014 CMake\u548cNinja\u7f16\u8bd1\u6784\u5efa\u5de5\u5177\uff0c\u7528\u4e8e\u7f16\u8bd1ESP32\u5e94\u7528\u7a0b\u5e8f\uff1b</p> </li> <li> <p>\u83b7\u53d6ESP-IDF\u8f6f\u4ef6\u5f00\u53d1\u6846\u67b6\u3002\u8be5\u6846\u67b6\u5df2\u7ecf\u57fa\u672c\u5305\u542bESP32\u4f7f\u7528\u7684API\uff08\u8f6f\u4ef6\u5e93\u548c\u6e90\u4ee3\u7801\uff09\u548c\u8fd0\u884c\u5de5\u5177\u94fe\u7684\u811a\u672c\uff1b</p> </li> </ul> <p></p> <p>Note</p> <p>\u6709\u4e24\u79cd ESP32 ESP-IDF \u7f16\u7a0b\u65b9\u5f0f\uff1a</p> <ul> <li> <p>\u547d\u4ee4\u884c\u754c\u9762\uff08CLI\uff09\uff1aESP-IDF \u7f16\u7a0b\u7684\u57fa\u7840\uff1b</p> </li> <li> <p>\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08IDE\uff09\uff1a\u9002\u5408\u521d\u5b66\u8005\u3002</p> </li> </ul>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#cli","title":"CLI","text":"<ul> <li> <p> How to Install the ESP-IDF Toolchain on Windows (CLI)</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#ide","title":"IDE","text":"<ul> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011\uff5c\u4f7f\u7528\u4e00\u952e\u5b89\u88c5\u5de5\u5177\u5feb\u901f\u642d\u5efa ESP-IDF \u5f00\u53d1\u73af\u5883 (Windows) \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#linux","title":"LINUX","text":"<p>Tip</p> <p>ESP-IDF \u5728 Linux \u4e0a\u6bd4\u5728 Windows \u4e0a\u5feb\u5f97\u591a\u3002\u5efa\u8bae\u4f7f\u7528 Linux \u8fdb\u884c ESP-IDF \u5f00\u53d1\u3002</p>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#cli_1","title":"CLI \ud83c\udfaf","text":"<p>Note</p> <p>\u4e00\u5171\u6709\u4e94\u4e2a\u6b65\u9aa4\uff1a</p> <ul> <li> <p>\u7b2c\u4e00\u6b65\uff1a\u5b89\u88c5\u51c6\u5907</p> </li> <li> <p>\u7b2c\u4e8c\u6b65\uff1a\u83b7\u53d6ESP-IDF</p> </li> <li> <p>\u7b2c\u4e09\u6b65\uff1a\u8bbe\u7f6e\u5de5\u5177</p> </li> <li> <p>\u7b2c\u56db\u6b65\uff1a\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf</p> </li> <li> <p>\u7b2c\u4e94\u6b65\uff1a\u5f00\u59cb\u4f7f\u7528</p> </li> </ul>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#-","title":"\u7b2c\u4e00\u6b65 - \u5b89\u88c5\u51c6\u5907","text":"<ul> <li>UBUNTU &amp; DEBIAN</li> </ul> <pre><code>sudo apt-get install git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0\n</code></pre> <ul> <li>CENTOS</li> </ul> <pre><code>sudo yum -y update &amp;&amp; sudo yum install git wget flex bison gperf python3 python3-setuptools cmake ninja-build ccache dfu-util libusbx\n</code></pre>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#-esp-idf","title":"\u7b2c\u4e8c\u6b65 - \u83b7\u53d6 ESP-IDF","text":"<p>\u5728\u56f4\u7ed5 ESP32 \u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\uff0c\u8bf7\u5148\u83b7\u53d6\u4e50\u946b\u63d0\u4f9b\u7684\u8f6f\u4ef6\u5e93\u6587\u4ef6 ESP-IDF \u4ed3\u5e93\u3002</p> <p>\u83b7\u53d6 ESP-IDF \u7684\u672c\u5730\u526f\u672c\uff1a\u6253\u5f00\u7ec8\u7aef\uff0c\u5207\u6362\u5230\u8981\u4fdd\u5b58 ESP-IDF \u7684\u5de5\u4f5c\u76ee\u5f55\uff0c\u4f7f\u7528 git clone \u547d\u4ee4\u514b\u9686\u8fdc\u7a0b\u4ed3\u5e93\u3002\u9488\u5bf9\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u7684\u8be6\u7ec6\u6b65\u9aa4\uff0c\u8bf7\u89c1\u4e0b\u6587\u3002</p> <p>\u6253\u5f00\u7ec8\u7aef\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <p><pre><code>mkdir -p ~/esp\ncd ~/esp\ngit clone --recursive https://github.com/espressif/esp-idf.git\n</code></pre> ESP-IDF \u5c06\u4e0b\u8f7d\u81f3 <code>~/esp/esp-idf</code>\u3002</p> <p>\u8bf7\u524d\u5f80ESP-IDF \u7248\u672c\u7b80\u4ecb\uff0c\u67e5\u770b ESP-IDF \u4e0d\u540c\u7248\u672c\u7684\u5177\u4f53\u9002\u7528\u573a\u666f\u3002</p>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#-_1","title":"\u7b2c\u4e09\u6b65 - \u8bbe\u7f6e\u5de5\u5177","text":"<p>\u9664\u4e86 ESP-IDF \u672c\u8eab\uff0c\u8fd8\u9700\u8981\u4e3a\u652f\u6301 ESP32 \u7684\u9879\u76ee\u5b89\u88c5 ESP-IDF \u4f7f\u7528\u7684\u5404\u79cd\u5de5\u5177\uff0c\u6bd4\u5982\u7f16\u8bd1\u5668\u3001\u8c03\u8bd5\u5668\u3001Python \u5305\u7b49\u3002</p> <pre><code>cd ~/esp/esp-idf\n./install.sh all\n</code></pre>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#-_2","title":"\u7b2c\u56db\u6b65 - \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf","text":"<p>\u6b64\u65f6\uff0c\u521a\u521a\u5b89\u88c5\u7684\u5de5\u5177\u5c1a\u672a\u6dfb\u52a0\u81f3 PATH \u73af\u5883\u53d8\u91cf\uff0c\u65e0\u6cd5\u901a\u8fc7\u201c\u547d\u4ee4\u7a97\u53e3\u201d\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u3002\u56e0\u6b64\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7 ESP-IDF \u63d0\u4f9b\u7684\u53e6\u4e00\u4e2a\u811a\u672c\u8fdb\u884c\u8bbe\u7f6e\u3002</p> <p>\u8bf7\u5728\u9700\u8981\u8fd0\u884c ESP-IDF \u7684\u7ec8\u7aef\u7a97\u53e3\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>. $HOME/esp/esp-idf/export.sh\n</code></pre> <p>\u5982\u679c\u9700\u8981\u7ecf\u5e38\u8fd0\u884c ESP-IDF\uff0c\u53ef\u4ee5\u4e3a\u6267\u884c export.sh \u521b\u5efa\u4e00\u4e2a\u522b\u540d\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <p>(1) \u6253\u5f00 shell \u914d\u7f6e\u6587\u4ef6</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>(2) \u590d\u5236\u5e76\u7c98\u8d34\u4ee5\u4e0b\u547d\u4ee4\u5230 shell \u914d\u7f6e\u6587\u4ef6\u4e2d</p> <pre><code>alias get_idf='. $HOME/esp/esp-idf/export.sh'\n</code></pre> <p>(3) \u901a\u8fc7\u91cd\u542f\u7ec8\u7aef\u7a97\u53e3\u6216\u8fd0\u884c <code>source [path to profile]</code>\uff0c\u5982 <code>source ~/.bashrc</code> \u6765\u5237\u65b0\u914d\u7f6e\u6587\u4ef6\u3002</p> <p>\u73b0\u5728\u53ef\u4ee5\u5728\u4efb\u4f55\u7ec8\u7aef\u7a97\u53e3\u4e2d\u8fd0\u884c <code>get_idf</code> \u6765\u8bbe\u7f6e\u6216\u5237\u65b0 ESP-IDF \u73af\u5883\u3002</p> <p>\u4e0d\u5efa\u8bae\u76f4\u63a5\u5c06 <code>export.sh</code> \u6dfb\u52a0\u5230 shell \u7684\u914d\u7f6e\u6587\u4ef6\u3002\u8fd9\u6837\u505a\u4f1a\u5bfc\u81f4\u5728\u6bcf\u4e2a\u7ec8\u7aef\u4f1a\u8bdd\u4e2d\u90fd\u6fc0\u6d3b IDF \u865a\u62df\u73af\u5883\uff08\u5305\u62ec\u65e0\u9700\u4f7f\u7528 ESP-IDF \u7684\u4f1a\u8bdd\uff09\u3002\u8fd9\u8fdd\u80cc\u4e86\u4f7f\u7528\u865a\u62df\u73af\u5883\u7684\u76ee\u7684\uff0c\u8fd8\u53ef\u80fd\u5f71\u54cd\u5176\u4ed6\u8f6f\u4ef6\u7684\u4f7f\u7528\u3002</p>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#-_3","title":"\u7b2c\u4e94\u6b65 - \u5f00\u59cb\u4f7f\u7528","text":"<p>\u8bf7\u53c2\u8003\u5176\u4ed6\u6559\u7a0b\uff0c\u5f00\u59cb\u4f7f\u7528 ESP-IDF\u3002</p>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#ide_1","title":"IDE","text":"<ul> <li> <p> \u3010\u4e50\u946b\u6559\u7a0b\u3011\uff5c\u4f7f\u7528 VS Code \u5feb\u901f\u642d\u5efa ESP-IDF \u5f00\u53d1\u73af\u5883 (Windows\u3001Linux\u3001MacOS) \ud83c\udfaf\ud83c\udfc6\u2705</p> <p>Recommended.</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#esp-idf","title":"\u5378\u8f7dESP-IDF","text":"<p>(1) \u5220\u9664 ESP-IDF \u6587\u4ef6\u5939</p> <p>\u9996\u5148\uff0c\u627e\u5230\u5b89\u88c5 ESP-IDF \u7684\u76ee\u5f55\uff08\u901a\u5e38\u5728 <code>~/esp/esp-idf</code>\uff09\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5220\u9664\u8be5\u76ee\u5f55\uff1a</p> <pre><code>rm -rf ~/esp/esp-idf\n</code></pre> <p>(2) \u5220\u9664\u5de5\u5177\u94fe</p> <p>ESP-IDF \u7684 install.sh \u811a\u672c\u4f1a\u4e0b\u8f7d\u5e76\u5b89\u88c5\u4e00\u4e9b\u5de5\u5177\u94fe\u548c\u4f9d\u8d56\uff0c\u901a\u5e38\u4f4d\u4e8e <code>~/.espressif</code> \u76ee\u5f55\u3002\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5220\u9664\u8be5\u76ee\u5f55\uff1a</p> <pre><code>rm -rf ~/.espressif\n</code></pre> <p>(3) \u5220\u9664\u73af\u5883\u53d8\u91cf \u5982\u679c\u4f60\u5728 shell \u914d\u7f6e\u6587\u4ef6\uff08\u4f8b\u5982 <code>~/.bashrc</code> \u6216 <code>~/.zshrc</code>\uff09\u4e2d\u6dfb\u52a0\u4e86\u7528\u4e8e\u5feb\u901f\u52a0\u8f7d ESP-IDF \u73af\u5883\u53d8\u91cf\u7684\u522b\u540d\uff08\u5982 <code>get_idf</code>\uff09\uff0c\u5219\u9700\u8981\u7f16\u8f91\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u5e76\u5220\u9664\u8be5\u522b\u540d\u3002\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u6253\u5f00\u5e76\u7f16\u8f91\u6587\u4ef6</p> <pre><code>nano ~/.bashrc\n</code></pre> <p>(4) \u5237\u65b0\u914d\u7f6e\u6587\u4ef6</p> <p>\u6700\u540e\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u4f7f\u66f4\u6539\u751f\u6548\uff1a</p> <pre><code>source ~/.bashrc\n</code></pre>"},{"location":"zh/GET_STARTED/ENVIRONMENT/environment/#vscode-esp-idf","title":"VSCode ESP-IDF\u63d2\u4ef6","text":"<p>Note</p> <p>\u8fd9\u662f\u5f53\u524d\u6700\u6d41\u884c\u7684ESP-IDF\u5f00\u53d1\u65b9\u5f0f\u4e4b\u4e00\u3002VSCode\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u4ee3\u7801\u7f16\u8f91\u5668\uff0c\u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u5305\u62ecC/C++\u3002ESP-IDF\u63d2\u4ef6\u4e3aVSCode\u63d0\u4f9b\u4e86\u5bf9ESP-IDF\u7684\u5b8c\u6574\u652f\u6301\uff0c\u5305\u62ec\u4ee3\u7801\u81ea\u52a8\u5b8c\u6210\u3001\u8c03\u8bd5\u3001\u6784\u5efa\u548c\u70e7\u5f55\u7b49\u529f\u80fd\u3002</p> <ol> <li> <p>\u5b89\u88c5VSCode</p> <p>\u9996\u5148\uff0c\u4f60\u9700\u8981\u5b89\u88c5VSCode\u3002\u4f60\u53ef\u4ee5\u4ece\u8fd9\u91cc\u4e0b\u8f7d\u9002\u7528\u4e8e\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b89\u88c5\u7a0b\u5e8f\u3002</p> </li> <li> <p>\u5b89\u88c5ESP-IDF\u63d2\u4ef6</p> <p>\u5b89\u88c5ESP-IDF\u63d2\u4ef6\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ul> <li>\u6253\u5f00VSCode\u3002</li> <li>\u70b9\u51fb\u5de6\u4fa7\u7684\u6269\u5c55\u56fe\u6807\u3002</li> <li>\u5728\u641c\u7d22\u6846\u4e2d\u8f93\u5165\u201cESP-IDF\u201d\u3002</li> <li>\u70b9\u51fb\u201c\u5b89\u88c5\u201d\u6309\u94ae\u3002</li> </ul> </li> <li> <p>\u914d\u7f6eESP-IDF\u8def\u5f84 \u548c ESP-IDF tools\u8def\u5f84</p> <p>\u5b89\u88c5ESP-IDF\u63d2\u4ef6\u540e\uff0c\u4f60\u9700\u8981\u914d\u7f6eESP-IDF\u8def\u5f84\u548cESP-IDF tools\u8def\u5f84\u3002\u8fd9\u4e9b\u8def\u5f84\u544a\u8bc9\u63d2\u4ef6\u5728\u54ea\u91cc\u627e\u5230ESP-IDF\u548c\u76f8\u5173\u5de5\u5177\u3002</p> <ul> <li>\u6253\u5f00VSCode\u3002</li> <li>\u70b9\u51fb\u5de6\u4e0b\u89d2\u7684\u201c\u8bbe\u7f6e\u201d\u56fe\u6807\u3002</li> <li>\u5728\u641c\u7d22\u6846\u4e2d\u8f93\u5165\u201cESP-IDF\u201d\u3002</li> <li>\u5728\u201cESP-IDF\u8def\u5f84\u201d\u548c\u201cESP-IDF tools\u8def\u5f84\u201d\u5b57\u6bb5\u4e2d\u8f93\u5165ESP-IDF\u548cESP-IDF tools\u7684\u8def\u5f84\u3002\uff08\u5982\u679c\u7535\u8111\u4e0a\u6ca1\u6709\uff0c\u8bbe\u7f6e\u597d\u8def\u5f84\uff0c\u63d2\u4ef6\u4f1a\u81ea\u52a8\u4e0b\u8f7d\uff09</li> <li>\u4fdd\u5b58\u8bbe\u7f6e\u3002</li> </ul> </li> <li> <p>\u521b\u5efa\u65b0\u9879\u76ee</p> </li> </ol>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/","title":"\u4e0a\u624b\u5b9e\u8df5","text":""},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_2","title":"\u7a0b\u5e8f\u51c6\u5907","text":"<p>\u8fd9\u91cc\u6211\u4eec\u627e\u4e00\u4e2a\u5408\u9002\u7684\u8def\u5f84\uff0c\u4e0b\u8f7d\u4e00\u4e9b\u6848\u4f8b\u7a0b\u5e8f\uff1a</p> <pre><code>git clone --recursive https://gitee.com/vi-iot/esp32-board.git\n</code></pre>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_3","title":"\u786c\u4ef6\u51c6\u5907","text":"<p>\u5c06ESP32\u5f00\u53d1\u677f\u4e0e\u7535\u8111\u8fde\u63a5</p>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_4","title":"\u9009\u5b9a\u6848\u4f8b\u7a0b\u5e8f","text":"<p>\u8fdb\u5165\u6211\u4eec\u521a\u521a\u4e0b\u8f7d\u7684\u4ed3\u5e93esp32-board\uff0c\u627e\u5230\u4e00\u4e2a\u6848\u4f8b\u7a0b\u5e8f\uff0c\u6bd4\u5982<code>helloworld</code>\uff0c\u8fdb\u5165\u8be5\u76ee\u5f55\uff1a</p> <pre><code>cd esp32-board\ncd helloworld\n</code></pre>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_5","title":"\u8bbe\u5b9a\u5f00\u53d1\u677f\u7c7b\u578b","text":"<p>\u5982\u679c\u662f\u4e00\u822c\u7684esp32\u5f00\u53d1\u677f\uff0c\u8fd9\u4e00\u6b65\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u7ba1\uff0c\u4f46\u662f\u5982\u679c\u662f\u5176\u4ed6\u5f00\u53d1\u677f\uff0c\u6700\u597d\u6307\u5b9a\u4e00\u4e0b\u5f00\u53d1\u677f\u7c7b\u578b\uff0c\u6bd4\u5982esp32-s3\uff1a</p> <pre><code>idf.py set-target esp32s3\n</code></pre>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_6","title":"\u7f16\u8bd1\u7a0b\u5e8f","text":"<pre><code>idf.py build\n</code></pre>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_7","title":"\u70e7\u5f55\u7a0b\u5e8f","text":"<p><pre><code>idf.py flash\n</code></pre> \u6ce8\u610f\uff0c\u53ef\u4ee5\u67e5\u770b\u8bbe\u5907\u6240\u5728usb\u7aef\u53e3\uff1a</p> <pre><code>ls /dev/tty*\n</code></pre> <p>\u901a\u8fc7\u94fe\u63a5/\u975e\u94fe\u63a5\u5bf9\u6bd4\uff0c\u627e\u5230\u8bbe\u5907\u6240\u5728\u7aef\u53e3\uff0c\u6bd4\u5982<code>/dev/ttyACM1</code>\uff0c\u7136\u540e\u70e7\u5f55\u7a0b\u5e8f\uff1a</p> <pre><code>idf.py -p /dev/ttyACM1 flash\n</code></pre>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_8","title":"\u76d1\u6d4b\u7a0b\u5e8f\u8fd0\u884c","text":"<pre><code>idf.py monitor\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u6307\u5b9a\u7aef\u53e3\uff1a</p> <pre><code>idf.py -p /dev/ttyACM1 monitor\n</code></pre>"},{"location":"zh/GET_STARTED/HANDS-ON/hands-on/#_9","title":"\u9000\u51fa\u76d1\u6d4b","text":"<p>\u6309\u4e0b<code>Ctrl</code> + <code>]</code>\u5373\u53ef\u9000\u51fa\u76d1\u6d4b\u3002</p>"},{"location":"zh/GET_STARTED/HARDWARE/hardware/","title":"\u786c\u4ef6\u5e73\u53f0","text":"<p>Info</p> <p>\u672c\u6587\u6863\u4f7f\u7528\u7684\u786c\u4ef6\u5e73\u53f0\u4e3a\u6b63\u70b9\u539f\u5b50\u7684DNESP32S3M,\u57fa\u4e8eESP32-S3\uff0c\u5982\u4e0a\u56fe\u6240\u793a\u3002\u76f8\u5173\u7a0b\u5e8f\u8fc1\u79fb\u5230\u5176\u4ed6\u5f00\u53d1\u677f\u5e94\u8be5\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8fdb\u884c\u9002\u914d\u3002</p> <p>Info</p> <p>ESP32-S3 SoC \u82af\u7247\u652f\u6301\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ul> <li> <p>2.4 GHz Wi-Fi</p> </li> <li> <p>\u4f4e\u529f\u8017\u84dd\u7259</p> </li> <li> <p>\u9ad8\u6027\u80fd Xtensa\u00ae 32 \u4f4d LX7 \u53cc\u6838\u5904\u7406\u5668</p> </li> <li> <p>\u8fd0\u884c RISC-V \u6216 FSM \u5185\u6838\u7684\u8d85\u4f4e\u529f\u8017\u534f\u5904\u7406\u5668</p> </li> <li> <p>\u591a\u79cd\u5916\u8bbe</p> </li> <li> <p>\u5185\u7f6e\u5b89\u5168\u786c\u4ef6</p> </li> <li> <p>USB OTG \u63a5\u53e3</p> </li> <li> <p>USB \u4e32\u53e3/JTAG \u63a7\u5236\u5668</p> </li> </ul> <p>ESP32-S3 \u91c7\u7528 40 nm \u5de5\u827a\u5236\u6210\uff0c\u5177\u6709\u6700\u4f73\u7684\u529f\u8017\u6027\u80fd\u3001\u5c04\u9891\u6027\u80fd\u3001\u7a33\u5b9a\u6027\u3001\u901a\u7528\u6027\u548c\u53ef\u9760\u6027\uff0c\u9002\u7528\u4e8e\u5404\u79cd\u5e94\u7528\u573a\u666f\u548c\u4e0d\u540c\u529f  \u8017\u9700\u6c42\u3002</p> <p>\u4e50\u946b\u4e3a\u7528\u6237\u63d0\u4f9b\u5b8c\u6574\u7684\u8f6f\u3001\u786c\u4ef6\u8d44\u6e90\uff0c\u8fdb\u884c ESP32-S3 \u786c\u4ef6\u8bbe\u5907\u7684\u5f00\u53d1\u3002\u5176\u4e2d\uff0c\u4e50\u946b\u7684\u8f6f\u4ef6\u5f00\u53d1\u73af\u5883 ESP-IDF \u65e8\u5728\u534f\u52a9\u7528\u6237\u5feb \u901f\u5f00\u53d1\u7269\u8054\u7f51 (IoT) \u5e94\u7528\uff0c\u53ef\u6ee1\u8db3\u7528\u6237\u5bf9 Wi-Fi\u3001\u84dd\u7259\u3001\u4f4e\u529f\u8017\u7b49\u65b9\u9762\u7684\u8981\u6c42\u3002</p> <p>Note</p> <p>\u5f00\u59cb\u7f16\u7a0b\u524d\uff0c\u60a8\u9700\u8981\uff1a - \u4e00\u53f0\u5e26\u6709 USB \u7aef\u53e3\u7684\u8ba1\u7b97\u673a - \u4e00\u6839 USB \u6570\u636e\u7ebf - \u4e00\u5757 DNESP32S3M \u5f00\u53d1\u677f\u6216\u5176\u4ed6 ESP32 \u5f00\u53d1\u677f</p>"},{"location":"zh/GET_STARTED/TEMPLATE/template/","title":"\u6a21\u677f\u9879\u76ee\u642d\u5efa","text":""},{"location":"zh/GET_STARTED/TEMPLATE/template/#_2","title":"\u73af\u5883\u51c6\u5907","text":"<p>Info</p> <p>\u6211\u4eec\u4f7f\u7528 VSCode + ESP-IDF \u8fdb\u884c\u5f00\u53d1\u3002\u6709\u5173\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\u7684\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728\u4e92\u8054\u7f51\u4e0a\u627e\u5230\u3002\u6211\u5047\u8bbe\u60a8\u5df2\u7ecf\u8bbe\u7f6e\u597d\u4e86\u5f00\u53d1\u73af\u5883\u3002</p>"},{"location":"zh/GET_STARTED/TEMPLATE/template/#_3","title":"\u521b\u5efa\u65b0\u9879\u76ee","text":"<ol> <li>\u542f\u52a8 VSCode\uff0c\u7136\u540e\u901a\u8fc7\u6309 <code>Ctrl+Shift+P</code>\uff08Windows/Linux\uff09\u6216 <code>Cmd+Shift+P</code>\uff08macOS\uff09\u6253\u5f00\u547d\u4ee4\u9762\u677f\u3002</li> <li>\u8f93\u5165 <code>ESP-IDF: New Project</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>\u8fdb\u5165\u9879\u76ee\u914d\u7f6e UI \u5e76\u586b\u5199\u6240\u9700\u4fe1\u606f\u3002 </li> <li>\u9009\u62e9\u4e00\u4e2a\u6a21\u677f\u6765\u521b\u5efa\u65b0\u9879\u76ee\u3002 </li> <li>\u5728\u65b0\u7a97\u53e3\u4e2d\u6253\u5f00\u3002  </li> </ol>"},{"location":"zh/GET_STARTED/TEMPLATE/template/#_4","title":"\u6a21\u677f\u5316\u9879\u76ee\u7ed3\u6784","text":"<pre><code>sample_proj/ # \u9879\u76ee\u6839\u76ee\u5f55\n\u251c\u2500\u2500 CMakeLists.txt # \u9879\u76ee CMake \u914d\u7f6e\u6587\u4ef6\n\u251c\u2500\u2500 main/ # \u4e3b\u5e94\u7528\u7a0b\u5e8f\u76ee\u5f55\n\u2502   \u251c\u2500\u2500 CMakeLists.txt # \u5e94\u7528\u7a0b\u5e8f CMake \u914d\u7f6e\u6587\u4ef6\n\u2502   \u2514\u2500\u2500 main.c # \u5e94\u7528\u7a0b\u5e8f\u6e90\u6587\u4ef6\n\u2514\u2500\u2500 sdkconfig # \u9879\u76ee\u914d\u7f6e\u6587\u4ef6\n</code></pre>"},{"location":"zh/GET_STARTED/TEMPLATE/template/#_5","title":"\u9879\u76ee\u914d\u7f6e","text":"<p>Note</p> <p>\u8fd9\u4e00\u6b65\u662f\u4e3a\u4e86\u914d\u7f6e\u9879\u76ee\u8bbe\u7f6e\u4ee5\u6700\u5927\u5316\u786c\u4ef6\u7684\u6027\u80fd\uff0c\u5373\u4f7f\u7528\u7279\u5b9a\u4e8e\u76ee\u6807\u7684\u914d\u7f6e\u800c\u4e0d\u662f\u9ed8\u8ba4\u914d\u7f6e\u3002</p> <p>Warning</p> <p>\u5728\u6253\u5f00\u9879\u76ee\u914d\u7f6e UI \u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u5728 VSCode \u4e2d\u6253\u5f00\u4e86\u9879\u76ee\uff0c\u5c06\u76ee\u6807\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u677f\u5b50\uff0c\u5e76\u5b89\u88c5\u4e86 ESP-IDF \u6269\u5c55\u3002</p> <ol> <li>\u901a\u8fc7\u6309 <code>Ctrl+Shift+P</code>\uff08Windows/Linux\uff09\u6216 <code>Cmd+Shift+P</code>\uff08macOS\uff09\u5e76\u8f93\u5165 <code>ESP-IDF: Configure Project</code> \u8fdb\u5165\u9879\u76ee\u914d\u7f6e UI\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u70b9\u51fb VSCode \u7a97\u53e3\u5e95\u90e8\u83dc\u5355\u7684\u9f7f\u8f6e\u56fe\u6807\u3002 </li> <li>'FLASH' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>flash</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>'Partition Table' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>partition</code> \u5e76\u6309 <code>Enter</code>\u3002  \u8be6\u7ec6\u4fe1\u606f\u7a0d\u540e\u63d0\u4f9b</li> <li>'PSRAM' \u914d\u7f6e\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>psram</code> \u5e76\u6309 <code>Enter</code>\u3002 </li> <li>\u66f4\u6539 CPU \u9891\u7387\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>cpu</code> \u5e76\u6309 <code>Enter</code>\u3002\u5c06 CPU \u9891\u7387\u4fee\u6539\u4e3a 240 MHz\u3002 </li> <li>\u4fee\u6539 FreeRTOS tick \u65f6\u949f\u9891\u7387\u3002\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165 <code>tick</code> \u5e76\u6309 <code>Enter</code>\u3002\u5c06\u9891\u7387\u4fee\u6539\u4e3a 1000\u3002 </li> <li>\u4fee\u6539\u5206\u533a\u8868\u3002\u5728\u547d\u4ee4\u9762\u677f\u4e2d\u8f93\u5165 <code>ESP-IDF: Open Partition Table Editor UI</code>\u3002 </li> <li>\u4fee\u6539\u5206\u533a\u8868\u5982\u4e0b\u6240\u793a\u3002 </li> <li>\u4fdd\u5b58\u6240\u6709\u4fee\u6539\u3002</li> </ol> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u9879\u76ee\u521d\u59cb\u5316\u3002\u914d\u7f6e\u4fe1\u606f\u73b0\u5728\u4e0e\u786c\u4ef6\u677f\u4e0a\u8d44\u6e90\u4e00\u81f4\u3002</p>"},{"location":"zh/GET_STARTED/TEMPLATE/template/#_6","title":"\u6a21\u677f\u7a0b\u5e8f","text":"<p>\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u6765\u6d4b\u8bd5\u677f\u5b50\u3002</p> <p>\u8f6c\u5230 main.c \u6587\u4ef6\u5e76\u7528\u4ee5\u4e0b\u4ee3\u7801\u66ff\u6362\u5185\u5bb9\uff1a</p> <pre><code>#include \"freertos/FreeRTOS.h\"\n#include \"freertos/task.h\"\n#include \"nvs_flash.h\"\n#include \"esp_system.h\"\n#include \"esp_chip_info.h\"\n#include \"esp_psram.h\"\n#include \"esp_flash.h\"\n\n/**\n * @brief Entry point of the program\n * @param None\n * @retval None\n */\nvoid app_main(void)\n{\n    esp_err_t ret;\n    uint32_t flash_size;\n    esp_chip_info_t chip_info;\n\n    // Initialize NVS\n    ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)\n    {\n        ESP_ERROR_CHECK(nvs_flash_erase()); // Erase if needed\n        ret = nvs_flash_init();\n    }\n\n    // Get FLASH size\n    esp_flash_get_size(NULL, &amp;flash_size);\n    esp_chip_info(&amp;chip_info);\n\n    // Display CPU core count\n    printf(\"CPU Cores: %d\\n\", chip_info.cores);\n\n    // Display FLASH size\n    printf(\"Flash size: %ld MB flash\\n\", flash_size / (1024 * 1024));\n\n    // Display PSRAM size\n    printf(\"PSRAM size: %d bytes\\n\", esp_psram_get_size());\n\n    while (1)\n    {\n        printf(\"Hello-ESP32\\r\\n\");\n        vTaskDelay(1000);\n    }\n}\n</code></pre> <p>\u7136\u540e\uff0c\u786e\u4fdd\u4e32\u53e3\u6b63\u786e\uff0c\u677f\u5b50\u8bbe\u7f6e\u6b63\u786e\uff0c\u7136\u540e\u7f16\u8bd1\u5e76\u70e7\u5f55\u7a0b\u5e8f\u3002\u7136\u540e\uff0c\u4f60\u5e94\u8be5\u4f1a\u770b\u5230\u4e32\u53e3\u8f93\u51fa\u663e\u793a\u5f00\u53d1\u677f\u4fe1\u606f\u548c <code>Hello-ESP32</code> \u6d88\u606f\u3002</p>"},{"location":"zh/GET_STARTED/TEMPLATE/template/#_7","title":"\u7ed3\u8bba","text":"<p>Note</p> <p>\u8fd9\u4e2a\u9879\u76ee\u5bf9DNESP32S3M\u6700\u5c0f\u7cfb\u7edf\u677f\u8fdb\u884c\u4e86\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u53ef\u4ee5\u4e3a\u540e\u7eed\u5f00\u53d1\u63d0\u4f9b\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u6a21\u677f\u3002\u76f8\u6bd4\u8f83\u4e0eSTM32\uff0cESP32\u7684\u5f00\u53d1\u9690\u85cf\u4e86\u8bb8\u591a\u7ec6\u8282\uff0c\u540c\u65f6\u4e5f\u4f7f\u5f97\u8bbe\u7f6e\u6d41\u7a0b\u66f4\u52a0\u7b80\u5355\u3002</p>"},{"location":"zh/TUTORIAL_STUDY/morningcore/","title":"\u5bb8\u82af\u7269\u8054\u6559\u7a0b\u7cfb\u5217","text":"<p>Note</p> <p>\u8be5\u6559\u7a0b\u7cfb\u5217\u662f\u5bb8\u82af\u7269\u8054ESP32\u7cfb\u5217\u5f00\u53d1\u677f\u7684\u4f7f\u7528\u6559\u7a0b\uff0c\u4e3b\u8981\u9762\u5411\u521d\u5b66\u8005\uff0c\u5e2e\u52a9\u521d\u5b66\u8005\u5feb\u901f\u4e0a\u624b\u5bb8\u82af\u7269\u8054ESP32\u7cfb\u5217\u5f00\u53d1\u677f\u3002\u76f8\u5173\u6559\u7a0b\u89c6\u9891\u548c\u4f8b\u7a0b\u4ed3\u5e93\u5982\u4e0b\uff1a</p> <ul> <li> <p> \u30102024\u6700\u65b0\u7248 ESP32\u6559\u7a0b\uff08\u57fa\u4e8eESP-IDF\uff09\u3011ESP32\u5165\u95e8\u7ea7\u5f00\u53d1\u8bfe\u7a0b \u66f4\u65b0\u4e2d \u4e2d\u6587\u5b57\u5e55 \ud83c\udfaf\ud83c\udfc6</p> <p>  \u4f20\u9001\u95e8 </p> </li> <li> <p> esp32-board</p> <p>\u4f8b\u7a0b\u4ed3\u5e93</p> <p>  \u4f20\u9001\u95e8 </p> </li> </ul>"},{"location":"zh/TUTORIAL_STUDY/01-helloworld/helloworld/#_1","title":"\u51c6\u5907\u9879\u76ee","text":"<p>\u590d\u5236\u6a21\u677f\u9879\u76ee\u5230\u5de5\u4f5c\u76ee\u5f55</p>"},{"location":"zh/TUTORIAL_STUDY/01-helloworld/helloworld/#_2","title":"\u66ff\u6362\u4ee3\u7801","text":"<p>\u5c06main.c\u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u4e3a\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>#include &lt;stdio.h&gt;                     // Standard input-output library for basic I/O operations\n#include \"freertos/FreeRTOS.h\"         // FreeRTOS core library, providing real-time operating system features\n#include \"freertos/task.h\"             // FreeRTOS task management library, includes functions for creating, deleting, and delaying tasks\n#include \"esp_log.h\"                   // ESP32 logging library for debugging and information output\n\n// Define a log tag to identify the module where the log is coming from\nstatic const char* TAG = \"main\";\n\n// Main function, the entry point of the ESP32 program\nvoid app_main(void)\n{\n    // Infinite loop, the code inside the loop will be repeatedly executed\n    while(1)\n    {\n        // Log an informational message with the \"Hello world!\" string\n        // TAG identifies the log's source module, here it is \"main\"\n        ESP_LOGI(TAG,\"Hello world!\");\n\n        // Delay the task for 1 second before repeating the loop\n        // vTaskDelay pauses the task for the specified time, where pdMS_TO_TICKS(1000) converts 1000 milliseconds (1 second) to FreeRTOS ticks\n        vTaskDelay(pdMS_TO_TICKS(1000));\n    }\n}\n</code></pre>"},{"location":"zh/TUTORIAL_STUDY/01-helloworld/helloworld/#_3","title":"\u7f16\u8bd1\uff0c\u70e7\u5f55\uff0c\u76d1\u6d4b","text":"<p>\u5728\u4e32\u53e3\u76d1\u89c6\u5668\u4e2d\uff0c\u60a8\u5c06\u770b\u5230\u6bcf\u79d2\u6253\u5370\u4e00\u6b21\u201cHello world!\u201d\u3002</p>"}]}